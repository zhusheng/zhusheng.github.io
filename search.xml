<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/17/hello-world/"/>
      <url>/2019/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow tf.summary变量收集</title>
      <link href="/2018/09/20/tensorflow-tf.summary-bian-liang-shou-ji/"/>
      <url>/2018/09/20/tensorflow-tf.summary-bian-liang-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>tf.summary变量收集的目的是：保存训练过程以及参数分布图并在tensorboard显示，可以收集的变量有标量、超参数变量、文本、图片、音频等。</p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p><strong>tf.summary.scalar</strong></p><p>用来显示标量信息，一般在画loss,accuary时会用到这个函数。</p><p>例如：tf.summary.scalar(‘mean’, mean)</p><p><strong>tf.summary.histogram</strong></p><p>用来显示直方图信息，一般用来显示训练过程中变量的分布情况。</p><p>例如： tf.summary.histogram(‘histogram’, var)</p><p><strong>tf.summary.distribution</strong></p><p>分布图，一般用于显示weights分布。</p><p><strong>tf.summary.text</strong></p><p>可以将文本类型的数据转换为tensor写入summary中。</p><pre class=" language-python"><code class="language-python">text <span class="token operator">=</span> <span class="token string">"hello tensorflow"</span>tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>convert_to_tensor<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>tf.summary.image</strong></p><p>输出带图像的probuf，汇总数据的图像的的形式如下： ‘ tag /image/0’, ‘ tag /image/1’…，如：input/image/0等。</p><p><strong>tf.summary.audio</strong></p><p>展示训练过程中记录的音频 。</p><p><strong>tf.summary.merge_all</strong></p><p>merge_all 可以将所有summary全部保存到磁盘，以便tensorboard显示。如果没有特殊要求，一般用这一句就可以显示训练时的各种信息了。</p><p><strong>tf.summary.FileWriter</strong></p><p>指定一个文件用来保存图，可以调用其add_summary()方法将训练过程数据保存在filewriter指定的文件中。</p><p><strong>tf.summary.merge</strong></p><p>略</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow模型保存和加载</title>
      <link href="/2018/09/17/tensorflow-mo-xing-bao-cun-he-jia-zai/"/>
      <url>/2018/09/17/tensorflow-mo-xing-bao-cun-he-jia-zai/</url>
      
        <content type="html"><![CDATA[<p>tensorflow模型保存和加载，使用模型保存和加载，模型的训练时一个非常耗时的操作，如果在训练过程中出现故障或者服务器宕机，我们也不想从头开始训练，这时，我们可以保存训练过程模型，比如每隔1000步保存一次。</p><h2 id="模型的保存与加载"><a href="#模型的保存与加载" class="headerlink" title="模型的保存与加载"></a>模型的保存与加载</h2><p><strong>为什么需要模型的保存和加载？</strong></p><p>在训练过程中，我们的训练耗时非常长，比如说需要训练1万次，训练需要5天。如果当我们训练到了第2天的时候，服务器宕机了，那等服务器开机后又需要重新开始训练，2天的训练白干了。</p><p>有了模型的保存和加载，我们可以指定每隔1000次保存依次模型，总共保存最新的5隔模型，那么当服务器宕机了，重启后，我们可以加载之间的模型训练结果，接着开始训练。</p><p>使用逻辑：</p><ul><li>首先，创建模型保存对象；</li><li>然后在训练之前，检查指定的目录下是否存在模型文件，如果存在就加载模型文件；</li><li>最后，在训练过程中，指定策略去保存模型。</li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>创建模型保存对象</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span>var_list<span class="token operator">=</span>None<span class="token punctuation">,</span>max_to_keep<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li>var_list:指定将要保存和还原的变量。它可以作为一个dict或一个列表传递.</li><li>max_to_keep：指示要保留的最近检查点文件的最大数量。创建新文件时，会删除较旧的文件。如果无或0，则保留所有检查点文件。默认为5（即保留最新的5个检查点文件。）</li></ul><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><p><strong>模型保存</strong></p><pre class=" language-python"><code class="language-python">saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'/tmp/ckpt/model'</span><span class="token punctuation">)</span></code></pre><p>我们需要指定模型的名称，这里我们取名为model。说明：模型保存文件格式：checkpoint文件，在我们保存模型成功后，在其目录下会有一个checkpoint文件。</p><p><strong>模型加载</strong></p><pre class=" language-python"><code class="language-python">saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'/tmp/ckpt/model'</span><span class="token punctuation">)</span></code></pre><p>在训练之前，我们可以检查以下我们是有存在checkpoint文件，如果有checkpoint文件，我们可以加载模型，接着之前训练的结果进行训练。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token keyword">def</span> <span class="token function">mymigration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">1.75</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">)</span>        y_true <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.8</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"model"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>        y_predict <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weight<span class="token punctuation">)</span> <span class="token operator">+</span> bias    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"loss"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_true<span class="token operator">-</span> y_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"optimizer"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>scalar<span class="token punctuation">(</span><span class="token string">"losses"</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token string">"weights"</span><span class="token punctuation">,</span> weight<span class="token punctuation">)</span>    merged <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>merge_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1、创建模型对象</span>    saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span>var_list<span class="token operator">=</span>None<span class="token punctuation">,</span>max_to_keep<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 2、定义模型保存文件 </span>      filewritter <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>FileWriter<span class="token punctuation">(</span><span class="token string">'logs/'</span><span class="token punctuation">,</span> graph<span class="token operator">=</span>sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"随机最先初始化的权重和偏置：权重为:%f, 偏置为:%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>weight<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 训练之前先检查一下是否有模型文件，如果有，加载模型，接着该模型进行训练。</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"tmp/ckpt/checkpoint"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'tmp/ckpt/model'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_op<span class="token punctuation">)</span>            summary <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>merged<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 3、写入事件文件</span>            filewritter<span class="token punctuation">.</span>add_summary<span class="token punctuation">(</span>summary<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d次优化的权重和偏置：权重为:%f, 偏置为:%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> weight<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 4、保存模型</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'tmp/ckpt/model'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> None<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    mymigration<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>## </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow文件操作</title>
      <link href="/2018/09/15/tensorflow-wen-jian-cao-zuo/"/>
      <url>/2018/09/15/tensorflow-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>tensorflow文件操作，包含读取csv文件、csv文件集、图片、二进制文件以及TFRecords文件读取。</p><h2 id="读取csv文件"><a href="#读取csv文件" class="headerlink" title="读取csv文件"></a>读取csv文件</h2><p>读取文件的步骤：</p><ul><li>构建文件队列</li><li>构建一个csv阅读器，用来读取数据</li><li>开始读取数据</li><li>文件解码</li><li>创建线程循环开始真正读取数据</li></ul><h3 id="读取单个csv文件"><a href="#读取单个csv文件" class="headerlink" title="读取单个csv文件"></a>读取单个csv文件</h3><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token keyword">def</span> <span class="token function">file_len</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""   获取文件的长度，也就是有多少行    """</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> l <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># i为行，从0开始，l为每行的内容，</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># i还在内存中，可以直接调用</span><span class="token keyword">def</span> <span class="token function">readcsv</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取csv文件    """</span>    <span class="token comment" spellcheck="true"># 1、构造一个读取文件的队列</span>    filename_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span><span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构建一个csv阅读器，去读取数据</span>    <span class="token comment" spellcheck="true"># csv文件是一行一行的读取，`skip_header_lines=0`表示是否跳过行首，也就是说行首是否也读取。</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TextLineReader<span class="token punctuation">(</span>skip_header_lines<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、开始读取数据，返回2个值，第一个值为行号，第二个值为内容</span>    _<span class="token punctuation">,</span> csv_row <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>filename_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、文件解码setup CSV decoding</span>    <span class="token comment" spellcheck="true"># `record_defaults`表示每一个字段的数据类型。如果是整数类型，写`0`；如果是浮点类型，写`0.0`；如果是字符串类型，写`"None"`、`"null"`等。</span>    record_defaults <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"None"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">,</span>label <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_csv<span class="token punctuation">(</span>csv_row<span class="token punctuation">,</span> record_defaults<span class="token operator">=</span>record_defaults<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 转化为张量</span>    features <span class="token operator">=</span> tf<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loading, "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>file_length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" line(s)\n"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> features<span class="token punctuation">,</span> label<span class="token comment" spellcheck="true"># 要读取的数据文件</span>filename <span class="token operator">=</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/11-csv1/a1.csv"</span><span class="token comment" spellcheck="true"># 获取文件长度</span>file_length <span class="token operator">=</span> file_len<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取文件</span>features<span class="token punctuation">,</span>label <span class="token operator">=</span> readcsv<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5、创建一个线程协调器，然后启动线程</span>    coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环读取</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>file_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        re_feature<span class="token punctuation">,</span> re_label <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>features<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>re_feature<span class="token punctuation">,</span> re_label<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取结束后，关闭session、关闭线程</span>    coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">loading, 10 line<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>   1   10  100 1000<span class="token punctuation">]</span> b<span class="token string">'train'</span><span class="token punctuation">[</span>   2   11  101 1001<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>   3   12  102 1002<span class="token punctuation">]</span> b<span class="token string">'train'</span><span class="token punctuation">[</span>   4   13  103 1003<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>   5   14  104 1004<span class="token punctuation">]</span> b<span class="token string">'subway'</span><span class="token punctuation">[</span>   6   15  105 1005<span class="token punctuation">]</span> b<span class="token string">'subway'</span><span class="token punctuation">[</span>   7   16  106 1006<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>   8   17  107 1007<span class="token punctuation">]</span> b<span class="token string">'train'</span><span class="token punctuation">[</span>   9   18  108 1008<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>  10   19  109 1009<span class="token punctuation">]</span> b<span class="token string">'subway'</span></code></pre><h3 id="读取csv文件集"><a href="#读取csv文件集" class="headerlink" title="读取csv文件集"></a>读取csv文件集</h3><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">csvread</span><span class="token punctuation">(</span>filelist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取CSV文件    :param filelist: 文件路径+名字的列表    :return: 读取的内容    """</span>    <span class="token comment" spellcheck="true"># 1、构造文件的队列</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造csv阅读器读取队列数据（按一行）</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TextLineReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取数据，key为行号，value为每一行的内容</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、对每行内容解码</span>    <span class="token comment" spellcheck="true"># record_defaults:指定每一个样本的每一列的类型，指定默认值[["None"], [4.0]]</span>    records <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"None"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    example<span class="token punctuation">,</span> label <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_csv<span class="token punctuation">(</span>value<span class="token punctuation">,</span> record_defaults<span class="token operator">=</span>records<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 想要读取多个数据，就需要批处理</span>    <span class="token comment" spellcheck="true"># 一般capacity设置和batch_size一样，或者比它大。</span>    example_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>example<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> example_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 需要读取的csv文件列表</span>    file_name <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"/Users/zhusheng/WorkSpace/Dataset/11-csv1/csv_list/"</span><span class="token punctuation">)</span>    filelist <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"/Users/zhusheng/WorkSpace/Dataset/11-csv1/csv_list/"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> file_name<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 读取csv文件列表</span>    example_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> csvread<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5、开启子线程读取数据</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印获取的数据</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>example_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'a1'</span>, b<span class="token string">'a2'</span>, b<span class="token string">'a3'</span>, b<span class="token string">'a4'</span>, b<span class="token string">'a5'</span>, b<span class="token string">'a6'</span>, b<span class="token string">'a7'</span>, b<span class="token string">'a8'</span>, b<span class="token string">'a9'</span><span class="token punctuation">]</span>,      dtype<span class="token operator">=</span>object<span class="token punctuation">)</span>, array<span class="token punctuation">(</span><span class="token punctuation">[</span>20, 21, 22, 23, 24, 25, 26, 27, 28<span class="token punctuation">]</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h2 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h2><h3 id="图像三要素"><a href="#图像三要素" class="headerlink" title="图像三要素"></a>图像三要素</h3><p>图像三要素：长度(height)、宽度(width)、通道数(channels)，我们可以使用一个3-D张量来表示：</p><p>[height,width,channels]</p><p>说明：通道数为1，表示灰度值；通道数为3，表示RGB。</p><p>一般在拿到图片数据集后，我们都会对图片进行一些处理，指定3-D的shape大小，我们会将所有的图片进行缩放处理，变成统一大小的图片。</p><p>在处理图片数据的时候，我们最后会把数据包装成4-D张量：[nums,height,width,channels]，如下所示：</p><pre class=" language-bash"><code class="language-bash">Tensor<span class="token punctuation">(</span><span class="token string">"batch:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>300, 200, 200, 1<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span> </code></pre><p>分别表示batch_size、weight、width、channel。</p><p>读取文件的步骤：</p><ul><li>构建文件队列</li><li>构建阅读器，用来读取数据</li><li>开始读取数据</li><li>文件解码，可以使用批处理</li><li>创建线程循环开始真正读取数据</li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">pictureRead</span><span class="token punctuation">(</span>filelist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1、构造文件队列</span>    queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造阅读器去读取图片内容（默认读取一张图片）</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>WholeFileReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、读取数据</span>    key<span class="token punctuation">,</span>value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、解码</span>    images <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>decode_jpeg<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解码："</span><span class="token punctuation">,</span>images<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 统一图片大小</span>    images_resize <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>resize_images<span class="token punctuation">(</span>images<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"resize:"</span><span class="token punctuation">,</span>images_resize<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在批处理的时候要求所有数据形状必须定义</span>    <span class="token comment" spellcheck="true"># 如果是RGB图片，设置成[200, 200, 3]</span>    images_resize<span class="token punctuation">.</span>set_shape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"set_shape:"</span><span class="token punctuation">,</span>images_resize<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 批处理,获得4D tensor， 第一个为样本数量</span>    images_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>images_resize<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"批处理："</span><span class="token punctuation">,</span> images_batch<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">return</span> images_batch<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 图片列表路径</span>    dir_mstar <span class="token operator">=</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/8-MSTAR/MSTAR/EOC-data/train/2S1-b01/"</span>    filenames <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_mstar<span class="token punctuation">)</span>    filelist <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_mstar<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> filenames<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#print("文件列表：",filelist)</span>    images_batch <span class="token operator">=</span> pictureRead<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化变量</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5、开启线程去读取图片</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        result <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>images_batch<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"读取结果："</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回收线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">解码： <span class="token punctuation">(</span>?, ?, ?<span class="token punctuation">)</span>resize: <span class="token punctuation">(</span>200, 200, ?<span class="token punctuation">)</span>set_shape: <span class="token punctuation">(</span>200, 200, 1<span class="token punctuation">)</span>批处理： <span class="token punctuation">(</span>300, 200, 200, 1<span class="token punctuation">)</span>读取结果： <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> 67.      <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 95.44    <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 61.819996<span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 31.029907<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 31.139969<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 41.      <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>105.71001 <span class="token punctuation">]</span>   <span class="token punctuation">[</span>134.7741  <span class="token punctuation">]</span>   <span class="token punctuation">[</span>104.985596<span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 55.43302 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 59.40616 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 73.39    <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> 88.74    <span class="token punctuation">]</span>   <span class="token punctuation">[</span>120.260994<span class="token punctuation">]</span>   <span class="token punctuation">[</span>100.8464  <span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 96.37775 <span class="token punctuation">]</span>   <span class="token punctuation">[</span>101.66196 <span class="token punctuation">]</span>   <span class="token punctuation">[</span>115.06    <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span><span class="token punctuation">[</span> 40.26001 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.7946  <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 51.09242 <span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 51.583595<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 56.35912 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 60.680176<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> 43.939987<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.572002<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 48.927616<span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 51.57547 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 60.403603<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 67.70003 <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> 48.      <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.05    <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.16    <span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 43.670044<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 52.039978<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 59.      <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h2 id="读取二进制文件"><a href="#读取二进制文件" class="headerlink" title="读取二进制文件"></a>读取二进制文件</h2><p>我们这里的示例数据集为cifar-10，该数据集是一个图片数据集。</p><p>下载后的数据集为二进制格式，如下所示：</p><p><img src="/images/image-20190813232143691.png" alt=""></p><p>读取文件的步骤：</p><ul><li>构建文件队列</li><li>构建阅读器，用来读取数据</li><li>开始读取数据</li><li>文件解码，可以使用批处理</li><li>创建线程循环开始真正读取数据</li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token triple-quoted-string string">"""读取二进制文件"""</span><span class="token comment" spellcheck="true"># 自定义命令行参数</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin"</span><span class="token punctuation">,</span> <span class="token string">"文件的目录"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图片的基本数据</span>height <span class="token operator">=</span> <span class="token number">32</span>width <span class="token operator">=</span> <span class="token number">32</span>channel <span class="token operator">=</span> <span class="token number">3</span>label_bytes <span class="token operator">=</span> <span class="token number">1</span>image_bytes <span class="token operator">=</span> height <span class="token operator">*</span> width <span class="token operator">*</span> channelbytes <span class="token operator">=</span> label_bytes <span class="token operator">+</span> image_bytes<span class="token keyword">def</span> <span class="token function">read_and_decode</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取二进制文件    :return:    """</span>    <span class="token comment" spellcheck="true"># 1、构造文件队列</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造二进制文件读取器，读取内容, 每个样本的字节数</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>FixedLengthRecordReader<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、读取数据</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"value:"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、解码内容, 二进制文件内容的解码</span>    label_image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>value<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"label_image:"</span><span class="token punctuation">,</span> label_image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分割出图片和标签数据，切出特征值和目标值</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>label<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    image <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>image_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"label:"</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image:"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可以对图片的特征数据进行形状的改变 [3072] --> [32, 32, 3]</span>    image_reshape <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">[</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> channel<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image_reshape:"</span><span class="token punctuation">,</span> image_reshape<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 批处理数据,总样本数为10000 *5 = 50000，为了节省运行时间，我改为100</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>image_reshape<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image_batch:"</span><span class="token punctuation">,</span> image_batch<span class="token punctuation">,</span> <span class="token string">"\nlabel_batch:"</span><span class="token punctuation">,</span> label_batch<span class="token punctuation">)</span>    <span class="token keyword">return</span> image_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 找到文件，放入列表   路径+名字  ->列表当中</span>    file_name <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 下载的数据集中，有一个test_batch.bin，我改了一下名称为test_batch.binn,方便删选,取出后缀为bin的文件</span>    file_list <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> file_name <span class="token keyword">if</span> file<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"bin"</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取数据</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> read_and_decode<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启会话运行结果</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5、定义一个线程协调器， 开启读文件的线程</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 读取内容</span>        result <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印读取的结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打印读取的结果："</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回收子线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_3.bin'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_2.bin'</span>,  <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_1.bin'</span>,  <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_5.bin'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_4.bin'</span><span class="token punctuation">]</span>value: Tensor<span class="token punctuation">(</span><span class="token string">"ReaderReadV2:1"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, dtype<span class="token operator">=</span>string<span class="token punctuation">)</span>label_image: Tensor<span class="token punctuation">(</span><span class="token string">"DecodeRaw:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>?,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>label: Tensor<span class="token punctuation">(</span><span class="token string">"Cast:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>1,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>image: Tensor<span class="token punctuation">(</span><span class="token string">"Slice_1:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>3072,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>image_reshape: <span class="token punctuation">(</span>32, 32, 3<span class="token punctuation">)</span>image_batch: Tensor<span class="token punctuation">(</span><span class="token string">"batch:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>100, 32, 32, 3<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span> label_batch: Tensor<span class="token punctuation">(</span><span class="token string">"batch:1"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>100, 1<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>打印读取的结果： <span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>255, 252, 253<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>250, 238, 233<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>245, 241, 232<span class="token punctuation">]</span>,         <span class="token punctuation">..</span>.,         <span class="token punctuation">[</span>175, 158, 169<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>172, 179, 176<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>164, 152, 163<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>, array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>8<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>5<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>5<span class="token punctuation">]</span>,<span class="token punctuation">..</span>.       <span class="token punctuation">[</span>6<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>3<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>4<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>4<span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h2 id="TFRecords文件读写操作"><a href="#TFRecords文件读写操作" class="headerlink" title="TFRecords文件读写操作"></a>TFRecords文件读写操作</h2><h3 id="TFRecords介绍"><a href="#TFRecords介绍" class="headerlink" title="TFRecords介绍"></a>TFRecords介绍</h3><p>TFRecords是Tensorflow设计的一种<code>内置文件格式</code>，是一种<code>二进制文件</code>，它能更好的利用内存，方便进行数据的复制和移动。</p><p>TFRecords存储的文件格式为：<code>*.tfrecords</code>，文件写入的内容为：<code>Example协议块</code>。目的是为了将二进制数据和标签(训练的类别标签)数据存储在同一个文件中。</p><h3 id="TFRecords写入"><a href="#TFRecords写入" class="headerlink" title="TFRecords写入"></a>TFRecords写入</h3><ol><li><p>构造存储器</p></li><li><p>构造每一个样本的Example</p></li><li><p>写入序列化的Example</p></li></ol><p>下面的案例是读取二进制文件数据集，然后将读取的内容存储为tfrecords文件格式。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 定义cifar的数据等命令行参数</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin"</span><span class="token punctuation">,</span> <span class="token string">"文件的目录"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tmp子目录需要自己创建</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/tmp/cifar.tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"存进tfrecords的文件"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图片的基本数据</span>height <span class="token operator">=</span> <span class="token number">32</span>width <span class="token operator">=</span> <span class="token number">32</span>channel <span class="token operator">=</span> <span class="token number">3</span>label_bytes <span class="token operator">=</span> <span class="token number">1</span>image_bytes <span class="token operator">=</span> height <span class="token operator">*</span> width <span class="token operator">*</span> channelbytes <span class="token operator">=</span> label_bytes <span class="token operator">+</span> image_bytes<span class="token keyword">def</span> <span class="token function">read_and_decode</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取二进制文件    :return:    """</span>    <span class="token comment" spellcheck="true"># 1、构造文件队列</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造二进制文件读取器，读取内容, 每个样本的字节数</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>FixedLengthRecordReader<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、解码内容, 二进制文件内容的解码</span>    label_image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>value<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、分割出图片和标签数据，切出特征值和目标值</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>label<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    image <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>image_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5、可以对图片的特征数据进行形状的改变 [3072] --> [32, 32, 3]</span>    image_reshape <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">[</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> channel<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image_reshape"</span><span class="token punctuation">,</span> image_reshape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6、批处理数据,总样本数为10000 *5 = 50000，为了节省运行时间，我改为100</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>image_reshape<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> image_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">def</span> <span class="token function">convert_to_tfrecords</span><span class="token punctuation">(</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将图片的特征值和目标值存进tfrecords    :param image_batch:    :param label_batch:    :return:    """</span>    <span class="token comment" spellcheck="true"># 1、建立TFRecords存储器</span>    writer <span class="token operator">=</span> tf<span class="token punctuation">.</span>python_io<span class="token punctuation">.</span>TFRecordWriter<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、循环将所有样本写入文件中，每张图片都要构造example协议</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 取出第i个图片的数据的特征值和目标值</span>        image <span class="token operator">=</span> image_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span>        label <span class="token operator">=</span> int<span class="token punctuation">(</span>label_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构造一个样本的example</span>        example <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Example<span class="token punctuation">(</span>features<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Features<span class="token punctuation">(</span>feature<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"image"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>bytes_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>BytesList<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>image<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"label"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>int64_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Int64List<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 写入单独的样本</span>        writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>example<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    file_name <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">)</span>    file_list <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> file_name <span class="token keyword">if</span> file<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"bin"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 读取二进制数据</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> read_and_decode<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启会话运行结果</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义一个线程协调器</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开启读文件的线程</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印读取的内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将数据存储到TFRecords存储器中</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始存储"</span><span class="token punctuation">)</span>        convert_to_tfrecords<span class="token punctuation">(</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">,</span> FLAGS<span class="token punctuation">.</span>cifar_tfrecords<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束存储"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回收子线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">label Tensor<span class="token punctuation">(</span><span class="token string">"Cast:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>1,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>image Tensor<span class="token punctuation">(</span><span class="token string">"Slice_1:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>3072,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>image_reshape Tensor<span class="token punctuation">(</span><span class="token string">"Reshape:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>32, 32, 3<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> 59,  43,  50<span class="token punctuation">]</span>,         <span class="token punctuation">[</span> 68,  98, 119<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>139, 145, 149<span class="token punctuation">]</span>,         <span class="token punctuation">..</span>.,         <span class="token punctuation">[</span>  0,   0,   1<span class="token punctuation">]</span>,         <span class="token punctuation">[</span> 14,   8,  10<span class="token punctuation">]</span>,         <span class="token punctuation">[</span> 47, 111, 160<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>, array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>6<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>9<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>9<span class="token punctuation">]</span>,<span class="token punctuation">..</span>.       <span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>4<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span><span class="token punctuation">]</span>开始存储结束存储</code></pre><h3 id="TFRecords读取"><a href="#TFRecords读取" class="headerlink" title="TFRecords读取"></a>TFRecords读取</h3><ol><li>构造TFRecords阅读器</li><li>解析Example</li><li>转换格式，bytes解码</li></ol><p>根据上面存储的tfrecords文件，读取该文件的内容，示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 定义cifar的数据等命令行参数</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin"</span><span class="token punctuation">,</span> <span class="token string">"文件的目录"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/tmp/cifar.tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"存进tfrecords的文件"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_from_tfrecords</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取tfrecords    :return: None    """</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1、构造TFRecords阅读器</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TFRecordReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、解析Example</span>    features <span class="token operator">=</span> tf<span class="token punctuation">.</span>parse_single_example<span class="token punctuation">(</span>value<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">"image"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"label"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、转换格式，bytes解码</span>    image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置静态形状</span>    image<span class="token punctuation">.</span>set_shape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("image:",image)</span>    <span class="token comment" spellcheck="true"># image: Tensor("DecodeRaw:0", shape=(3072,), dtype=uint8)</span>    <span class="token comment" spellcheck="true"># 可用于转换动态形状</span>    image_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("image_tensor:",image_tensor)</span>    <span class="token comment" spellcheck="true"># image_tensor: Tensor("Reshape:0", shape=(32, 32, 3), dtype=uint8)</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("label:",label)</span>    <span class="token comment" spellcheck="true"># label: Tensor("Cast:0", shape=(), dtype=int32)</span>    <span class="token comment" spellcheck="true"># 批处理</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>image_tensor<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("image_batch:",image_batch)</span>    <span class="token comment" spellcheck="true">#print("label_batch:",label_batch)</span>    <span class="token comment" spellcheck="true"># image_batch: Tensor("batch:0", shape=(10, 32, 32, 3), dtype=uint8)</span>    <span class="token comment" spellcheck="true"># label_batch: Tensor("batch:1", shape=(10,), dtype=int32)</span>    <span class="token keyword">return</span> image_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从TFRecord文件中读取数据，首先得有这个文件。</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> read_from_tfrecords<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_tfrecords<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>sess<span class="token operator">=</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印读取的结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow线程和队列</title>
      <link href="/2018/09/15/tensorflow-xian-cheng-he-dui-lie/"/>
      <url>/2018/09/15/tensorflow-xian-cheng-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>tensorflow线程和队列。</p><h2 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h2><p>tensorflow有两种队列：</p><ul><li><p>tf.FIFOQueue：先进先出队列，按顺序出队列</p></li><li><p>tf.RandomShuffleQueue：随机出队列</p></li></ul><p>两个API的使用基本差不多，我们以FIFOQueue为例说明。</p><h3 id="先进先出队列：FIFOQueue"><a href="#先进先出队列：FIFOQueue" class="headerlink" title="先进先出队列：FIFOQueue"></a>先进先出队列：FIFOQueue</h3><p>API</p><pre class=" language-python"><code class="language-python">FIFOQueue<span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> dtypes<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'fifo_queue'</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><p>capacity：整数。可能存储在此队列中的元素数量的上限。</p></li><li><p>dtypes：DType对象列表。长度dtypes必须等于每个队列元素中的张量数,dtype的类型形状，决定了后面进队列元素形状。</p></li></ul><p>相关方法</p><ul><li><p>dequeue(name=None)：出队列</p></li><li><p>enqueue(vals, name=None)：入队列</p></li><li><p>enqueue_many(vals, name=None)：入队列，vals为列表或者元组</p></li><li><p>size(name=None)：队列元素大小</p></li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 1、定义队列,队列长度为3，数据类型为tf.float32</span>Q <span class="token operator">=</span> tf<span class="token punctuation">.</span>FIFOQueue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往队列中放入数据</span>enq_many <span class="token operator">=</span> Q<span class="token punctuation">.</span>enqueue_many<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、定义读数据、取数据的过程、取数据+1，入队列</span><span class="token comment" spellcheck="true"># 出队列</span>de_q<span class="token operator">=</span> Q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 + 1</span>data <span class="token operator">=</span> de_q <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 入队列</span>en_q <span class="token operator">=</span> Q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化队列</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>enq_many<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 处理数据，执行100次操作</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># tensorflow的操作有依赖性</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>en_q<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将队列中的数据都打印出来</span>    <span class="token comment" spellcheck="true"># 获取队列长度</span>    size <span class="token operator">=</span> Q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"队列大小:"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>Q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">队列大小: 333.233.334.1</code></pre><p>说明：tensor的操作有依赖性。</p><h2 id="队列管理器QueueRunner"><a href="#队列管理器QueueRunner" class="headerlink" title="队列管理器QueueRunner"></a>队列管理器QueueRunner</h2><p>什么是队列管理器？</p><p>我们可以把我们的队列放到队列管理器中，并创建一个线程来运行我们的队列。</p><p>API</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>QueueRunner<span class="token punctuation">(</span>queue<span class="token punctuation">,</span> enqueue_ops<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><p>queue：A Queue</p></li><li><p>enqueue_ops：添加线程的队列操作列表，[]*2,指定两个线程</p></li></ul><p>相关方法</p><p>create_threads(sess, coord=None,start=False)：创建线程来运行给定会话的入队操作</p><p>参数说明：</p><ul><li><p>start：布尔值，如果True启动线程；如果为False调用者必须调用start()启动线程</p></li><li><p>coord：线程协调器，后面线程管理需要用到</p></li><li><p>return：线程的实例</p></li></ul><h2 id="线程Thread"><a href="#线程Thread" class="headerlink" title="线程Thread"></a>线程Thread</h2><p>线程涉及到2个核心概念：队列管理器和线程协调器。</p><h3 id="线程协调器Coordinator"><a href="#线程协调器Coordinator" class="headerlink" title="线程协调器Coordinator"></a>线程协调器Coordinator</h3><p>什么是线程协调器？</p><p>用来协调子线程和主线程，当我们在会话中开启子线程去做一些事情的时候，我们的会话执行完了，但是子线程还在运行，可是子线程的运行必须依赖会话，所以就会报错。有了线程协调器，我们可以在会话中等待子线程运行结束。</p><p>API</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>相关方法</p><ul><li><p>request_stop()：请求停止，等待子线程运行结束后停止。</p></li><li><p>should_stop()：检查是否要求停止，立即停止。</p></li><li><p>join(threads=None, stop_grace_period_secs=120) ：将子线程加入Coordinator，等待线程终止进行回收。</p></li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 1、定义1个队列，可以放1000个数据</span>Q <span class="token operator">=</span> tf<span class="token punctuation">.</span>FIFOQueue<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、定义要做的事情</span><span class="token comment" spellcheck="true"># 新建变量</span>var  <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变量+1</span>data <span class="token operator">=</span> tf<span class="token punctuation">.</span>assign_add<span class="token punctuation">(</span>var<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 入队</span>en_q <span class="token operator">=</span> Q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、定义队列管理器op, 指定多少个子线程，子线程该干什么事</span>qr <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>QueueRunner<span class="token punctuation">(</span>Q<span class="token punctuation">,</span> enqueue_ops<span class="token operator">=</span><span class="token punctuation">[</span>en_q<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 线程协调器、线程管理员</span>    coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 真正开启子线程,去做那些事</span>    threads <span class="token operator">=</span> qr<span class="token punctuation">.</span>create_threads<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 主线程，不断的去从队列中读取数据</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>Q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 回收子线程</span>    coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">12.030.046.060.071.084.0100.0114.0126.0<span class="token punctuation">..</span>.1283.01284.01285.01286.01287.01288.0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow设置</title>
      <link href="/2018/09/10/tensorflow-she-zhi/"/>
      <url>/2018/09/10/tensorflow-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>tensorflow设置，比如一些参数设置等。</p><h2 id="log-device-placement"><a href="#log-device-placement" class="headerlink" title="log_device_placement"></a>log_device_placement</h2><p>它是Session的一个参数，设置该参数<em>log_device_placement=True</em>，让我们可以看到我们的tensor、op是在哪台设备、哪颗CPU上运行的。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 创建tensor</span>a <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建op</span>sum <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过Session执行graph</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span>config<span class="token operator">=</span>tf<span class="token punctuation">.</span>ConfigProto<span class="token punctuation">(</span>log_device_placement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">Device mapping: no known devices.Add: <span class="token punctuation">(</span>Add<span class="token punctuation">)</span>: /job:localhost/replica:0/task:0/device:CPU:0Const: <span class="token punctuation">(</span>Const<span class="token punctuation">)</span>: /job:localhost/replica:0/task:0/device:CPU:0Const_1: <span class="token punctuation">(</span>Const<span class="token punctuation">)</span>: /job:localhost/replica:0/task:0/device:CPU:011.0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow入门案例</title>
      <link href="/2018/09/09/tensorflow-ru-men-an-li/"/>
      <url>/2018/09/09/tensorflow-ru-men-an-li/</url>
      
        <content type="html"><![CDATA[<p>tensorflow的运行方式分为4步：</p><ul><li>加载数据及定义超参数</li><li>构建网络</li><li>训练模型</li><li>评估模型和进行预测</li></ul><p>示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""1、加载数据及定义超参数"""</span><span class="token triple-quoted-string string">"""使用模拟数据"""</span><span class="token comment" spellcheck="true"># np.linspace用于生成等差数列，上述代码表示在[-1,1]之间生成300个数据，形成等差数列关系。</span>x_data <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将x_data转换为二维数组，newaxis表示在当前位置增加一个维度，在这里也就是增加列</span>x_data <span class="token operator">=</span> x_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 加入一些噪声点</span>noise <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">,</span> x_data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据公式模拟y值</span>y_true <span class="token operator">=</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">+</span> noise<span class="token keyword">def</span> <span class="token function">add_layer</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> in_size<span class="token punctuation">,</span> out_size<span class="token punctuation">,</span> activation_function<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    参数1:输入数据    参数2:输入数据维度    参数3:输出数据维度    参数4:激活函数    """</span>    <span class="token comment" spellcheck="true"># 构建权重</span>    w <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>in_size<span class="token punctuation">,</span> out_size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构建偏置</span>    b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> out_size<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 矩阵相乘</span>    y_predict <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>input<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">+</span> b    <span class="token keyword">if</span> activation_function <span class="token keyword">is</span> None<span class="token punctuation">:</span>        outputs <span class="token operator">=</span> y_predict    <span class="token keyword">else</span><span class="token punctuation">:</span>        outputs <span class="token operator">=</span> activation_function<span class="token punctuation">(</span>y_predict<span class="token punctuation">)</span>    <span class="token keyword">return</span> outputs<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义训练数据的占位符</span>    xs <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ys <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""2、构建网络"""</span>    <span class="token comment" spellcheck="true"># 构建神经网络，输入层、1个隐层、输出层</span>    <span class="token comment" spellcheck="true"># 假设输入层有1个神经元、隐层有20个神经元、输出层有1个神经元</span>    h1 <span class="token operator">=</span> add_layer<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> activation_function<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 隐层</span>    prediction <span class="token operator">=</span> add_layer<span class="token punctuation">(</span>h1<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> activation_function<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出层</span>    <span class="token comment" spellcheck="true"># 损失函数</span>    <span class="token comment" spellcheck="true"># reduction_indices[1]：按行求和, reduction_indices[0]：按列求和</span>    var <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>ys <span class="token operator">-</span> prediction<span class="token punctuation">)</span><span class="token punctuation">,</span> reduction_indices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>var<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 梯度下降</span>    train_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""3、训练模型"""</span>    init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化所有变量</span>    sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_step<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>xs<span class="token punctuation">:</span> x_data<span class="token punctuation">,</span> ys<span class="token punctuation">:</span> y_true<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""4、评估模型和进行预测"""</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loss:"</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>xs<span class="token punctuation">:</span> x_data<span class="token punctuation">,</span> ys<span class="token punctuation">:</span> y_true<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果如下：</p><pre class=" language-bash"><code class="language-bash">loss: 110.16617loss: 0.036757533loss: 0.0054481984loss: 0.0035916578loss: 0.0034978597loss: 0.0034721652loss: 0.0034505327loss: 0.0034306566loss: 0.0034096679loss: 0.0033894777loss: 0.0033684329loss: 0.0033460592loss: 0.003322898loss: 0.0033007755loss: 0.003278572loss: 0.0032573033loss: 0.0032364165loss: 0.003216444loss: 0.0031958343loss: 0.0031740805</code></pre><p>我们使用tensorflow框架基本都会有这4个大的步骤，有的网络结构复杂、有的网络结构简单而已，比如R-CNN网络、RPN网络、GoogleNet网络，有些网络结构我们可以直接拿来使用。</p><p>模型训练是一个非常耗时的操作，这个和我们定义的网络结构有关，有些业务场景还会涉及到一个网络结构的输出作为另外一个网络结构的输入。</p><p>总之，我们会根据我们的业务场景需求去做相应的处理，但是还是会遵循这几个基本步骤。</p><p>【拓展：np.newaxis】用于在当前位置增加一个维度，示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data2 <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># n行，1列</span>    test_data3 <span class="token operator">=</span> test_data<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 1列，n行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_data2:"</span><span class="token punctuation">,</span> test_data2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_data3:"</span><span class="token punctuation">,</span> test_data3<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">test_data2: <span class="token punctuation">[</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span><span class="token punctuation">]</span>test_data3: <span class="token punctuation">[</span><span class="token punctuation">[</span>1 2 3 4 5<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow张量和变量</title>
      <link href="/2018/09/08/tensorflow-zhang-liang-he-bian-liang/"/>
      <url>/2018/09/08/tensorflow-zhang-liang-he-bian-liang/</url>
      
        <content type="html"><![CDATA[<p>主要介绍tensorflow的张量和变量的基本用法。</p><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><p>Tensor是一个类，包含了属性和常用函数，一个Tensor对象主要包含以下三个部分，如下所示：</p><pre class=" language-bash"><code class="language-bash">Tensor<span class="token punctuation">(</span><span class="token string">"Placeholder:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>2, 3<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>    </code></pre><p>参数说明：</p><ul><li><p>第一部分是<code>Tensor Name</code>，比如：’Constant’、‘Placeholder’、‘Variable’等，0没有什么实质性的含义，只是表示Tensor的顺序，当前是0，那么下一个Tensor就是1了；</p></li><li><p>第二部分是<code>Tensor Shape</code>, 也就是Tensor的形状，这里是[2,3]，2行3列。</p></li><li><p>第三部分是<code>Tensor Type</code>，也就是tensor张量的数据类型。</p></li></ul><h3 id="tensor的形状"><a href="#tensor的形状" class="headerlink" title="tensor的形状"></a>tensor的形状</h3><p>tensor的形状，我们在TensorFlow中使用阶乘表示，它的形状表示如下表所示：</p><table><thead><tr><th>阶乘</th><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>0</td><td>纯量</td><td>只有大小</td><td>s = 481</td></tr><tr><td>1</td><td>向量</td><td>有大小和方向</td><td>v = [1, 2, 3]</td></tr><tr><td>2</td><td>矩阵</td><td>数据表</td><td>比如:3x2矩阵，m = [[1,2] [3,4] [5,6]]</td></tr><tr><td>3</td><td>3阶张量</td><td>数据立体</td><td>比如:1x2x2，t = [[   [[1,2],   [3,4]],      [[5,6],   [7,8]]   ]]</td></tr><tr><td>n</td><td>n阶张量</td><td>n阶张量</td><td>…</td></tr></tbody></table><p>在Tensorflow中，矩阵[n,m]，表示n行m列，行表示特征数量，列表示样本数量。</p><h3 id="tensor的数据类型"><a href="#tensor的数据类型" class="headerlink" title="tensor的数据类型"></a>tensor的数据类型</h3><table><thead><tr><th>Python类型</th><th>描述</th></tr></thead><tbody><tr><td>tf.float64</td><td>64位浮点数</td></tr><tr><td>tf.float32</td><td>32位浮点数</td></tr><tr><td>tf.int64</td><td>64位有符号整型</td></tr><tr><td>tf.int32</td><td>32位有符号整型</td></tr><tr><td>tf.int16</td><td>16位有符号整型</td></tr><tr><td>tf.int8</td><td>8位有符号整型</td></tr><tr><td>tf.uint8</td><td>8位无符号整型</td></tr><tr><td>tf.string</td><td>可变长度的字节数组，每一个张量元素都是一个字节数组</td></tr><tr><td>tf.bool</td><td>布尔型</td></tr><tr><td>tf.complex64</td><td>由两个32位浮点数组成的复数：实数和虚数</td></tr><tr><td>tf.qint32</td><td>用于量化Ops的32位有符号整型</td></tr><tr><td>tf.qint8</td><td>用于量化Ops的8位有符号整型</td></tr><tr><td>tf.quint8</td><td>用于量化Ops的8位无符号整型</td></tr></tbody></table><p>float32和float64表示浮点精度，但是实际并不会多分配内存，两者的使用效果差不多，我们常用float32。同理int32和int64也是这样。</p><h3 id="tensor属性"><a href="#tensor属性" class="headerlink" title="tensor属性"></a>tensor属性</h3><p>tensor对象具有如下属性：</p><ul><li><p>graph：张量所在的图</p></li><li><p>op:张量的op</p></li><li><p>name:张量的名称</p></li><li><p>shape:张量的形状</p></li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfa <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"graph-->"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"op-->"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>op<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name-->"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shape-->"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><h3 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h3><p>placeholder是占位符张量。</p><p>我们可以通过<code>tf.placeholder()</code>来创建一个占位符张量，用于在运行图的时候，可以动态赋予数据，我们通过<code>run(fetches, feed_dict=None, graph=None)</code>来动态赋予数据。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfplt <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>plt<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>        plt<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="张量的静态形状和动态形状"><a href="#张量的静态形状和动态形状" class="headerlink" title="张量的静态形状和动态形状"></a>张量的静态形状和动态形状</h3><p><strong>静态形状</strong></p><p>张量的形状在整个图中都是固定不可变的，如果初始的张量中由不确定的形状（如<code>?</code>），我们可以通过<code>set_shape()</code>去设置,通过<code>get_shape()</code>去获取</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfplt <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 列已经确定了，不能修改，行是None不确定可以修改</span>plt<span class="token punctuation">.</span>set_shape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plt<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>动态形状</strong></p><p>一种描述原始张量在执行过程中的一种形状，这个张量的形状在图的执行过程中是可以动态改变的。更新动态形状：<code>tf.reshape()</code>。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfplt <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reshape重新创建一个张量</span>plt2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>plt<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plt2<span class="token punctuation">)</span></code></pre><p>注意reshape前后的张量数据个数肯定是不能变的。</p><h3 id="随机张量"><a href="#随机张量" class="headerlink" title="随机张量"></a>随机张量</h3><p>在做神经网络训练的时候，梯度下降的初始参数w、b我们可以使用随机张量，然后通过梯度下降去优化。</p><p>以下是从正态分布创建随机张量的例子：</p><p>示例代码：</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span>shape<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span>seed<span class="token operator">=</span>None<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>我们关注2个参数，mean表示数据平均值，也就是数学中的μ，stddev表示标准差，也就是数学中的σ。</p><p>当μ=0，σ=1时，也就是标准正态分布。</p><h3 id="张量类型转换"><a href="#张量类型转换" class="headerlink" title="张量类型转换"></a>张量类型转换</h3><p>例如，如果我们的张量的dtype是tf.int32类型的，我们可以将其转换为tf.float32类型的。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>a<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span></code></pre><h3 id="张量合并"><a href="#张量合并" class="headerlink" title="张量合并"></a>张量合并</h3><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 张量合并</span>d <span class="token operator">=</span> tf<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> 1  2  3<span class="token punctuation">]</span> <span class="token punctuation">[</span> 4  5  6<span class="token punctuation">]</span> <span class="token punctuation">[</span> 7  8  9<span class="token punctuation">]</span> <span class="token punctuation">[</span>10 11 12<span class="token punctuation">]</span><span class="token punctuation">]</span>    </code></pre><p>说明：axis=0表示按行合并，axis=1表示按列合并。</p><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>variable 变量也是一种OP，是一种特殊的张量，能够进行存储持久化。</p><h3 id="Variable的创建"><a href="#Variable的创建" class="headerlink" title="Variable的创建"></a>Variable的创建</h3><p>API</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>initial_value<span class="token operator">=</span>None<span class="token punctuation">,</span>name<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>代码中涉及到了变量，一定要在Session之前做变量初始化，然后在Session中首先运行初始化的变量。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TP_CPP_LOG_LEVEL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token comment" spellcheck="true"># 创建变量</span>val <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变量初始化</span>init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 运行变量初始化op</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出变量</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>我们<code>在会话前必须做变量的初始化成一个op</code>，然后<code>在会话中首先运行这个初始化变量</code>。</p><p>我们也可以采用下面的简化方式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>   sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow介绍</title>
      <link href="/2018/09/07/tensorflow-jie-shao/"/>
      <url>/2018/09/07/tensorflow-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="tensorflow介绍"><a href="#tensorflow介绍" class="headerlink" title="tensorflow介绍"></a>tensorflow介绍</h2><p>TensorFlow由谷歌人工智能团队谷歌大脑（Google Brain）开发和维护的一个深度学习框架。</p><p>tensorflow = tensor + flow，也就是有向数据流，我们使用tensorflow就是构建一个数据流图，然后执行该图。</p><p>tensorflow数据流图核心要素：</p><ul><li><p>张量：tensor，数据就是张量</p></li><li><p>节点：operation(op),所有的运算操作都是一个op</p></li><li><p>图：graph，整个程序的结构就是一个graph，定义了整个程序的框架</p></li><li><p>会话：session，用来运行图</p></li></ul><p>说明：</p><ul><li>tensorflow是一个<code>计算密集型的框架</code>，<code>主要是cpu/gpu计算</code>，所以跑tensorflow代码是需要有好的硬件资源的，尤其是GPU资源；</li><li>如django/scrapy等框架是IO密集型框架，主要是磁盘操作；</li></ul><p><strong>tensorflow Playground</strong></p><p>google为我们提供了一个tensorflow在线演示环境<a href="[http://playground.tensorflow.org](http://playground.tensorflow.org)">tensorflow Playground</a></p><h2 id="tensorflow安装"><a href="#tensorflow安装" class="headerlink" title="tensorflow安装"></a>tensorflow安装</h2><h3 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h3><p>必须选择以下类型的TensorFlow之一来安装：</p><ul><li><p>TensorFlow仅支持CPU支持。如果您的系统没有NVIDIA®GPU，则必须安装此版本。请注意，此版本的TensorFlow通常会更容易安装（通常在5或10分钟内），因此即使您有NVIDIA GPU，我们建议先安装此版本。</p></li><li><p>TensorFlow支持GPU。TensorFlow程序通常在GPU上比在CPU上运行得更快。因此，如果您的系统具有满足以下所示先决条件的NVIDIA®GPU，并且您需要运行性能关键型应用程序，则应最终安装此版本。</p></li></ul><h3 id="创建隔离环境"><a href="#创建隔离环境" class="headerlink" title="创建隔离环境"></a>创建隔离环境</h3><p>基于virtualenv创建隔离环境</p><pre class=" language-bash"><code class="language-bash">mkvirtualenv -p python3.6 tensorflow</code></pre><p>基于conda创建隔离环境</p><pre class=" language-bash"><code class="language-bash">conda create -n tensorflow python<span class="token operator">=</span>3.6</code></pre><h3 id="Mac下安装"><a href="#Mac下安装" class="headerlink" title="Mac下安装"></a>Mac下安装</h3><p>mac下因为硬件原因，只好安装cpu版本。</p><ol><li>安装Tensorflow</li></ol><p>安装最新版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade tensorflow</code></pre><p>安装指定版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> tensorflow<span class="token operator">==</span>1.14.0</code></pre><p>验证安装指令</p><pre class=" language-bash"><code class="language-bash">python -c <span class="token string">"import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"</span></code></pre><ol start="2"><li>安装tensorboard</li></ol><p>tensorboard是tensorflow提供的可视化界面，建议和tensorflow安装一样的版本。</p><p>安装最新版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade tensorboard</code></pre><p>安装指定版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> tensorboard<span class="token operator">==</span>1.14.0</code></pre><h3 id="Ubuntu和Linux"><a href="#Ubuntu和Linux" class="headerlink" title="Ubuntu和Linux"></a>Ubuntu和Linux</h3><p>如果要安装GPU版本的，需要安装一大堆NVIDIA软件(不推荐)：</p><ul><li>CUDA®Toolkit 8.0。有关详细信息，请参阅 NVIDIA的文档。确保您将相关的Cuda路径名附加到 LD_LIBRARY_PATH环境变量中，如NVIDIA文档中所述。 与CUDA Toolkit 8.0相关的NVIDIA驱动程序。</li><li>cuDNN v5.1。有关详细信息，请参阅 NVIDIA的文档。确保CUDA_HOME按照NVIDIA文档中的描述创建环境变量。</li><li>具有CUDA Compute Capability 3.0或更高版本的GPU卡。有关支持的GPU卡的列表，请参阅 NVIDIA文档。</li><li>libcupti-dev库，即NVIDIA CUDA Profile Tools界面。此库提供高级分析支持。要安装此库，请发出以下命令：</li></ul><p>使用pip安装,分别有2.7和3.6版本的</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 仅使用 CPU 的版本</span>$  pip <span class="token function">install</span> https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.1-cp27-none-linux_x86_64.whl$  pip3 <span class="token function">install</span> https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.1-cp36-cp36m-linux_x86_64.whl</code></pre><h2 id="tensorflow核心概念"><a href="#tensorflow核心概念" class="headerlink" title="tensorflow核心概念"></a>tensorflow核心概念</h2><h3 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a>tensor</h3><p>tensorflow graph中的数据都是张量。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 张量合并</span>d <span class="token operator">=</span> tf<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">Tensor<span class="token punctuation">(</span><span class="token string">"Const:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>Tensor<span class="token punctuation">(</span><span class="token string">"Add:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span></code></pre><p>我们看到结果都是Tensor对象。</p><h3 id="op"><a href="#op" class="headerlink" title="op"></a>op</h3><p>只要使用tensorflow的API定义的函数都是op，如constant()、add()，tensorflow的op非常丰富。</p><h3 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h3><p>tensorflow有一个默认图，如果我们不指定图的话，默认就是在默认图上运行的。</p><p><strong>默认图</strong></p><p>如果我们不指定图的话，我们使用的是Tensorflow的默认图，它会自动调用<code>graph = tf.get_default_graph()</code>，相当于给程序分配一段内存，我们所有的Tensor、op都是在这张图上。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 新建2个tensor</span>a <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 新建1个op</span>sum <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>graph<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>graph<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>graph<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 默认图</span>graph <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查看会话所在图</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span> </code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span></code></pre><p>通过运行结果，我们发现tensor、op和session都在一个图上，也就是系统的默认图。<code>with tf.Session() as sess:</code>相当于<code>with tf.Session(graph=g) as sess:</code>。</p><p><strong>自定义图</strong></p><p>默认使用的是tensorflow默认图，我们也是可以自定义图。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 创建图</span>g <span class="token operator">=</span> tf<span class="token punctuation">.</span>Graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用自定义的图</span><span class="token keyword">with</span> g<span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>session是一个会话，tensorflow的graph都必须在Session中执行。</p><p>会话的作用：</p><ol><li>运行图的结构</li><li>分配资源计算，决定graph在什么设备上运行</li><li>掌握资源（变量的资源、队列、线程）</li></ol><p>会话对象，我们可以执行创建、运行和关闭等操作。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>会话是graph的上下文环境，只要有Session就有上下文环境。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>example</title>
      <link href="/2018/09/07/example/"/>
      <url>/2018/09/07/example/</url>
      
        <content type="html"><![CDATA[<h1 id="example"><a href="#example" class="headerlink" title="example"></a>example</h1><p><img src="/images/example.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件操作</title>
      <link href="/2017/09/12/python-wen-jian-cao-zuo/"/>
      <url>/2017/09/12/python-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="文件分割：split-和splitext"><a href="#文件分割：split-和splitext" class="headerlink" title="文件分割：split() 和splitext()"></a>文件分割：split() 和splitext()</h2><p>split：分割url为路径和文件。</p><p>splitext：分割文件为文件名和后缀。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osfile_path <span class="token operator">=</span> <span class="token string">"D:/test/test.py"</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span>tempfilename<span class="token punctuation">)</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>extension<span class="token punctuation">)</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>tempfilename<span class="token punctuation">)</span></code></pre><p>说明：</p><ul><li>filepath为文件的目录,即<code>D:/test</code></li><li>filename为文件的名字,即<code>test</code></li><li>extension为文件的扩展名,即<code>.py</code></li></ul><h2 id="获取当前文件路径：getcwd"><a href="#获取当前文件路径：getcwd" class="headerlink" title="获取当前文件路径：getcwd()"></a>获取当前文件路径：getcwd()</h2><p>该方法用于获取当前文件所在路径的全称。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">/Users/zhusheng/WorkSpace/Github/MachineLearning/TF-CNN    </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络请求</title>
      <link href="/2017/09/10/python-wang-luo-qing-qiu/"/>
      <url>/2017/09/10/python-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<p>python网络请求，介绍了urllib库、request库以及网络请求状态码。</p><h2 id="urllib库网络请求"><a href="#urllib库网络请求" class="headerlink" title="urllib库网络请求"></a>urllib库网络请求</h2><p>urllib是python内置的网络请求库。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> parse<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印二进制形式的响应内容</span>    <span class="token comment" spellcheck="true">#print(response.read())</span>    <span class="token comment" spellcheck="true">#  读取网页内容 将二进制内容按照utf-8格式解码 生成字符串格式</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'word'</span><span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://httpbin.org/post"</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 伪装一个火狐浏览器</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span><span class="token punctuation">,</span>        <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">'httpbin.org'</span>    <span class="token punctuation">}</span>    dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Germey"</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 利用更强大的 Request 类来构建一个请求</span>    req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 也可以通过更加灵活的方式添加headers   如:</span>    <span class="token comment" spellcheck="true"># req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')</span>    <span class="token comment" spellcheck="true"># req.add_header('Referer', 'https://passport.weibo.cn/signin/login?entry=mweibo&amp;res=wel&amp;wm=3349&amp;r=http%3A%2F%2Fm.weibo.cn%2F')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    header<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="requests库网络请求"><a href="#requests库网络请求" class="headerlink" title="requests库网络请求"></a>requests库网络请求</h2><p>requests是一个python 的第三方网络请求库，更加常用，通过该库可以很方便的实现get、post、put、delete、patch等请求方法。</p><p>参考链接：<a href="https://www.cnblogs.com/caesura-k/p/9638021.html" target="_blank" rel="noopener">https://www.cnblogs.com/caesura-k/p/9638021.html</a></p><p>参考链接2：<a href="https://blog.csdn.net/byweiker/article/details/79234853" target="_blank" rel="noopener">https://blog.csdn.net/byweiker/article/details/79234853</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ReadTimeout<span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    get请求    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_with_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    带参数的get请求    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get?name=germey&amp;age=22"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_with_params2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    带参数的get请求    :return:    """</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'germey'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">22</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将response以json的形式展示    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将response以二进制的形式展示    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://github.com/favicon.ico"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    添加请求头    :return:    """</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/explore"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    post请求    :return:    """</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'germey'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'22'</span><span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_response_attibutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取响应对象的属性    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.jianshu.com'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>history<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>history<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">file_upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文件上传    :return:    """</span>    files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span><span class="token string">'/Users/zhusheng/WorkSpace/Tmp/cookie.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取cookies    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">maintain_cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    会话维持、模拟登陆    如果某个响应中包含一些Cookie，你可以快速访问它们    :return:    """</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.google.com.hk/'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">'NID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    要想发送你的cookies到服务器，可以使用 cookies 参数：    :return:    """</span>    url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/cookies'</span>    cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'testCookies_1'</span><span class="token punctuation">:</span> <span class="token string">'Hello_Python3'</span><span class="token punctuation">,</span> <span class="token string">'testCookies_2'</span><span class="token punctuation">:</span> <span class="token string">'Hello_Requests'</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 在Cookie Version 0中规定空格、方括号、圆括号、等于号、逗号、双引号、斜杠、问号、@，冒号，分号等特殊符号都不能作为Cookie的内容。</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设置代理    :return:    """</span>    proxies <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1:9743"</span><span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"https://127.0.0.1:9743"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设置超时    :return:    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">except</span> ReadTimeout<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Timeout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设置认证    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://120.27.34.24:9001/"</span><span class="token punctuation">,</span> auth<span class="token operator">=</span>HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_auth2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://120.27.34.24:9001/"</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    set_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="网络状态码"><a href="#网络状态码" class="headerlink" title="网络状态码"></a>网络状态码</h2><pre class=" language-bash"><code class="language-bash">100: <span class="token punctuation">(</span><span class="token string">'continue'</span>,<span class="token punctuation">)</span>,101: <span class="token punctuation">(</span><span class="token string">'switching_protocols'</span>,<span class="token punctuation">)</span>,102: <span class="token punctuation">(</span><span class="token string">'processing'</span>,<span class="token punctuation">)</span>,103: <span class="token punctuation">(</span><span class="token string">'checkpoint'</span>,<span class="token punctuation">)</span>,122: <span class="token punctuation">(</span><span class="token string">'uri_too_long'</span>, <span class="token string">'request_uri_too_long'</span><span class="token punctuation">)</span>,200: <span class="token punctuation">(</span><span class="token string">'ok'</span>, <span class="token string">'okay'</span>, <span class="token string">'all_ok'</span>, <span class="token string">'all_okay'</span>, <span class="token string">'all_good'</span>, <span class="token string">'\\o/'</span>, <span class="token string">'✓'</span><span class="token punctuation">)</span>,201: <span class="token punctuation">(</span><span class="token string">'created'</span>,<span class="token punctuation">)</span>,202: <span class="token punctuation">(</span><span class="token string">'accepted'</span>,<span class="token punctuation">)</span>,203: <span class="token punctuation">(</span><span class="token string">'non_authoritative_info'</span>, <span class="token string">'non_authoritative_information'</span><span class="token punctuation">)</span>,204: <span class="token punctuation">(</span><span class="token string">'no_content'</span>,<span class="token punctuation">)</span>,205: <span class="token punctuation">(</span><span class="token string">'reset_content'</span>, <span class="token string">'reset'</span><span class="token punctuation">)</span>,206: <span class="token punctuation">(</span><span class="token string">'partial_content'</span>, <span class="token string">'partial'</span><span class="token punctuation">)</span>,207: <span class="token punctuation">(</span><span class="token string">'multi_status'</span>, <span class="token string">'multiple_status'</span>, <span class="token string">'multi_stati'</span>, <span class="token string">'multiple_stati'</span><span class="token punctuation">)</span>,208: <span class="token punctuation">(</span><span class="token string">'already_reported'</span>,<span class="token punctuation">)</span>,226: <span class="token punctuation">(</span><span class="token string">'im_used'</span>,<span class="token punctuation">)</span>,<span class="token comment" spellcheck="true"># Redirection.</span>300: <span class="token punctuation">(</span><span class="token string">'multiple_choices'</span>,<span class="token punctuation">)</span>,301: <span class="token punctuation">(</span><span class="token string">'moved_permanently'</span>, <span class="token string">'moved'</span>, <span class="token string">'\\o-'</span><span class="token punctuation">)</span>,302: <span class="token punctuation">(</span><span class="token string">'found'</span>,<span class="token punctuation">)</span>,303: <span class="token punctuation">(</span><span class="token string">'see_other'</span>, <span class="token string">'other'</span><span class="token punctuation">)</span>,304: <span class="token punctuation">(</span><span class="token string">'not_modified'</span>,<span class="token punctuation">)</span>,305: <span class="token punctuation">(</span><span class="token string">'use_proxy'</span>,<span class="token punctuation">)</span>,306: <span class="token punctuation">(</span><span class="token string">'switch_proxy'</span>,<span class="token punctuation">)</span>,307: <span class="token punctuation">(</span><span class="token string">'temporary_redirect'</span>, <span class="token string">'temporary_moved'</span>, <span class="token string">'temporary'</span><span class="token punctuation">)</span>,308: <span class="token punctuation">(</span><span class="token string">'permanent_redirect'</span>, <span class="token string">'resume_incomplete'</span>, <span class="token string">'resume'</span>,<span class="token punctuation">)</span>, <span class="token comment" spellcheck="true"># These 2 to be removed in 3.0</span><span class="token comment" spellcheck="true"># Client Error.</span>400: <span class="token punctuation">(</span><span class="token string">'bad_request'</span>, <span class="token string">'bad'</span><span class="token punctuation">)</span>,401: <span class="token punctuation">(</span><span class="token string">'unauthorized'</span>,<span class="token punctuation">)</span>,402: <span class="token punctuation">(</span><span class="token string">'payment_required'</span>, <span class="token string">'payment'</span><span class="token punctuation">)</span>,403: <span class="token punctuation">(</span><span class="token string">'forbidden'</span>,<span class="token punctuation">)</span>,404: <span class="token punctuation">(</span><span class="token string">'not_found'</span>, <span class="token string">'-o-'</span><span class="token punctuation">)</span>,405: <span class="token punctuation">(</span><span class="token string">'method_not_allowed'</span>, <span class="token string">'not_allowed'</span><span class="token punctuation">)</span>,406: <span class="token punctuation">(</span><span class="token string">'not_acceptable'</span>,<span class="token punctuation">)</span>,407: <span class="token punctuation">(</span><span class="token string">'proxy_authentication_required'</span>, <span class="token string">'proxy_auth'</span>, <span class="token string">'proxy_authentication'</span><span class="token punctuation">)</span>,408: <span class="token punctuation">(</span><span class="token string">'request_timeout'</span>, <span class="token string">'timeout'</span><span class="token punctuation">)</span>,409: <span class="token punctuation">(</span><span class="token string">'conflict'</span>,<span class="token punctuation">)</span>,410: <span class="token punctuation">(</span><span class="token string">'gone'</span>,<span class="token punctuation">)</span>,411: <span class="token punctuation">(</span><span class="token string">'length_required'</span>,<span class="token punctuation">)</span>,412: <span class="token punctuation">(</span><span class="token string">'precondition_failed'</span>, <span class="token string">'precondition'</span><span class="token punctuation">)</span>,413: <span class="token punctuation">(</span><span class="token string">'request_entity_too_large'</span>,<span class="token punctuation">)</span>,414: <span class="token punctuation">(</span><span class="token string">'request_uri_too_large'</span>,<span class="token punctuation">)</span>,415: <span class="token punctuation">(</span><span class="token string">'unsupported_media_type'</span>, <span class="token string">'unsupported_media'</span>, <span class="token string">'media_type'</span><span class="token punctuation">)</span>,416: <span class="token punctuation">(</span><span class="token string">'requested_range_not_satisfiable'</span>, <span class="token string">'requested_range'</span>, <span class="token string">'range_not_satisfiable'</span><span class="token punctuation">)</span>,417: <span class="token punctuation">(</span><span class="token string">'expectation_failed'</span>,<span class="token punctuation">)</span>,418: <span class="token punctuation">(</span><span class="token string">'im_a_teapot'</span>, <span class="token string">'teapot'</span>, <span class="token string">'i_am_a_teapot'</span><span class="token punctuation">)</span>,421: <span class="token punctuation">(</span><span class="token string">'misdirected_request'</span>,<span class="token punctuation">)</span>,422: <span class="token punctuation">(</span><span class="token string">'unprocessable_entity'</span>, <span class="token string">'unprocessable'</span><span class="token punctuation">)</span>,423: <span class="token punctuation">(</span><span class="token string">'locked'</span>,<span class="token punctuation">)</span>,424: <span class="token punctuation">(</span><span class="token string">'failed_dependency'</span>, <span class="token string">'dependency'</span><span class="token punctuation">)</span>,425: <span class="token punctuation">(</span><span class="token string">'unordered_collection'</span>, <span class="token string">'unordered'</span><span class="token punctuation">)</span>,426: <span class="token punctuation">(</span><span class="token string">'upgrade_required'</span>, <span class="token string">'upgrade'</span><span class="token punctuation">)</span>,428: <span class="token punctuation">(</span><span class="token string">'precondition_required'</span>, <span class="token string">'precondition'</span><span class="token punctuation">)</span>,429: <span class="token punctuation">(</span><span class="token string">'too_many_requests'</span>, <span class="token string">'too_many'</span><span class="token punctuation">)</span>,431: <span class="token punctuation">(</span><span class="token string">'header_fields_too_large'</span>, <span class="token string">'fields_too_large'</span><span class="token punctuation">)</span>,444: <span class="token punctuation">(</span><span class="token string">'no_response'</span>, <span class="token string">'none'</span><span class="token punctuation">)</span>,449: <span class="token punctuation">(</span><span class="token string">'retry_with'</span>, <span class="token string">'retry'</span><span class="token punctuation">)</span>,450: <span class="token punctuation">(</span><span class="token string">'blocked_by_windows_parental_controls'</span>, <span class="token string">'parental_controls'</span><span class="token punctuation">)</span>,451: <span class="token punctuation">(</span><span class="token string">'unavailable_for_legal_reasons'</span>, <span class="token string">'legal_reasons'</span><span class="token punctuation">)</span>,499: <span class="token punctuation">(</span><span class="token string">'client_closed_request'</span>,<span class="token punctuation">)</span>,<span class="token comment" spellcheck="true"># Server Error.</span>500: <span class="token punctuation">(</span><span class="token string">'internal_server_error'</span>, <span class="token string">'server_error'</span>, <span class="token string">'/o\\'</span>, <span class="token string">'✗'</span><span class="token punctuation">)</span>,501: <span class="token punctuation">(</span><span class="token string">'not_implemented'</span>,<span class="token punctuation">)</span>,502: <span class="token punctuation">(</span><span class="token string">'bad_gateway'</span>,<span class="token punctuation">)</span>,503: <span class="token punctuation">(</span><span class="token string">'service_unavailable'</span>, <span class="token string">'unavailable'</span><span class="token punctuation">)</span>,504: <span class="token punctuation">(</span><span class="token string">'gateway_timeout'</span>,<span class="token punctuation">)</span>,505: <span class="token punctuation">(</span><span class="token string">'http_version_not_supported'</span>, <span class="token string">'http_version'</span><span class="token punctuation">)</span>,506: <span class="token punctuation">(</span><span class="token string">'variant_also_negotiates'</span>,<span class="token punctuation">)</span>,507: <span class="token punctuation">(</span><span class="token string">'insufficient_storage'</span>,<span class="token punctuation">)</span>,509: <span class="token punctuation">(</span><span class="token string">'bandwidth_limit_exceeded'</span>, <span class="token string">'bandwidth'</span><span class="token punctuation">)</span>,510: <span class="token punctuation">(</span><span class="token string">'not_extended'</span>,<span class="token punctuation">)</span>,511: <span class="token punctuation">(</span><span class="token string">'network_authentication_required'</span>, <span class="token string">'network_auth'</span>, <span class="token string">'network_authentication'</span><span class="token punctuation">)</span>,</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
