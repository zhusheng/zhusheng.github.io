<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/10/09/fan-qie-nao-zhong-si-xiang-xian-gong-zuo-fa/"/>
      <url>/2019/10/09/fan-qie-nao-zhong-si-xiang-xian-gong-zuo-fa/</url>
      
        <content type="html"><![CDATA[<pre><code>title: 番茄闹钟 + 四象限工作法date: 2019-10-07 09:25:00author: Zhu Shengimg: /images/note.pngtop: falsecover: falsecoverImg: /images/banner/note.pngpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 番茄闹钟 + 四象限工作法categories: 日记tags:  - 日记</code></pre><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>我担任的是产品总监职务，管理者一个11人的团队，团队的项目涉及到物联网、车联网、云计算、大数据和人工智能方向，涉及到的技术层面有前端开发工程师、android开发工程师、ios开工程师、java开发工程师、硬件开发工程师、系统运维工程师、UI设计师，而且分归两地，对内我需要做好团队项目管理和开发工作，对外我需要对接市场人员、支持项目部同事、分析项目需求、和其它企业谈合作、还需要经常出差做一些项目支持，整个人每天都处在忙碌之中，但是却一直心里很慌，总觉得自己不是那么</p><p>由于最近事情比较多，有时会忘记一些重要事情，我感觉自己在事情管理上有所缺陷，事情管理有问题归根到底还是时间管理有问题。</p><p>其实，之前有使用过worktile、Onimi focus等管理工具，但是感觉在我的团队内部不是很好推广下去，我需要的是一个能够进行个人时间管理的办法，而不是进行项目管理，worktile和Onimi focus偏向于项目管理，而且需要团队成员都参与进来。</p><p>最后，我找到了番茄闹钟 + 四象限工作法，也是在参加公司组织的第三期“可复制的领导力”中接触到的，希望能对我的时间管理有所帮助，让自己既能把所有的工作安排妥当，又能有足够的时间去做一些自己的事，让自己成长起来。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人脸识别</title>
      <link href="/2019/09/30/ren-lian-shi-bie/"/>
      <url>/2019/09/30/ren-lian-shi-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><h3 id="人脸识别原理"><a href="#人脸识别原理" class="headerlink" title="人脸识别原理"></a>人脸识别原理</h3><p>。。。</p><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>项目路径：/Users/zhusheng/Codes/tensorflow_snkey/6_face_recognition</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将项目添加到PYTHONPATH环境变量。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PYTHONPATH<span class="token operator">=</span>/Users/zhusheng/Codes/tensorflow_snkey/6_face_recognition/src</code></pre><p>验证指令，在python shell中执行如下指令，不报错表示配置成功。</p><pre><code>&gt;&gt;&gt; import facenet&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; exit()</code></pre><h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><p>使用已有模型验证LFW数据集的准确率。</p><p>预训练模型使用的卷积网络结构是<code>Inception ResNet v1</code>，模型是别人训练开源出来的，如下所示：</p><pre class=" language-bash"><code class="language-bash">➜  20180402-114759 lltotal 461248-rwxr-xr-x@ 1 zhusheng  staff    91M  4  9  2018 20180402-114759.pb-rwxr-xr-x@ 1 zhusheng  staff   107M  4  9  2018 model-20180402-114759.ckpt-275.data-00000-of-00001-rwxr-xr-x@ 1 zhusheng  staff    22K  4  9  2018 model-20180402-114759.ckpt-275.index-rwxr-xr-x@ 1 zhusheng  staff    27M  4  9  2018 model-20180402-114759.meta➜  20180402-114759 <span class="token function">pwd</span>/Users/zhusheng/WorkSpace/models/1-facenet/20180402-114759</code></pre><p>一共有4个核心文件。训练好的模型在LFW数据集上的准确率可以达到99.2%左右，我们这里验证一下。</p><p><strong>准备LFW人脸数据集</strong></p><p>LFW人脸数据集是由美国马萨诸塞州立大学阿默斯特分校计算机视觉实验室整理完成的数据库，主要用来研究非受限情况下的人脸识别的问题。LFW数据库主要从互联网上搜集图片，一共包含13000多张人脸图像，每张图像都被表示出对应的人名字，其中1680人对应的不只一张图像。</p><p>在LFW数据库中人脸的光照条件、姿态多种多样，有的人脸还存在部分遮挡的情况，因此识别难度较大。现在LFW数据库性能测评已经成为人脸识别算法性能的一个重要指标。</p><p><a href="http://vis-www.cs.umass.edu/lfw/#download" target="_blank" rel="noopener">LFW人脸数据集下载地址</a></p><p>下载之后如下所示，这里我下载了2个，一个是校正后的，一个是原始的。</p><p>全路径如下：</p><pre class=" language-bash"><code class="language-bash">/Users/zhusheng/WorkSpace/Dataset/14-LFW</code></pre><p>在<code>14-LFW/raw/</code>下，每个文件夹代表一个人的名字，在每个人的文件夹下是这个人所有的人脸图像。</p><p><strong>人脸检测和对齐</strong></p><p>处理的第一步是使用MTCNN进行人脸检测和对齐，并统一缩放到合适的大小，MTCNN的实现代码位于<code>src/align/</code>。</p><p>其中<code>src/align/detec_face.py</code>中定义了MTCNN的模型结构，由P-Net、R-Net、O-Net三部分组成。这三部分网络已经提供好了预训练模型，模型数据分别对应文件：<code>det1.npy</code>、<code>det2.npy</code>、<code>det3.npy</code>。</p><p><code>src/align/align_dataset_mtcnn.py</code>是使用MTCNN模型进行人脸检测和对齐的入口代码，<code>align_dataset.py</code>和<code>align_dlib.py</code>都是使用dlib中的传统方法对人脸进行检测，性能比MTCNN稍差，这里略过。</p><p>使用<code>align_dataset_mtcnn.py</code>对LFW数据集进行人脸检测和对齐的指令如下：</p><pre class=" language-bash"><code class="language-bash">python3 src/align/align_dataset_mtcnn.py \/Users/zhusheng/WorkSpace/Dataset/14-LFW/raw \/Users/zhusheng/WorkSpace/Dataset/14-LFW/lfw_mtcnnpy_160 \--image_size 160 \--margin 32 \--random_order</code></pre><p>该指令会创建文件夹<code>lfw_mtcnnpy_160</code>，并将所有对齐好的人脸图像存放到这个文件夹中，数据的结构和原先相同。参数<code>--image_size 160 --margin 32</code>是在MTCNN检测到的人脸框基础上缩小32像素，将图像缩放到160x160大小。因此，最后得到的对齐后的图像都是160x160像素。这样就成功的从原始图像中检测并对齐了人脸。</p><p>过程耗时挺长的，对齐后的数据集路径：<code>14-LFW/lfw_mtcnnpy_160/</code>。</p><p><strong>验证准确率</strong></p><p>执行如下代码，验证对齐好的LFW数据集在预训练模型上的准确率。</p><pre class=" language-bash"><code class="language-bash">python3 src/validate_on_lfw.py \/Users/zhusheng/WorkSpace/Dataset/14-LFW/lfw_mtcnnpy_160 \/Users/zhusheng/WorkSpace/models/1-facenet/20180402-114759</code></pre><p>运行需要耗费一定的时间，准确率可以达到98.5%了。</p><h3 id="计算图片之间的距离"><a href="#计算图片之间的距离" class="headerlink" title="计算图片之间的距离"></a>计算图片之间的距离</h3><p>假设现在有三张图片，每个图片包含一张人脸，希望计算它们之间的距离。</p><p>执行代码：</p><pre class=" language-bash"><code class="language-bash">python3 src/compare.py \/Users/zhusheng/WorkSpace/models/1-facenet/20180402-114759 \test_imgs/1.jpg test_imgs/2.jpg test_imgs/3.jpg</code></pre><p>运行结果如下：</p><p><img src="/.io//../../MarkDown%20Notes/Tensorflow%E9%AB%98%E7%BA%A7/assets/image-20190821135128219.png" alt="image-20190821135128219"></p><p><code>compare.py</code>首先会使用MTCNN在原始图片中进行检测和对齐，然后将结果输入到预训练模型中计算特征。有了特征，接下来就非常简单了，我们可以对特征计算两两之间的距离以得到人脸之间的相似度。</p><p>具体可以参考该代码文件。</p><h2 id="训练新模型"><a href="#训练新模型" class="headerlink" title="训练新模型"></a>训练新模型</h2><p>我们使用的模型是别人开源出来的人脸识别模型，我们也可以自己去训练。</p><p><strong>准备数据集</strong></p><p>从头训练一个新模型需要非常多的训练数据，这里使用CASIA-WebFace数据集，该数据集包含了10575个人的494414张图片，下载完成后，解压到<code>/Users/zhusheng/WorkSpace/Dataset/16-CASIA-WebFace/raw</code>路径下。</p><p>该数据集的结构和LFW一样，每个文件夹代表一个人，文件夹中为这个人的图片。</p><p><strong>人脸检测和对齐</strong></p><p>首先，我们进行人脸检测和对齐：</p><pre class=" language-bash"><code class="language-bash">python3 src/align/align_dataset_mtcnn.py \/Users/zhusheng/WorkSpace/Dataset/16-CASIA-WebFace/raw \/Users/zhusheng/WorkSpace/Dataset/16-CASIA-WebFace/casia_maxpy_mtcnnpy_182 \--image_size 182 \--margin 44 \--random_order</code></pre><p>对齐后的人脸数据保存在<code>casia_maxpy_mtcnnpy_182</code>文件夹中，所有的图像像素为182x182。最终网络输入的图像像素要求是160x160，这里之所以是182x182，是为了留一定得到空间给数据增强的裁剪环节（在182x182点图像上裁剪出160x160的区域，再送入神经网络进行训练）。</p><p><strong>开始训练</strong></p><p>训练代码为<code>src/train_softmax.py</code>，直接使用即可，该文件使用中心损失来训练模型，如果有自己的需求，可以参考该代码文件进行修改。</p><p>训练指令如下：</p><pre class=" language-bash"><code class="language-bash">python3 src/train_softmax.py \--logs_base_dir logs/facenet/ \--models_base_dir models/facenet/ \--data_dir /Users/zhusheng/WorkSpace/Dataset/16-CASIA-WebFace/casia_maxpy_mtcnnpy_182 \--image_size 160 \--model_def models.inception_resnet_v1 \--lfw_dir /Users/zhusheng/WorkSpace/Dataset/14-LFW/lfw_mtcnnpy_160 \--optimizer RMSPROP \--learning_rate -1 \--max_nrof_epochs 80 \--keep_probability 0.8 \--random_crop --random_flip \--learning_rate_schedule_file data/learning_rate_schedule_classifier_casia.txt \--weight_decay 5e-5 \--center_loss_factor 1e-2 \--center_loss_alfa 0.9</code></pre><p>参数说明：</p><ul><li>logs_base_dir：在src同级目录下新建<code>logs/facenet/</code>,用于保存训练日志文件。运行时，会在该路径下创建一个以当前时间命名的目录，如<code>20190821-114414</code>，日志会写到<code>logs/facenet/20190821-114414/</code>中。所谓的日志文件，其实就是Tensorflow中的events文件，包含了当前的损失、训练步数、学习率等信息，我们可以使用Tensorboard来监听训练过程。</li><li>models_base_dir：在src同级目录下新建<code>models/facenet/</code>,用于保存最终训练后的模型。在运行时同样会创建一个以当前时间命名的文件夹，模型会保存到该目录下。</li><li>data_dir：训练数据集位置。</li><li>image_size：输入神经网络的图片尺寸。</li><li>model_def：很关键的一个参数，它指定了训练的CNN结构为<code>inception_resnet_v1</code>,这样就不用我们自己去设计神经网络结构了。项目支持的CNN结构位于<code>src/models/</code>目录下。</li></ul><p>如果训练过程中出现内存或显存都消耗殆尽的情况，我们可以选择第三个神经网络结构来训练一个较小的模型。</p><ul><li>lfw_dir：指定LFW数据集的位置，如果添加该参数，每执行完一个epochs，就会在LFW数据集上执行一次测试，并将测试的准确率写入到日志文件。</li><li>optimizer：指定优化器。</li><li>learning_rate：学习率，这里指定了负数，表示在程序中将忽略这个参数。而后面的<code>learning_rate_schedule_file</code>参数将规划我们的学习率，因为我们希望学习率不是一成不变的。</li><li>max_nrof_epochs：表示最多会跑80个epochs。</li><li>keep_probability：在全连接层中，加入了dropout，这个参数表示dropout中连接被保持的概率。</li><li>–random_crop —random_flip：这2个参数表示在数据增强时会进行随机的裁剪和旋转。</li><li>learning_rate_schedule_file：在全面我们忽略了learning_rate，最终的学习率是由该文件规划的，文件内容如下：</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Learning rate schedule</span><span class="token comment" spellcheck="true"># Maps an epoch number to a learning rate</span><span class="token number">0</span><span class="token punctuation">:</span>  <span class="token number">0.1</span><span class="token number">65</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token number">77</span><span class="token punctuation">:</span> <span class="token number">0.001</span><span class="token number">1000</span><span class="token punctuation">:</span> <span class="token number">0.0001</span></code></pre><p>也就是说，一开始，我们使用0.1作为学习率，运行到第65个epochs时使用0.01作为学习率，运行到第77个epochs时使用0.001作为学习率，运行到第1000个epochs时使用0.0001作为学习率。但是由于我们只运行80个epochs，因此最后的一行也没生效。</p><ul><li>weight_decay：所有变量的正则化系数。</li><li>center_loss_factor：中心损失和SoftMax损失中的平衡参数。</li><li>center_loss_alfa：中心损失的内部参数。</li></ul><p>待训练…</p><p>见2.5.4，因为本地没有CASIA-WebFace数据集，百度网盘下载比较慢，主要是考虑到我没有GPU资源，所以我打算使用Colab来进行我们的训练过程。</p><p>运行结果类似如下：</p><pre class=" language-bash"><code class="language-bash">Epochs: <span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1/1000<span class="token punctuation">]</span>  Time 3.452   Loss 10.075.  RegLoss 0.334<span class="token punctuation">..</span>.</code></pre><p>Tensorboard监控</p><pre><code>tensorboard --logdir  logs/facenet/&lt;开始训练时间&gt;/</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/17/hello-world/"/>
      <url>/2019/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE入门</title>
      <link href="/2019/09/07/vue-ru-men/"/>
      <url>/2019/09/07/vue-ru-men/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">VUE官网</a></p><p><a href="https://www.runoob.com/vue2/vue-tutorial.html" target="_blank" rel="noopener">VUE教程-菜鸟教程(推荐)</a></p><h2 id="VUE介绍"><a href="#VUE介绍" class="headerlink" title="VUE介绍"></a>VUE介绍</h2><p>Vue.js是一个渐进式的JavaScript框架，具有易用、灵活、高效等特点。</p><ol><li>易用。已经学会了HTML、CSS、JavaScript，就可以学，很容易上手。</li><li>灵活。不断繁荣的生态系统，可以在一个库和一套完整框架之间自如伸缩。</li><li>高效。轻量级框架，缩短开发时间。</li></ol><h2 id="Vue-or-Angular"><a href="#Vue-or-Angular" class="headerlink" title="Vue or Angular?"></a>Vue or Angular?</h2><p>Vue.js 是轻量级的开发框架，很适合开发小规模灵活的 Web 应用程序；而 Angular 尽管学习曲线较为陡峭，但却是构建完整复杂应用的好选择。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>最新稳定版：2.6.10</p><p>（1）安装Vue Devtools</p><p>它是Vue的浏览器调试插件，可以在Chrome商店安装。</p><p>（2）CDN引用，无需安装</p><p>对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>（3）npm安装vue</p><p>npm是一个JavaScript包管理器，在用 Vue 构建大型应用时推荐使用 NPM 安装，这里我使用npm安装。</p><pre class=" language-bash"><code class="language-bash">➜  ~ <span class="token function">npm</span> <span class="token function">install</span> vue<span class="token punctuation">..</span>.➜  ~ <span class="token function">npm</span> list/Users/zhusheng└── vue@2.6.10</code></pre><h2 id="vue基本使用"><a href="#vue基本使用" class="headerlink" title="vue基本使用"></a>vue基本使用</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>v-if：条件渲染，它根据表达式的真假来删除和插入元素。</li><li>v-show：条件渲染，使用<code>v-show</code>指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性。不显示时：style=”display:none”。</li><li>v-else：为<code>v-if</code>或<code>v-show</code>添加一个“else块”。</li><li>v-for：基于一个数组渲染一个列表，它和JavaScript的遍历语法相似。</li><li>v-bind：<code>v-bind</code>指令可以在其名称后面带一个参数，中间放一个冒号隔开。</li><li>v-on：用于给监听DOM事件。</li></ul><p>说明：Vue.js为最常用的两个指令<code>v-bind</code>和<code>v-on</code>提供了缩写方式。<strong>v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。</strong></p><h2 id="vue-cli基本使用"><a href="#vue-cli基本使用" class="headerlink" title="vue-cli基本使用"></a>vue-cli基本使用</h2><p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。</p><h3 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局安装 vue-cli</span><span class="token function">npm</span> <span class="token function">install</span> --global vue-cli</code></pre><h3 id="创建和运行项目"><a href="#创建和运行项目" class="headerlink" title="创建和运行项目"></a>创建和运行项目</h3><p>创建项目，创建一个基于 webpack 模板的新项目，项目名称为<code>vue-cli-demo</code>。创建过程中，需要手动去确认一些配置信息。</p><pre class=" language-bash"><code class="language-bash">vue init webpack vue-cli-demo</code></pre><p>启动项目</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> vue-cli-demo<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run dev</code></pre><p>浏览器访问</p><pre><code>http://localhost:8080</code></pre><h3 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h3><table><thead><tr><th>目录/文件</th><th>说明</th></tr></thead><tbody><tr><td>build</td><td>项目构建（weboack）相关代码。</td></tr><tr><td>config</td><td>项目配置目录，包括端口号等。</td></tr><tr><td>node_modules</td><td>npm加载的项目依赖模块</td></tr><tr><td>src</td><td>开发代码目录</td></tr><tr><td>src/assets</td><td>图片资源，如logo</td></tr><tr><td>src/components</td><td>组件文件</td></tr><tr><td>src/App.vue</td><td>项目入口文件</td></tr><tr><td>src/main.js</td><td>项目的核心文件</td></tr><tr><td>static</td><td>静态资源目录，如图片、字体等。</td></tr><tr><td>test</td><td>测试目录</td></tr><tr><td>.xxx</td><td>配置文件，如语法配置，git配置等。</td></tr><tr><td>index.html</td><td>首页入口文件，可以添加一些meta信息或者统计代码</td></tr><tr><td>package.json</td><td>项目配置文件</td></tr><tr><td>README.md</td><td>项目说明文档</td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yingcloud项目开发3-物体检测</title>
      <link href="/2019/05/10/yingcloud-xiang-mu-kai-fa-3-wu-ti-jian-ce-md/"/>
      <url>/2019/05/10/yingcloud-xiang-mu-kai-fa-3-wu-ti-jian-ce-md/</url>
      
        <content type="html"><![CDATA[<h2 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h2><p>创建detection app，用于开发与目标检测相关的代码。</p><pre class=" language-bash"><code class="language-bash">python manage.py startapp detection</code></pre><h2 id="Django基本类编写"><a href="#Django基本类编写" class="headerlink" title="Django基本类编写"></a>Django基本类编写</h2><h3 id="models"><a href="#models" class="headerlink" title="models"></a>models</h3><p>新建了2个model类，一个是被识别的图片，一个是识别的结果。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># Create your models here.</span><span class="token keyword">class</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> blank <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> null <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'upload/to_recognition/'</span><span class="token punctuation">,</span>default <span class="token operator">=</span> <span class="token string">'upload/to_recognition/none.jpg'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    last_modify_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Recognition</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    picture <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'Picture'</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span><span class="token punctuation">)</span>    result_json <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> blank <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> null <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    result_url <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'upload/recognition_result/'</span><span class="token punctuation">,</span>default <span class="token operator">=</span> <span class="token string">'upload/recognition_result/none.jpg'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    recognition_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h3 id="serializers"><a href="#serializers" class="headerlink" title="serializers"></a>serializers</h3><p>有了models类，我们可以编写我们的序列化类，这样我们在views中就可以通过rest框架快速封装rest接口了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> detection<span class="token punctuation">.</span>models <span class="token keyword">import</span> Picture<span class="token punctuation">,</span> Recognition<span class="token keyword">class</span> <span class="token class-name">PictureSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Picture        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">RecognitionSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Recognition        fields <span class="token operator">=</span> <span class="token string">'__all__'</span></code></pre><h3 id="views"><a href="#views" class="headerlink" title="views"></a>views</h3><p>如下编写views类，框架会为我们生成类的增删改查接口</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> rest_framework_simplejwt <span class="token keyword">import</span> authentication<span class="token keyword">from</span> detection<span class="token punctuation">.</span>models <span class="token keyword">import</span> Picture<span class="token punctuation">,</span> Recognition<span class="token keyword">from</span> detection<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> PictureSerializer<span class="token punctuation">,</span> RecognitionSerializer<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">class</span> <span class="token class-name">PictureViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Picture<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> PictureSerializer    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>JWTAuthentication<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RecognitionViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Recognition<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> RecognitionSerializer    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>JWTAuthentication<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><h3 id="urls"><a href="#urls" class="headerlink" title="urls"></a>urls</h3><p>配置我们的urls接口</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span> include<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment" spellcheck="true"># rest router</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> detection<span class="token punctuation">.</span>views <span class="token keyword">import</span> PictureViewSet<span class="token punctuation">,</span> RecognitionViewSetrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'picture'</span><span class="token punctuation">,</span> PictureViewSet<span class="token punctuation">,</span> base_name<span class="token operator">=</span><span class="token string">'picture'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'recognition'</span><span class="token punctuation">,</span> RecognitionViewSet<span class="token punctuation">,</span> base_name<span class="token operator">=</span><span class="token string">'recognition'</span><span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>记得要在主urls文件中注册一下我们的app urls，一行代码就可以</p><pre class=" language-bash"><code class="language-bash">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">..</span>.    path<span class="token punctuation">(</span><span class="token string">'detection/'</span>, include<span class="token punctuation">(</span><span class="token string">'detection.urls'</span><span class="token punctuation">))</span>,<span class="token punctuation">]</span></code></pre><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><p>为了我们能使用Django内置的admin管理后台来操作我们的models，我们在admin文件中注册一下我们的models，如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> detection<span class="token punctuation">.</span>models <span class="token keyword">import</span> Picture<span class="token punctuation">,</span> Recognition<span class="token comment" spellcheck="true"># Register your models here.</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Picture<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Recognition<span class="token punctuation">)</span></code></pre><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>基本类编写完成之后，我们需要初始化数据库。</p><pre class=" language-bash"><code class="language-bash">python manage.py makemigrations detectionpython manage.py migrate detection</code></pre><h2 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h2><h3 id="迁移tensorflow-Object-Detection-API"><a href="#迁移tensorflow-Object-Detection-API" class="headerlink" title="迁移tensorflow Object Detection API"></a>迁移tensorflow Object Detection API</h3><p>我们将tensorflow Object Detection API代码拷贝到我们的项目中，一共有2个文件夹，分别是</p><ul><li><code>models-master/research/object_detection</code></li><li><code>models-master/research/slim</code></li></ul><p>我们将它们拷贝到项目根目录下。</p><h3 id="编写目标检测工具类"><a href="#编写目标检测工具类" class="headerlink" title="编写目标检测工具类"></a>编写目标检测工具类</h3><p>在detection app下新建utils类，在里面编写目标检测代码，完整代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> tarfile<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> zipfile<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>version <span class="token keyword">import</span> StrictVersion<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> timesys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token keyword">from</span> object_detection<span class="token punctuation">.</span>utils <span class="token keyword">import</span> ops <span class="token keyword">as</span> utils_ops<span class="token keyword">from</span> object_detection<span class="token punctuation">.</span>utils <span class="token keyword">import</span> label_map_util<span class="token keyword">from</span> object_detection<span class="token punctuation">.</span>utils <span class="token keyword">import</span> visualization_utils <span class="token keyword">as</span> vis_util<span class="token keyword">from</span> yingcloudiot<span class="token punctuation">.</span>settings <span class="token keyword">import</span> detection_graph<span class="token punctuation">,</span> PATH_TO_FROZEN_GRAPH<span class="token punctuation">,</span> PATH_TO_LABELS<span class="token keyword">if</span> StrictVersion<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span> <span class="token operator">&lt;</span> StrictVersion<span class="token punctuation">(</span><span class="token string">'1.12.0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> ImportError<span class="token punctuation">(</span><span class="token string">'Please upgrade your TensorFlow installation to v1.12.*.'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    初始化图    '''</span>    <span class="token keyword">with</span> detection_graph<span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        od_graph_def <span class="token operator">=</span> tf<span class="token punctuation">.</span>GraphDef<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取一个文件操作句柄，加载模型文件</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>gfile<span class="token punctuation">.</span>GFile<span class="token punctuation">(</span>PATH_TO_FROZEN_GRAPH<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fid<span class="token punctuation">:</span>             serialized_graph <span class="token operator">=</span> fid<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            od_graph_def<span class="token punctuation">.</span>ParseFromString<span class="token punctuation">(</span>serialized_graph<span class="token punctuation">)</span>            tf<span class="token punctuation">.</span>import_graph_def<span class="token punctuation">(</span>od_graph_def<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load_image_into_numpy_array</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    把图片加载为二进制    '''</span>    <span class="token punctuation">(</span>im_width<span class="token punctuation">,</span> im_height<span class="token punctuation">)</span> <span class="token operator">=</span> image<span class="token punctuation">.</span>size    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>im_height<span class="token punctuation">,</span> im_width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_inference_for_single_image</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    预测单张图片    '''</span>    <span class="token keyword">with</span> graph<span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Get handles to input and output tensors</span>            ops <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_operations<span class="token punctuation">(</span><span class="token punctuation">)</span>            all_tensor_names <span class="token operator">=</span> <span class="token punctuation">{</span>output<span class="token punctuation">.</span>name <span class="token keyword">for</span> op <span class="token keyword">in</span> ops <span class="token keyword">for</span> output <span class="token keyword">in</span> op<span class="token punctuation">.</span>outputs<span class="token punctuation">}</span>            tensor_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">,</span> <span class="token string">'detection_boxes'</span><span class="token punctuation">,</span> <span class="token string">'detection_scores'</span><span class="token punctuation">,</span><span class="token string">'detection_classes'</span><span class="token punctuation">,</span> <span class="token string">'detection_masks'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 tensor_name <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">':0'</span>                 <span class="token keyword">if</span> tensor_name <span class="token keyword">in</span> all_tensor_names<span class="token punctuation">:</span>                    tensor_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_tensor_by_name<span class="token punctuation">(</span>tensor_name<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">'detection_masks'</span> <span class="token keyword">in</span> tensor_dict<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># The following processing is only for single image</span>                    detection_boxes <span class="token operator">=</span> tf<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks <span class="token operator">=</span> tf<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.</span>                    real_num_detection <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>                    detection_boxes <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>detection_boxes<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>real_num_detection<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>detection_masks<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>real_num_detection<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks_reframed <span class="token operator">=</span> utils_ops<span class="token punctuation">.</span>reframe_box_masks_to_image_masks<span class="token punctuation">(</span>detection_masks<span class="token punctuation">,</span> detection_boxes<span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks_reframed <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>greater<span class="token punctuation">(</span>detection_masks_reframed<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># Follow the convention by adding back the batch dimension</span>                    tensor_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tf<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>detection_masks_reframed<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            image_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_tensor_by_name<span class="token punctuation">(</span><span class="token string">'image_tensor:0'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Run inference</span>            output_dict <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">,</span>feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>image_tensor<span class="token punctuation">:</span> image<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># all outputs are float32 numpy arrays, so convert types as appropriate</span>            output_dict<span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>output_dict<span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_classes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_classes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token string">'detection_masks'</span> <span class="token keyword">in</span> output_dict<span class="token punctuation">:</span>                output_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> output_dict<span class="token keyword">def</span> <span class="token function">files_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    遍历某个路径下的图片，返回图片的路径集合    """</span>    items <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    newlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span> <span class="token operator">or</span> item<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            newlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>newlist<span class="token punctuation">)</span>    <span class="token keyword">return</span> newlist<span class="token keyword">def</span> <span class="token function">detection_with_single</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    预测单张图片    """</span>    <span class="token comment" spellcheck="true"># 初始化图</span>    init_graph<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 加载标签映射关系文件</span>    category_index <span class="token operator">=</span> label_map_util<span class="token punctuation">.</span>create_category_index_from_labelmap<span class="token punctuation">(</span>PATH_TO_LABELS<span class="token punctuation">,</span> use_display_name<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 标记后的图片尺寸</span>    IMAGE_SIZE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># the array based representation of the image will be used later in order to prepare the</span>    <span class="token comment" spellcheck="true"># result image with boxes and labels on it.</span>    image_np <span class="token operator">=</span> load_image_into_numpy_array<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Expand dimensions since the model expects images to have shape: [1, None, None, 3]</span>    image_np_expanded <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>image_np<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Actual detection.</span>    <span class="token comment" spellcheck="true"># 调用预测函数</span>    output_dict <span class="token operator">=</span> run_inference_for_single_image<span class="token punctuation">(</span>image_np_expanded<span class="token punctuation">,</span> detection_graph<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Visualization of the results of a detection.</span>    vis_util<span class="token punctuation">.</span>visualize_boxes_and_labels_on_image_array<span class="token punctuation">(</span>            image_np<span class="token punctuation">,</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_classes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            category_index<span class="token punctuation">,</span>            instance_masks<span class="token operator">=</span>output_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'detection_masks'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            use_normalized_coordinates<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            line_thickness<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span>IMAGE_SIZE<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>image_np<span class="token punctuation">)</span>    file_path<span class="token punctuation">,</span> file_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>str<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>    filea<span class="token punctuation">,</span> fileb <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回时间格式：2019-08-19-11-37-52</span>    current_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d-%H-%M-%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    output_path <span class="token operator">=</span><span class="token string">'upload/recognition_result/'</span> <span class="token operator">+</span> filea<span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> current_time <span class="token operator">+</span> fileb    <span class="token keyword">print</span><span class="token punctuation">(</span>output_path<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>output_path<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取预测结果：预测类别和概率</span>    list_len <span class="token operator">=</span> len<span class="token punctuation">(</span>output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出结果中概率大于90%的所有预测结果</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>list_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0.9</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 类别索引</span>            index <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_classes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 预测类别</span>            type_name <span class="token operator">=</span> category_index<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 概率</span>            type_probability <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>            list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'{type: %s, probability: %s}'</span> <span class="token operator">%</span><span class="token punctuation">(</span>type_name<span class="token punctuation">,</span>type_probability<span class="token punctuation">)</span><span class="token punctuation">)</span>    dict1<span class="token punctuation">[</span><span class="token string">'result_url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_path    dict1<span class="token punctuation">[</span><span class="token string">'recognition_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dict1<span class="token punctuation">,</span> list1<span class="token keyword">def</span> <span class="token function">detection</span><span class="token punctuation">(</span>path_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    识别图片集    """</span>    paths <span class="token operator">=</span> files_path<span class="token punctuation">(</span>path_dir<span class="token punctuation">)</span>    <span class="token keyword">for</span> image_path <span class="token keyword">in</span> paths<span class="token punctuation">:</span>        detection_with_single<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    path1 <span class="token operator">=</span> <span class="token string">'../object_detection/test_images'</span>    path2 <span class="token operator">=</span> <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1'</span>    <span class="token comment" spellcheck="true">#detection(path1)</span>    detection_with_single<span class="token punctuation">(</span><span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image4.jpg'</span><span class="token punctuation">)</span></code></pre><h3 id="创建全局变量"><a href="#创建全局变量" class="headerlink" title="创建全局变量"></a>创建全局变量</h3><p>我们把训练的图、模型、映射文件都保存为全局变量，然后在目标检测方法中引入使用。我们在setting中增加如下代码:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token comment" spellcheck="true"># 预测图</span>detection_graph <span class="token operator">=</span> tf<span class="token punctuation">.</span>Graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型</span>PATH_TO_FROZEN_GRAPH <span class="token operator">=</span><span class="token string">'object_detection/ssd_mobilenet_v1_coco_2017_11_17/frozen_inference_graph.pb'</span><span class="token comment" spellcheck="true"># 标签映射表</span>PATH_TO_LABELS <span class="token operator">=</span> <span class="token string">'object_detection/data/mscoco_label_map.pbtxt'</span></code></pre><h3 id="编写触发器代码"><a href="#编写触发器代码" class="headerlink" title="编写触发器代码"></a>编写触发器代码</h3><p>我们整理一下思路：</p><ul><li>用户调用Picture model接口上传图片；</li><li>保存图片到数据库；</li><li>查询该图片，进行目标检测，将检测结果保存到数据库；</li><li>用户调用Recognition model接口查看预测结果；</li></ul><p>我们的触发器代码在models类中编写，在models中增加如下代码：</p><p>其中前两个包是用于创建触发器的，当图片保存到数据库之后会触发该方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signals <span class="token keyword">import</span> post_save<span class="token keyword">from</span> django<span class="token punctuation">.</span>dispatch <span class="token keyword">import</span> receiver<span class="token keyword">from</span> detection <span class="token keyword">import</span> utils<span class="token comment" spellcheck="true"># 触发器。图片保存到数据库成功后会触发该函数，然后可以进行目标检测，将检测结果保存到Recognition对象中</span>@receiver<span class="token punctuation">(</span>post_save<span class="token punctuation">,</span> sender <span class="token operator">=</span> Picture<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">object_detection</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> instance <span class="token operator">=</span> None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取最新上传的图片路径</span>    pic <span class="token operator">=</span> Picture<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span>    dict1<span class="token punctuation">,</span> list1 <span class="token operator">=</span> utils<span class="token punctuation">.</span>detection_with_single<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    str1 <span class="token operator">=</span> <span class="token string">";"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    rec <span class="token operator">=</span> Recognition<span class="token punctuation">(</span>picture <span class="token operator">=</span> pic<span class="token punctuation">,</span> result_json <span class="token operator">=</span> str1<span class="token punctuation">,</span> result_url <span class="token operator">=</span> dict1<span class="token punctuation">[</span><span class="token string">'result_url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> recognition_time <span class="token operator">=</span> dict1<span class="token punctuation">[</span><span class="token string">'recognition_time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    rec<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>至此，我们的基本目标检测功能开发完成，我们进行接口测试。</p><h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><p>接口页面如下所示：</p><p><img src="/images/image-20190820153912602.png" alt="image-20190820153912602"></p><p>我们在admin后台上传图片，模拟用户上传图片的操作，然后调用如下接口获取图片识别结果，如下图所示：</p><ul><li>GET /detection/picture/：获取上传的所有图片</li><li>GET /detection/recognition/：获取图片识别结果</li></ul><p><img src="/images/image-20190820154114199.png" alt="image-20190820154114199"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> yingcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> yingcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yingcloud项目开发2-华为云部署</title>
      <link href="/2019/04/10/yingcloud-xiang-mu-kai-fa-2-hua-wei-yun-bu-shu/"/>
      <url>/2019/04/10/yingcloud-xiang-mu-kai-fa-2-hua-wei-yun-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>大致分为以下步骤：</p><p>（1）代码拷贝</p><p>拷贝项目到华为云服务器，我的路径：<code>/Users/zhusheng</code>。</p><p>（2）环境安装</p><p>服务器已经有python3.7环境，然后<code>pip install -r requirement.txt</code>安装依赖环境。提示缺什么我们就安装什么。如果提示版本过低，更新版本即可。</p><p>（3）修改数据库</p><p>本地项目使用的是PostgreSQL数据库，服务器端为了方便，我们使用内置的SQLite数据库比较简单，只需要修改settings配置文件即可。</p><p>（4）初始化数据库</p><pre class=" language-bash"><code class="language-bash">python manage.py migrate</code></pre><p>（5）启动项目</p><p>服务器因为有<code>外网ip和内网ip</code>，在申请华为云服务器的时候，我们会获得外网ip和内网ip，<strong>启动项目的时候需要使用内网ip启动，在外面使用外网ip访问</strong>。如果不记得内网ip，可以使用<code>ip a</code>查看。因为服务器800端口被占用，只能更换端口。</p><pre><code>python manage.py runserver 192.168.1.154:8002</code></pre><p>我们在浏览器访问接口页面：<a href="http://114.115.179.78:8002/docs/" target="_blank" rel="noopener">http://114.115.179.78:8002/docs/</a>，如下所示：</p><p><img src="/.io//image-20190821104031630.png" alt=""></p><p>参考指令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># pip更新库</span>pip <span class="token function">install</span> --upgrade <span class="token operator">&lt;</span>库名<span class="token operator">></span><span class="token comment" spellcheck="true"># conda更新库</span>conda update <span class="token operator">&lt;</span>库名<span class="token operator">></span></code></pre><p>说明：服务器是基于conda来安装库的，所以后续库的安装一定要使用conda来安装，conda和pip不能混淆使用，容易造成问题，比如conda list和pip list看到的库不一样，各自安装各自的版本。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> yingcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> yingcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django入门</title>
      <link href="/2019/04/07/django-ru-men/"/>
      <url>/2019/04/07/django-ru-men/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.djangoproject.com/en/2.2/topics/install/#installing-official-release" target="_blank" rel="noopener">Django官方文档</a></p><h2 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建隔离环境</span>conda create -n django python<span class="token operator">=</span>3.6<span class="token comment" spellcheck="true"># 安装django最新版</span>pip <span class="token function">install</span> Django<span class="token comment" spellcheck="true"># 查看Django版本</span>python -m django --version</code></pre><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建项目yingcloudiot，会在当前目录下新建一个项目目录yingcloudiot，目录下包含一些文件。</p><pre class=" language-bash"><code class="language-bash">django-admin startproject yingcloudiot</code></pre><h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><p>进入项目路径下，执行如下指令创建一个APP，一个Django项目可以包含多个APP。</p><pre class=" language-bash"><code class="language-bash">python manage.py startapp polls</code></pre><p>新建的APP需要在setting.py中进行注册，如下所示：</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'polls.apps.PollsConfig'</span><span class="token punctuation">]</span></code></pre><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><pre class=" language-bash"><code class="language-bash">python manage.py runserver</code></pre><p>默认端口号：8000</p><p>指定启动端口</p><pre><code>python manage.py runserver 8888</code></pre><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>项目第一次运行，需要执行:</p><pre class=" language-bash"><code class="language-bash">python manage.py migrate</code></pre><p>以后每次的数据库更改，执行如下操作:</p><pre class=" language-bash"><code class="language-bash">python manage.py makemigrations python manage.py migrate </code></pre><p>第一条指令只是记录我们对数据库的更改，缓存到本地，并没有真正的应用。<br>第二条指令会应用更改。</p><p>【拓展】<br>我们也可以对指定的APP进行数据库更新操作:</p><pre class=" language-bash"><code class="language-bash">python manage.py makemigrations pollspython manage.py migrate polls</code></pre><p>查看migrate做了哪些操作？如下所示</p><pre class=" language-bash"><code class="language-bash">manage.py@snkey_blog_v1 <span class="token operator">></span> sqlmigrate blog 0001<span class="token function">bash</span> -cl <span class="token string">"/Users/zhusheng/PycharmProjects/snkey_blog_v1/venv/bin/python /Applications/PyCharm.app/Contents/helpers/pycharm/django_manage.py sqlmigrate blog 0001 /Users/zhusheng/PycharmProjects/snkey_blog_v1"</span>Tracking <span class="token function">file</span> by folder pattern:  migrationsBEGIN<span class="token punctuation">;</span>---- Create model Article--CREATE TABLE <span class="token string">"blog_article"</span> <span class="token punctuation">(</span><span class="token string">"id"</span> integer NOT NULL PRIMARY KEY AUTOINCREMENT, <span class="token string">"title"</span> varchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span> NOT NULL, <span class="token string">"content"</span> text NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>COMMIT<span class="token punctuation">;</span>Process finished with <span class="token keyword">exit</span> code 0</code></pre><h3 id="python-shell"><a href="#python-shell" class="headerlink" title="python shell"></a>python shell</h3><p>我们可以进入python shell环境，</p><pre class=" language-bash"><code class="language-bash">python manage.py shell</code></pre><h3 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h3><pre class=" language-bash"><code class="language-bash">python manage.py createsuperuser</code></pre><p>用户1：zhusheng，密码：zhusheng1022，邮箱：<a href="mailto:1537017271@qq.com" target="_blank" rel="noopener">1537017271@qq.com</a></p><p>用户2：test1，密码：test123456</p><p>用户3：test2，密码：test123456</p><p>用户4：test3，密码：test123456</p><p>用户5：test4，密码：test123456</p><p><a href="https://blog.csdn.net/liuweiyuxiang/article/details/71104483" target="_blank" rel="noopener">models字段和属性参考</a></p><h2 id="model数据库操作"><a href="#model数据库操作" class="headerlink" title="model数据库操作"></a>model数据库操作</h2><p>在Django项目中，我们涉及到数据库的增删改查操作，我们可以使用<code>django shell</code>来编写测试代码。</p><p>首先，进入项目所在路径，执行如下指令：</p><pre class=" language-bash"><code class="language-bash">python manage.py shell</code></pre><h3 id="单一表操作"><a href="#单一表操作" class="headerlink" title="单一表操作"></a>单一表操作</h3><p>导入需要操作的models</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> from books.models <span class="token function">import</span> Publisher  </code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> p1 <span class="token operator">=</span> Publisher<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Apress'</span>, address<span class="token operator">=</span><span class="token string">'2855 Telegraph Avenue'</span>,  <span class="token punctuation">..</span>.     city<span class="token operator">=</span><span class="token string">'Berkeley'</span>, state_province<span class="token operator">=</span><span class="token string">'CA'</span>, country<span class="token operator">=</span><span class="token string">'U.S.A.'</span>,  <span class="token punctuation">..</span>.     website<span class="token operator">=</span><span class="token string">'http://www.apress.com/'</span><span class="token punctuation">)</span>  <span class="token operator">>></span><span class="token operator">></span> p1.save<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>查询全部</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher: Apress<span class="token operator">></span>, <span class="token operator">&lt;</span>Publisher: O'Reilly<span class="token operator">></span><span class="token punctuation">]</span> </code></pre><p>查看单个对象</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Apress"</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span>Publisher: Apress<span class="token operator">></span>  </code></pre><p>说明：如果结果是多个对象或者没有返回结果则会抛出异常。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>按字段属性过滤</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.filter<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Apress'</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher: Apress<span class="token operator">></span><span class="token punctuation">]</span>  </code></pre><p>说明：返回的是列表</p><p>按字段属性包含内容过滤</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.filter<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">"press"</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher: Apress<span class="token operator">></span><span class="token punctuation">]</span>  </code></pre><h3 id="order-by"><a href="#order-by" class="headerlink" title="order_by"></a>order_by</h3><p>排序</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.order_by<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher: Apress<span class="token operator">></span>, <span class="token operator">&lt;</span>Publisher: O'Reilly<span class="token operator">></span><span class="token punctuation">]</span>  </code></pre><p>说明：相当于 order by name asc。</p><p>倒序排序</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.order_by<span class="token punctuation">(</span><span class="token string">"-name"</span><span class="token punctuation">)</span>  </code></pre><p>说明：加个负号相当于 order by name desc。</p><p>限制返回数据</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.order_by<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>  <span class="token operator">&lt;</span>Publisher: Apress<span class="token operator">></span>  </code></pre><p>说明：相当于 limit 1。</p><p>限制返回数据2</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.order_by<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0:2<span class="token punctuation">]</span>  </code></pre><p>说明：相当于 OFFSET 0 LIMIT 2。</p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新1</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.filter<span class="token punctuation">(</span>id<span class="token operator">=</span>52<span class="token punctuation">)</span>.update<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Apress Publishing'</span><span class="token punctuation">)</span>  </code></pre><p>更新2</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> Publisher.objects.get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Apress'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#先查询  </span><span class="token operator">>></span><span class="token operator">></span> p.name <span class="token operator">=</span> <span class="token string">'Apress Publishing'</span> <span class="token comment" spellcheck="true">#更新  </span><span class="token operator">>></span><span class="token operator">></span> p.save<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#保存  </span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>删除1</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> Publisher.objects.get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"O'Reilly"</span><span class="token punctuation">)</span>  <span class="token operator">>></span><span class="token operator">></span> p.delete<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><p>删除2</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Publisher.objects.filter<span class="token punctuation">(</span>country<span class="token operator">=</span><span class="token string">'USA'</span><span class="token punctuation">)</span>.delete<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><h3 id="连表操作"><a href="#连表操作" class="headerlink" title="连表操作"></a>连表操作</h3><p>参考链接：</p><p><a href="https://leiyonglin.iteye.com/blog/1253176" target="_blank" rel="noopener">django数据库基本操作增删改查</a></p><p><a href="https://www.cnblogs.com/huchong/p/7819473.html" target="_blank" rel="noopener">Django—ORM操作大全</a></p><p><a href="https://www.jianshu.com/p/bd52b9ebc109" target="_blank" rel="noopener">Django_插入外键表数据</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> yingcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> yingcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yingcloud项目开发1-环境搭建</title>
      <link href="/2019/04/07/yingcloud-xiang-mu-kai-fa-1-huan-jing-da-jian/"/>
      <url>/2019/04/07/yingcloud-xiang-mu-kai-fa-1-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p>项目集成了rest_framework、rest_framework.authtoken、rest_framework_swagger、rest_auth等基本框架，使得项目可以对外提供swagger rest api接口，并包含了token验证，所有的请求都需要现获取token。如果没有token的时候，核心业务接口都是隐藏的。</p><p>获取授权token的API：</p><pre class=" language-http"><code class="language-http">POST /token-api/token/</code></pre><h2 id="项目基本信息"><a href="#项目基本信息" class="headerlink" title="项目基本信息"></a>项目基本信息</h2><p><strong>account app</strong></p><p>基于Django User model进行了拓展，新增了一些额外的字段。</p><p><strong>music</strong></p><p>示例app，app开发的模版，其它app的开发可以参考该app的代码进行快速开发。</p><p><strong>detection</strong></p><p>目标检测 app，用于实现输入一张图片，返回图片中包含的对象和概率。如下图所示：</p><p>result_json是检测的结果，result_url是检测后带boxes和classes的标记图片。</p><p><img src="/.io//../../MarkDown%20Notes/yingcloud/assets/image-20190820162231832.png" alt="image-20190820162231832"></p><h2 id="PostgreSQL安装和配置"><a href="#PostgreSQL安装和配置" class="headerlink" title="PostgreSQL安装和配置"></a>PostgreSQL安装和配置</h2><p>使用 EnterpriseDB 来下载安装，EnterpriseDB 是全球唯一一家提供基于 PostgreSQL 企业级产品与服务的厂商。</p><p><a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads" target="_blank" rel="noopener">PostgreSQL Mac客户端下载</a></p><p><a href="https://www.runoob.com/postgresql/mac-install-postgresql.html" target="_blank" rel="noopener">PostgreSQL菜鸟教程</a></p><p>使用该数据库需要安装psycopg2,用于连接数据库。</p><pre><code>conda install psycopg2</code></pre><h3 id="PostgreSQL安装"><a href="#PostgreSQL安装" class="headerlink" title="PostgreSQL安装"></a>PostgreSQL安装</h3><ul><li>默认安装目录：/Library/PostgreSQL/11</li><li>默认安装所有组件：PostgreSQL Server、pgAdmin4、Stack Builder、Command Line Tools</li><li>默认数据存储目录：/Library/PostgreSQL/11/data</li><li>数据库超级用户密码：默认会创建一个数据库<code>postgres</code>，密码：12345678</li><li>默认端口：5433</li><li>Locale，也就是数据库语言：默认选择Default locale</li></ul><h3 id="PostgreSQL-Command-Line"><a href="#PostgreSQL-Command-Line" class="headerlink" title="PostgreSQL Command Line"></a>PostgreSQL Command Line</h3><p>命令行启动</p><pre class=" language-bash"><code class="language-bash">/Library/PostgreSQL/11/scripts/runpsql.sh</code></pre><p>查看数据库列表</p><pre><code>\l</code></pre><p>删除数据库</p><pre class=" language-bash"><code class="language-bash">DROP DATABASE runoobdb<span class="token punctuation">;</span></code></pre><h3 id="pgAdmin4"><a href="#pgAdmin4" class="headerlink" title="pgAdmin4"></a>pgAdmin4</h3><p>打开软件，点击菜单栏图标<code>New pgAdmin 4 window</code>，会自动打开浏览器,然后就是一个可视化的界面操作环境。</p><h3 id="Django-PostgreSQL配置"><a href="#Django-PostgreSQL配置" class="headerlink" title="Django PostgreSQL配置"></a>Django PostgreSQL配置</h3><p>我的配置:</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.postgresql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'postgres'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'postgres'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'12345678'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'5432'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>备忘：sqlite默认配置</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.sqlite3'</span><span class="token punctuation">,</span>         <span class="token string">'NAME'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'db.sqlite3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> yingcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> yingcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heroku入门</title>
      <link href="/2018/10/07/heroku-ru-men/"/>
      <url>/2018/10/07/heroku-ru-men/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Heroku </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heroku </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow object detection api</title>
      <link href="/2018/10/07/tensorflow-object-detection-api/"/>
      <url>/2018/10/07/tensorflow-object-detection-api/</url>
      
        <content type="html"><![CDATA[<p>tensorflow物体识别API安装、使用以及新模型的训练。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p> <a href="https://github.com/tensorflow/models/research/object_detection" target="_blank" rel="noopener">TensorFlow Object Detection API Github</a></p><p>注意：object_detection依赖slim。使用时，我们需要将research下的object_detection和slim都拷贝出来。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装或升级protoc"><a href="#安装或升级protoc" class="headerlink" title="安装或升级protoc"></a>安装或升级protoc</h3><p>在object_detection/ptoroc中，可以看到一些proto文件，我们需要使用protoc程序将这些proto文件编译为python文件才可以。</p><p>TensorFLow Object Detection必须使用2.6.0以上的protoc进行编译，否则会报错。可以使用如下指令查看protoc的版本。</p><pre class=" language-bash"><code class="language-bash">protoc --version</code></pre><p>如果版本低于2.6.0就需要进行版本升级，如果版本高于2.6.0可以忽略当前操作。</p><p><a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">protoc下载地址</a></p><p>下载文件后解压，会得到一个 protoc 文件，将它复制到系统的可执行目录即可，例如：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> bin/protoc /usr/local/bin</code></pre><p>然后查看版本是否是新安装的版本。</p><h3 id="编译proto文件"><a href="#编译proto文件" class="headerlink" title="编译proto文件"></a>编译proto文件</h3><p>接下来，我们需要将“ object_detection/protos/”下的“.proto”文件进行编译，编译为“.py”文件，执行如下指令：</p><pre class=" language-bash"><code class="language-bash">protoc object_detection/protos/*.proto --python_out<span class="token operator">=</span>.</code></pre><p>运行完，如果每一个“.proto”文件都生成了对于的“.py”文件，说明编译成功了。</p><h3 id="将Slim加入PYTHONPATH"><a href="#将Slim加入PYTHONPATH" class="headerlink" title="将Slim加入PYTHONPATH"></a>将Slim加入PYTHONPATH</h3><p>TensorFlow Object Detection API 是以 Slim 为基础实现的，需要将 Slim 的目录加入 PYTHONPATH 后才能正确运行。具体来说，还是在 research 文 件夹下执行下面的命令。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PYTHONPATH<span class="token operator">=</span><span class="token variable">$PYTHONPATH</span><span class="token keyword">:</span><span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span><span class="token keyword">:</span><span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/slim</code></pre><p>执行完，我们打开一个python shell，执行“import slim”，不报错就表示已经正确配置。</p><h3 id="完成安装测试"><a href="#完成安装测试" class="headerlink" title="完成安装测试"></a>完成安装测试</h3><pre class=" language-bash"><code class="language-bash">python object_detection/builders/model_builder_test.py</code></pre><p>这条命令会自动检查 TensorFlow Object Detection API 是否正确安装，如果出现”Ok (skipped=1)”信息，说明己安装成功。</p><h2 id="使用预训练模型"><a href="#使用预训练模型" class="headerlink" title="使用预训练模型"></a>使用预训练模型</h2><p>TensorFlow Object Detection API默认提供了5个与训练模型，它们都是使用COCO数据集训练完成的，结构分别为：</p><ul><li>SSD+MobileNet</li><li>SSD+Inception</li><li>R-FCN+ ResNet101</li><li>Faster RCNN+ResNet101</li><li>Faster RCNN+Inception_ResNet</li></ul><p>如何使用这些模型呢，可以<a href="/Users/zhusheng/WorkSpace/Github/models-master/research/object_detection/object_detection_tutorial.ipynb">参考官方的一个案例</a></p><p>本案例基于官方示例，使用SSD+MobileNet模型进行图片检测。</p><p><a href="http://download.tensorflow.org/models/object_detection/ssd_mobilenet_v1_coco_2017_11_17.tar.gz" target="_blank" rel="noopener">SSD+MobileNet模型下载地址</a></p><p>说明：执行官方示例会自动下载和解压该模型。执行<code>snkey_object_detection.py</code>需要已经存在该模型。</p><p>案例代码：<code>research/object_detection/snkey_object_detection.py</code>。运行之前，我们需要将模型下载并解压到当前目录。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> six<span class="token punctuation">.</span>moves<span class="token punctuation">.</span>urllib <span class="token keyword">as</span> urllib<span class="token keyword">import</span> sys<span class="token keyword">import</span> tarfile<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> zipfile<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>version <span class="token keyword">import</span> StrictVersion<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment" spellcheck="true"># 因为我们的notebook文件位于object_detection文件夹下，</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span><span class="token keyword">from</span> object_detection<span class="token punctuation">.</span>utils <span class="token keyword">import</span> ops <span class="token keyword">as</span> utils_ops<span class="token keyword">if</span> StrictVersion<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span> <span class="token operator">&lt;</span> StrictVersion<span class="token punctuation">(</span><span class="token string">'1.12.0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">raise</span> ImportError<span class="token punctuation">(</span><span class="token string">'Please upgrade your TensorFlow installation to v1.12.*.'</span><span class="token punctuation">)</span><span class="token keyword">from</span> utils <span class="token keyword">import</span> label_map_util<span class="token keyword">from</span> utils <span class="token keyword">import</span> visualization_utils <span class="token keyword">as</span> vis_util<span class="token comment" spellcheck="true"># 因为执行object_detection_tutorial notebook文件，模型已经下载到本地了，这里直接使用即可。</span><span class="token comment" spellcheck="true"># 模型</span>PATH_TO_FROZEN_GRAPH <span class="token operator">=</span><span class="token string">'ssd_mobilenet_v1_coco_2017_11_17/frozen_inference_graph.pb'</span><span class="token comment" spellcheck="true"># 标签映射表</span>PATH_TO_LABELS <span class="token operator">=</span> <span class="token string">'data/mscoco_label_map.pbtxt'</span><span class="token comment" spellcheck="true"># 自定义图，然后将模型加载到内存中</span>detection_graph <span class="token operator">=</span> tf<span class="token punctuation">.</span>Graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> detection_graph<span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  od_graph_def <span class="token operator">=</span> tf<span class="token punctuation">.</span>GraphDef<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">with</span> tf<span class="token punctuation">.</span>gfile<span class="token punctuation">.</span>GFile<span class="token punctuation">(</span>PATH_TO_FROZEN_GRAPH<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fid<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取一个文件操作句柄，加载模型文件</span>    serialized_graph <span class="token operator">=</span> fid<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    od_graph_def<span class="token punctuation">.</span>ParseFromString<span class="token punctuation">(</span>serialized_graph<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>import_graph_def<span class="token punctuation">(</span>od_graph_def<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加载标签映射关系文件</span>category_index <span class="token operator">=</span> label_map_util<span class="token punctuation">.</span>create_category_index_from_labelmap<span class="token punctuation">(</span>PATH_TO_LABELS<span class="token punctuation">,</span> use_display_name<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义2个函数</span><span class="token comment" spellcheck="true"># 加载图片的函数</span><span class="token keyword">def</span> <span class="token function">load_image_into_numpy_array</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">(</span>im_width<span class="token punctuation">,</span> im_height<span class="token punctuation">)</span> <span class="token operator">=</span> image<span class="token punctuation">.</span>size  <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>      <span class="token punctuation">(</span>im_height<span class="token punctuation">,</span> im_width<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 预测函数</span><span class="token keyword">def</span> <span class="token function">run_inference_for_single_image</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> graph<span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Get handles to input and output tensors</span>            ops <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_operations<span class="token punctuation">(</span><span class="token punctuation">)</span>            all_tensor_names <span class="token operator">=</span> <span class="token punctuation">{</span>output<span class="token punctuation">.</span>name <span class="token keyword">for</span> op <span class="token keyword">in</span> ops <span class="token keyword">for</span> output <span class="token keyword">in</span> op<span class="token punctuation">.</span>outputs<span class="token punctuation">}</span>            tensor_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">,</span> <span class="token string">'detection_boxes'</span><span class="token punctuation">,</span> <span class="token string">'detection_scores'</span><span class="token punctuation">,</span><span class="token string">'detection_classes'</span><span class="token punctuation">,</span> <span class="token string">'detection_masks'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 tensor_name <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">':0'</span>                 <span class="token keyword">if</span> tensor_name <span class="token keyword">in</span> all_tensor_names<span class="token punctuation">:</span>                    tensor_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_tensor_by_name<span class="token punctuation">(</span>tensor_name<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">'detection_masks'</span> <span class="token keyword">in</span> tensor_dict<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># The following processing is only for single image</span>                    detection_boxes <span class="token operator">=</span> tf<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks <span class="token operator">=</span> tf<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.</span>                    real_num_detection <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>                    detection_boxes <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>detection_boxes<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>real_num_detection<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>detection_masks<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>real_num_detection<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks_reframed <span class="token operator">=</span> utils_ops<span class="token punctuation">.</span>reframe_box_masks_to_image_masks<span class="token punctuation">(</span>detection_masks<span class="token punctuation">,</span> detection_boxes<span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    detection_masks_reframed <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>greater<span class="token punctuation">(</span>detection_masks_reframed<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># Follow the convention by adding back the batch dimension</span>                    tensor_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tf<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>detection_masks_reframed<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            image_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_tensor_by_name<span class="token punctuation">(</span><span class="token string">'image_tensor:0'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Run inference</span>            output_dict <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tensor_dict<span class="token punctuation">,</span>feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>image_tensor<span class="token punctuation">:</span> image<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># all outputs are float32 numpy arrays, so convert types as appropriate</span>            output_dict<span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>output_dict<span class="token punctuation">[</span><span class="token string">'num_detections'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_classes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_classes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token string">'detection_masks'</span> <span class="token keyword">in</span> output_dict<span class="token punctuation">:</span>                output_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> output_dict<span class="token punctuation">[</span><span class="token string">'detection_masks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> output_dict<span class="token keyword">def</span> <span class="token function">files_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    newlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span> <span class="token operator">or</span> item<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            newlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>newlist<span class="token punctuation">)</span>    <span class="token keyword">return</span> newlist<span class="token keyword">def</span> <span class="token function">detection</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Size, in inches, of the output images.</span>    IMAGE_SIZE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始对路径下的每张图片进行预测</span>    <span class="token keyword">for</span> image_path <span class="token keyword">in</span> paths<span class="token punctuation">:</span>        image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># the array based representation of the image will be used later in order to prepare the</span>        <span class="token comment" spellcheck="true"># result image with boxes and labels on it.</span>        image_np <span class="token operator">=</span> load_image_into_numpy_array<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Expand dimensions since the model expects images to have shape: [1, None, None, 3]</span>        image_np_expanded <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>image_np<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Actual detection.</span>        output_dict <span class="token operator">=</span> run_inference_for_single_image<span class="token punctuation">(</span>image_np_expanded<span class="token punctuation">,</span> detection_graph<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Visualization of the results of a detection.</span>        vis_util<span class="token punctuation">.</span>visualize_boxes_and_labels_on_image_array<span class="token punctuation">(</span>            image_np<span class="token punctuation">,</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_boxes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_classes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            output_dict<span class="token punctuation">[</span><span class="token string">'detection_scores'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            category_index<span class="token punctuation">,</span>            instance_masks<span class="token operator">=</span>output_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'detection_masks'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            use_normalized_coordinates<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            line_thickness<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span>IMAGE_SIZE<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>image_np<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>接下来，我们调用上述代码进行预测，预测<code>object_detection/test_images</code>下的图片</p><pre class=" language-python"><code class="language-python">path1 <span class="token operator">=</span> <span class="token string">'test_images'</span>paths <span class="token operator">=</span> files_path<span class="token punctuation">(</span>path1<span class="token punctuation">)</span>detection<span class="token punctuation">(</span>paths<span class="token punctuation">)</span></code></pre><p>运行效果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'test_images/image1.jpg'</span>, <span class="token string">'test_images/image2.jpg'</span><span class="token punctuation">]</span></code></pre><p><img src="/images/image-20190815155604404.png" alt="image-20190815155604404"></p><p><img src="/images/image-20190815155615314.png" alt="image-20190815155615314"></p><p>上述的模型可以检测的对象见：<code>data/mscoco_label_map.pbtxt</code>，部分内容如下所示：</p><p><img src="/images/image-20190815160115591.png" alt="image-20190815160115591"></p><p>我在本地新建了一个路径，存放了一些百度下载的图片，每个图都有一些上述元素，然后进行预测。</p><pre class=" language-python"><code class="language-python">path2 <span class="token operator">=</span> <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1'</span>paths <span class="token operator">=</span> files_path<span class="token punctuation">(</span>path2<span class="token punctuation">)</span>detection<span class="token punctuation">(</span>paths<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image8.jpg'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image7.jpg'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image6.jpg'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image4.jpg'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image5.jpg'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image1.jpg'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image2.jpg'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/15-object_detection/image1/image3.jpg'</span><span class="token punctuation">]</span></code></pre><p>一共8张图片，部分检测结果如下，全部粘贴太占篇幅了。</p><p><img src="/images/image-20190815164253728.png" alt="image-20190815164253728"></p><p><img src="/images/image-20190815164311884.png" alt="image-20190815164311884"></p><h2 id="更换预测模型"><a href="#更换预测模型" class="headerlink" title="更换预测模型"></a>更换预测模型</h2><p>只需要修改上述代码中的2行配置即可。将配置改为其它模型的对应文件即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 因为执行object_detection_tutorial notebook文件，模型已经下载到本地了，这里直接使用即可。</span><span class="token comment" spellcheck="true"># 模型</span>PATH_TO_FROZEN_GRAPH <span class="token operator">=</span><span class="token string">'ssd_mobilenet_v1_coco_2017_11_17/frozen_inference_graph.pb'</span><span class="token comment" spellcheck="true"># 标签映射表</span>PATH_TO_LABELS <span class="token operator">=</span> <span class="token string">'data/mscoco_label_map.pbtxt'</span></code></pre><h2 id="训练新模型"><a href="#训练新模型" class="headerlink" title="训练新模型"></a>训练新模型</h2><p>以VOC 2012数据集为例，介绍如何使用TensorFlow Object Detection API训练新的模型。</p><p>VOC 2012 是VOC 2007 数据集的升级版，一共有 11530 张 图片，每张图片都有标注，标注的物体包括人、动物(如猫、狗、岛等)、 交通工具(如车、船飞机等)、家具(如椅子、桌子 、沙发等)在内的20个 类别。</p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>（1）下载数据集</p><p><a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar" target="_blank" rel="noopener">VOC 2012 数据集</a></p><p>（2）新建voc目录</p><p>在object_detection目录下新建文件夹voc，将数据解压后拷贝到voc中，目录结构如下。</p><pre class=" language-bash"><code class="language-bash">- voc    - VOCdevkit      - VOC2012        - Annotations        - ImageSets        - JPEGImages        - SegmentationClass        - SegmentationObject</code></pre><p>（3）转换数据集为records文件</p><p>参与训练的数据需要为records文件格式。</p><p>在object_detection目录下执行如下指令，可以将voc2012数据集转换为tfrecords格式，转换好的tfrecords文件保存在voc文件夹下。</p><pre class=" language-bash"><code class="language-bash">python dataset_tools/create_pascal_tf_record.py --data_dir voc/VOCdevkit/ --year<span class="token operator">=</span>VOC2012 --set<span class="token operator">=</span>train --output_path<span class="token operator">=</span>voc/pascal_train.recordpython dataset_tools/create_pascal_tf_record.py --data_dir voc/VOCdevkit/ --year<span class="token operator">=</span>VOC2012 --set<span class="token operator">=</span>val --output_path<span class="token operator">=</span>voc/pascal_val.record</code></pre><p>转换后，会生成2个文件：<code>pascal_train.record</code>和<code>pascal_val.record</code>, 分别对应训练集和测试集，转换过程如下图所示：</p><p><img src="/images/image-20190815104628999.png" alt="image-20190815104628999"></p><p><img src="/images/image-20190815104826147.png" alt="image-20190815104826147"></p><p>说明：这里的转换代码<code>dataset_tools/create_pascal_tf_record.py</code>是专门为voc2012数据集提前编写好的。如果我们想使用自己编写的数据集，有两种方法：</p><ul><li>第一种方法就是修改自己的数据集的标注格式，使其和voc2012一模一样，然后就可以直接使用<code>dataset_tools/create_pascal_tf_record.py</code>转换脚本文件了。</li><li>第二种方法是修改<code>dataset_tools/create_pascal_tf_record.py</code>脚本文件，对读取标签的代码进行修改。</li></ul><p>（4）准备pbtxt映射文件</p><p>将<code>data/pascal_label_map.pbtxt</code>数据复制到voc文件夹，该文件为索引和预测对象类别的映射关系文件。</p><h3 id="准备预训练模型"><a href="#准备预训练模型" class="headerlink" title="准备预训练模型"></a>准备预训练模型</h3><p>这里使用<a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_resnet_v2_atrous_coco_11_06_2017.tar.gz" target="_blank" rel="noopener">Faster R-CNN + Inception_ResNet_v2模型</a>。</p><p>模型文件大小大约700MB，下载模型解压后，得到5个文件，在voc目录中新建文件夹<code>pretrained</code>，将5个文件复制进去。</p><h3 id="准备训练的配置文件"><a href="#准备训练的配置文件" class="headerlink" title="准备训练的配置文件"></a>准备训练的配置文件</h3><p><strong>voc.config</strong></p><p>TensorFlow Object Detection API是依赖一个特殊的设置文件进行训练的。</p><p>在<code>object_detection/samples/configs</code>文件夹下，有一些设置文件的示例。可以参考</p><p><code>object_detection/samples/configs/faster_rcnn_inception_resnet_v2_atrous_pets.config</code>设置文件进行修改。</p><p>在object_detection目录下执行如下指令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> samples/configs/faster_rcnn_inception_resnet_v2_atrous_pets.config voc/voc.config</code></pre><p>voc.config文件一共有7处需要修改的地方：</p><ul><li>第一处为num_classes，需要将它改为voc2012中的物体类别数，即20类。</li><li>第二处为eval_config中的num_examples，它表示在验证阶段需要执行的图片数量，修改为voc2012验证集的图片数 5823。我们可以在create_pascal_tf_records.py中，输出examples_list的长度来获取这个数值。</li></ul><p>在文件中搜索examples_list变量的位置，增加如下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"examples_list:"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>examples_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>然后执行如下指令，相当于再次生成pascal_val.record文件。</p><pre class=" language-bash"><code class="language-bash">python dataset_tools/create_pascal_tf_record.py --data_dir voc/VOCdevkit/ --year<span class="token operator">=</span>VOC2012 --set<span class="token operator">=</span>val --output_path<span class="token operator">=</span>voc/pascal_val.record</code></pre><ul><li>还有5处为所有含有PATH_TO_BE_CONFIGURED的地方，这些地方需要修改为自己的目录，它们应该分别被修改为：</li></ul><pre class=" language-python"><code class="language-python">fine_tune_checkpoint<span class="token punctuation">:</span> <span class="token string">"voc/pretrained/model.ckpt"</span>train_input_reader<span class="token punctuation">:</span> <span class="token punctuation">{</span>  tf_record_input_reader <span class="token punctuation">{</span>    input_path<span class="token punctuation">:</span> <span class="token string">"voc/pascal_train.record"</span>  <span class="token punctuation">}</span>  label_map_path<span class="token punctuation">:</span> <span class="token string">"voc/pascal_label_map.pbtxt"</span><span class="token punctuation">}</span>eval_input_reader<span class="token punctuation">:</span> <span class="token punctuation">{</span>  tf_record_input_reader <span class="token punctuation">{</span>    input_path<span class="token punctuation">:</span> <span class="token string">"voc/pascal_val.record"</span>  <span class="token punctuation">}</span>  label_map_path<span class="token punctuation">:</span> <span class="token string">"voc/pascal_label_map.pbtxt"</span>  shuffle<span class="token punctuation">:</span> false  num_readers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p><strong>train_dir</strong></p><p>在voc文件夹中新建一个文件夹<code>train_dir</code>，作为保存模型和日志的目录。</p><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><p>在object_detection目录下执行如下指令开始训练：</p><pre class=" language-bash"><code class="language-bash">python legacy/train.py --train_dir voc/train_dir/ --pipeline_config_path voc/voc.config</code></pre><p>我们可以使用tensorboard来监控训练情况。</p><pre class=" language-bash"><code class="language-bash">tensorboard --logdir voc/train_dir/</code></pre><p>大概运行了5分钟，我的电脑资源基本都满了，没办法，我只好终止我的训练过程，最好是准备GPU资源然后再进行训练。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow MNIST自编码网络</title>
      <link href="/2018/09/25/tensorflow-mnist-zi-bian-ma-wang-luo/"/>
      <url>/2018/09/25/tensorflow-mnist-zi-bian-ma-wang-luo/</url>
      
        <content type="html"><![CDATA[<p>案例来自《Tensorflow技术解析与实战》9.6</p><h2 id="自编码网络"><a href="#自编码网络" class="headerlink" title="自编码网络"></a>自编码网络</h2><p>本案例讲述基于无监督学习的一个简单应用—<strong>自编码器</strong>，学习用tensorflow构建一个<strong>自编码网络</strong>，并用它在MNIST数据集上进行训练。</p><p>监督学习的重要特征是数据都是有标记的，那么无标记的数据应该使用什么样的网络模型来学习呢，下面我们介绍一种网络模型—-自编码网络。</p><p>自编码网络的作用是将输入样本压缩到隐藏层，然后解压，在输出端重建样本。最终输出层的神经元数量等于输入层的神经元数量，如下图所示。</p><p><img src="/images/image-20190814084403501.png" alt=""></p><h2 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h2><p>这里面主要有2个过程：压缩和解压。</p><p><strong>压缩</strong>依靠的是输入数据（图像、文字、声音）本身存在不同程度的冗余信息，自动编码网络通过学习去掉这些冗余信息，把有用的特征输入到隐藏层中。</p><p>这里和主成分分析PCA有些类似，要找到可以代表源数据的主要成分，其实，如果激活函数不使用sigmoid等非线形函数，而使用线性函数，就是PCA模型。</p><p>可以想象，如果数据都是完全随机、相互独立、同等分布的，自编码网络就很难学习到一个有效的压缩模型。</p><p>压缩过程一方面要限制隐藏层神经元的数量，来学习一些有意义的特征，另一方面还希望神经元大部分时间都是被抑制的，当神经元的输出接近1时认为是被激活的，接近0时认为是被抑制的。希望部分神经元处于被抑制状态，这种规则称为<strong>“稀疏性限制”</strong>。</p><p><strong>多个隐藏层的主要作用是</strong>：如果输入的数据是图像，第一层学习如何识别边，第二层会学习如何去组合边，从而构建轮廓、角等，更高层会学习如何去组合更有意义的特征。例如如果输入数据是人脸图像的话，更高层会学习如何识别和组合眼睛、鼻子、嘴等人脸器官。</p><p><strong>解压</strong>的过程就是将隐藏层的数据输出。</p><p>【拓展：PCA】</p><p>PCA是一个分析、简化数据集的技术，经常用于减少数据集的维度，同时保持数据集中对方差贡献最大的特征。这是通过保留低阶主成分，忽略高阶主成分做到的，是最常用的线性降维方法。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面是一个基于MNIST数据集的自编码网络，示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"KMP_DUPLICATE_LIB_OK"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"TRUE"</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"data_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/7-Mnist/MniST"</span><span class="token punctuation">,</span> <span class="token string">"数据集的位置"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    训练模型    :return:    """</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>data_dir<span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"HyperParameters"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        learning_rate <span class="token operator">=</span> <span class="token number">0.01</span>        trainning_epochs <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment" spellcheck="true"># 训练的轮数</span>        batch_size<span class="token operator">=</span> <span class="token number">256</span> <span class="token comment" spellcheck="true"># 每次训练的数据大小</span>        display_step <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 每隔多少轮显示一次训练结果</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"parameters"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从测试集中选择10张图片去验证自动编码器的结果</span>        examples_to_show <span class="token operator">=</span> <span class="token number">10</span>        n_hidden_1 <span class="token operator">=</span> <span class="token number">256</span>        n_hidden_2 <span class="token operator">=</span> <span class="token number">128</span> <span class="token comment" spellcheck="true"># 第二个隐藏层的神经元个数，也就是特征个数</span>        n_input <span class="token operator">=</span> <span class="token number">784</span> <span class="token comment" spellcheck="true"># 输入数据的特征个数，28*28 = 784</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"PlaceHolder"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        X <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> n_input<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"weights_and_biases"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        weights <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'encoder_h1'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_input<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'encoder_h2'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_hidden_1<span class="token punctuation">,</span> n_hidden_2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'decoder_h1'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_hidden_2<span class="token punctuation">,</span> n_hidden_1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'decoder_h2'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_hidden_1<span class="token punctuation">,</span> n_input<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        biases <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'encoder_b1'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_hidden_1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'encoder_b2'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_hidden_2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'decoder_b1'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_hidden_1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'decoder_b2'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_input<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token triple-quoted-string string">"""    定义自动编码模型的网络结构，包括压缩和解压两个过程。    """</span>    <span class="token keyword">def</span> <span class="token function">encoder</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        定义压缩函数        :param x:        :return:        """</span>        <span class="token comment" spellcheck="true"># 使用sigmoid激活函数来编码第一个隐藏层</span>        layer_1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weights<span class="token punctuation">[</span><span class="token string">'encoder_h1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> biases<span class="token punctuation">[</span><span class="token string">'encoder_b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layer_2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>layer_1<span class="token punctuation">,</span> weights<span class="token punctuation">[</span><span class="token string">'encoder_h2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> biases<span class="token punctuation">[</span><span class="token string">'encoder_b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> layer_2    <span class="token keyword">def</span> <span class="token function">decoder</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        定义解压函数        :param x:        :return:        """</span>        <span class="token comment" spellcheck="true"># 使用sigmoid激活函数解压第一个隐藏层</span>        layer_1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weights<span class="token punctuation">[</span><span class="token string">'decoder_h1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  biases<span class="token punctuation">[</span><span class="token string">'decoder_b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layer_2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>layer_1<span class="token punctuation">,</span> weights<span class="token punctuation">[</span><span class="token string">'decoder_h2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> biases<span class="token punctuation">[</span><span class="token string">'decoder_b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> layer_2    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"model"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""构建模型"""</span>        encoder_op <span class="token operator">=</span> encoder<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        decoder_op  <span class="token operator">=</span> decoder<span class="token punctuation">(</span>encoder_op<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"loss"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        y_pred <span class="token operator">=</span> decoder_op        y_true <span class="token operator">=</span> X        <span class="token comment" spellcheck="true"># 使用最小二乘法求损失：真实值和预测值求平方差，然后取平均值</span>        <span class="token comment" spellcheck="true"># tf.pow(x,y)计算x^y，是求幂函数</span>        cost <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>y_true <span class="token operator">-</span> y_pred<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        optimizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>RMSPropOptimizer<span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        total_batch <span class="token operator">=</span> int<span class="token punctuation">(</span>mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>num_examples<span class="token operator">/</span>batch_size<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开始训练</span>        <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>trainning_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>total_batch<span class="token punctuation">)</span><span class="token punctuation">:</span>                batch_xs<span class="token punctuation">,</span> batch_ys <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>                _<span class="token punctuation">,</span> c <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>optimizer<span class="token punctuation">,</span> cost<span class="token punctuation">]</span><span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>                    X<span class="token punctuation">:</span> batch_xs                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> epoch <span class="token operator">%</span> display_step <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch:'</span><span class="token punctuation">,</span> <span class="token string">'%04d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"cost="</span><span class="token punctuation">,</span> <span class="token string">"{:.9f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Optimization Finished"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对测试集使用训练好的自动编码网络</span>        encode_decode <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>            X<span class="token punctuation">:</span> mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token punctuation">:</span>examples_to_show<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        f<span class="token punctuation">,</span> a <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>examples_to_show<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 测试集</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>images<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 重建结果</span>            a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>encode_decode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>waitforbuttonpress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    train<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">Epoch: 0001 cost<span class="token operator">=</span> 0.205877036Epoch: 0002 cost<span class="token operator">=</span> 0.163223580Epoch: 0003 cost<span class="token operator">=</span> 0.147740424Epoch: 0004 cost<span class="token operator">=</span> 0.138357997Epoch: 0005 cost<span class="token operator">=</span> 0.131654978Epoch: 0006 cost<span class="token operator">=</span> 0.126165777Epoch: 0007 cost<span class="token operator">=</span> 0.122866876Epoch: 0008 cost<span class="token operator">=</span> 0.118833765Epoch: 0009 cost<span class="token operator">=</span> 0.114294693Epoch: 0010 cost<span class="token operator">=</span> 0.112281665Epoch: 0011 cost<span class="token operator">=</span> 0.111942567Epoch: 0012 cost<span class="token operator">=</span> 0.107458614Epoch: 0013 cost<span class="token operator">=</span> 0.108471118Epoch: 0014 cost<span class="token operator">=</span> 0.100667074Epoch: 0015 cost<span class="token operator">=</span> 0.100375548Epoch: 0016 cost<span class="token operator">=</span> 0.098238721Epoch: 0017 cost<span class="token operator">=</span> 0.097903341Epoch: 0018 cost<span class="token operator">=</span> 0.094704948Epoch: 0019 cost<span class="token operator">=</span> 0.092649087Epoch: 0020 cost<span class="token operator">=</span> 0.090003498Optimization Finished</code></pre><p>效果图如下：</p><p><img src="/images/image-20190816152340615.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow MNIST循环神经网络</title>
      <link href="/2018/09/24/tensorflow-mnist-xun-huan-shen-jing-wang-luo/"/>
      <url>/2018/09/24/tensorflow-mnist-xun-huan-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<p>案例来自《Tensorflow技术解析与实战》9.5，本案例，我们通过tensorflow搭建一个循环神经网络RNN模型，并用它来训练MNIST数据集。</p><p>RNN在自然语言处理领域的以下几个方向应用得非常成功：</p><ul><li>机器翻译</li><li>语音识别</li><li>图像描述生成，把RNN和CNN结合，根据图像的特征生成描述，见《Tensorflow技术解析与实战》第12章“看图说话”</li><li>语音模型与文本生成，即利用生成的模型预测下一个单词的可能性</li></ul><p>为了使用RNN来分类图片，我们把每张图片的行堪称一个像素序列，因为MNIST图片大小是28 x 28，所以，我们把每一张图片样本看作一行行的像素序列。因此，一共有（28个元素的序列）x（28行），然后每一步输入的序列长度为28，输入的步数是28步。 </p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"KMP_DUPLICATE_LIB_OK"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"TRUE"</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGSBASE_DIR <span class="token operator">=</span> <span class="token string">"/Users/zhusheng/WorkSpace/Github/MachineLearning/book_tensorflow_lijiaxuan/"</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"data_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/7-Mnist/MniST"</span><span class="token punctuation">,</span> <span class="token string">"数据集的位置"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"event_dir"</span><span class="token punctuation">,</span> BASE_DIR <span class="token operator">+</span> <span class="token string">"chapter9/tmp/"</span><span class="token punctuation">,</span> <span class="token string">"数据集的位置"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>data_dir<span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"Hyperparameters"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 学习率</span>        lr <span class="token operator">=</span> <span class="token number">0.001</span>        <span class="token comment" spellcheck="true"># 训练次数</span>        trainning_iters <span class="token operator">=</span> <span class="token number">100000</span>        <span class="token comment" spellcheck="true"># 每一轮训练的数据大小</span>        batch_size <span class="token operator">=</span> <span class="token number">128</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"RNNparameters"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n_inputs <span class="token operator">=</span> <span class="token number">28</span> <span class="token comment" spellcheck="true"># 输入层的n</span>        n_steps <span class="token operator">=</span> <span class="token number">28</span> <span class="token comment" spellcheck="true"># 28长度</span>        n_hidden_units <span class="token operator">=</span> <span class="token number">128</span> <span class="token comment" spellcheck="true"># 隐藏层的神经元个数</span>        n_classes <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true"># 输出的数量，即分类的类别，0～9个数字，共10个类别</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"placeholder"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> n_steps<span class="token punctuation">,</span> n_inputs<span class="token punctuation">]</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> n_classes<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"weight"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        weights <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># (28, 128)</span>            <span class="token string">'in'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_inputs<span class="token punctuation">,</span> n_hidden_units<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># (128, 10)</span>            <span class="token string">'out'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>n_hidden_units<span class="token punctuation">,</span> n_classes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"bias"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        biases <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># (128, )</span>            <span class="token string">'in'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>n_hidden_units<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># (10, )</span>            <span class="token string">'out'</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>n_classes<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">RNN</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> biases<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        定义RNN模型        :param X:        :param weights:        :param biases:        :return:        """</span>        <span class="token comment" spellcheck="true"># shape = (128*28, 28)</span>        X <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_inputs<span class="token punctuation">]</span><span class="token punctuation">)</span>        X_in <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>X<span class="token punctuation">,</span> weights<span class="token punctuation">[</span><span class="token string">'in'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> biases<span class="token punctuation">[</span><span class="token string">'in'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># shape = (128 , 28, 28)</span>        X_in <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X_in<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_steps<span class="token punctuation">,</span> n_hidden_units<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 采用基本的LSTM循环网络单元</span>        lstm_cell <span class="token operator">=</span> tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>rnn<span class="token punctuation">.</span>BasicLSTMCell<span class="token punctuation">(</span>n_hidden_units<span class="token punctuation">,</span> forget_bias<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> state_is_tuple<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 初始化0值，lstm单元由两部分组成（c_state, h_state）</span>        init_state <span class="token operator">=</span> lstm_cell<span class="token punctuation">.</span>zero_state<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># dynamic_rnn接收张量（batch, steps, inputs）作为X_in</span>        outputs<span class="token punctuation">,</span> final_state <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dynamic_rnn<span class="token punctuation">(</span>lstm_cell<span class="token punctuation">,</span> X_in<span class="token punctuation">,</span> initial_state<span class="token operator">=</span>init_state<span class="token punctuation">,</span> time_major<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        results <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>final_state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> weights<span class="token punctuation">[</span><span class="token string">'out'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> biases<span class="token punctuation">[</span><span class="token string">'out'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> results    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"loss"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pred <span class="token operator">=</span> RNN<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> biases<span class="token punctuation">)</span>        cost <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax_cross_entropy_with_logits<span class="token punctuation">(</span>logits<span class="token operator">=</span>pred<span class="token punctuation">,</span> labels<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>        train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>AdamOptimizer<span class="token punctuation">(</span>lr<span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        correct_pred <span class="token operator">=</span> tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>correct_pred<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        step <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> step <span class="token operator">*</span> batch_size <span class="token operator">&lt;</span> trainning_iters<span class="token punctuation">:</span>            batch_xs<span class="token punctuation">,</span> batch_ys <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>            batch_xs <span class="token operator">=</span> batch_xs<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span>batch_size<span class="token punctuation">,</span> n_steps<span class="token punctuation">,</span> n_inputs<span class="token punctuation">]</span><span class="token punctuation">)</span>            sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_op<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>                x<span class="token punctuation">:</span> batch_xs<span class="token punctuation">,</span>                y<span class="token punctuation">:</span> batch_ys            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>accuracy<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>                    x<span class="token punctuation">:</span> batch_xs<span class="token punctuation">,</span>                    y<span class="token punctuation">:</span> batch_ys                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            step <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    train<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行大约3分钟，运行结果如下：</p><pre class=" language-bash"><code class="language-bash">0.16406250.5781250.7656250.81250.85156250.8281250.8750.85156250.91406250.906250.89843750.88281250.906250.91406250.92968750.93750.9531250.91406250.94531250.968750.9218750.94531250.968750.9843750.97656250.92968750.96093750.96093750.92968750.968750.96093750.97656250.968750.9843750.97656250.9531250.968750.97656250.97656250.96875</code></pre><p>可以看到，RNN模型的准确率接近96.87%， CNN模型的准确率为99.22%，CNN模型表现更优。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow MNIST Softmax回归</title>
      <link href="/2018/09/22/tensorflow-mnist-softmax-hui-gui/"/>
      <url>/2018/09/22/tensorflow-mnist-softmax-hui-gui/</url>
      
        <content type="html"><![CDATA[<p>tensorflow使用流程如下：</p><ul><li>加载数据</li><li>构建网络模型</li><li>训练模型</li><li>评估模型</li></ul><p>案例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"KMP_DUPLICATE_LIB_OK"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"TRUE"</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"data_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/7-Mnist/Mnist/"</span><span class="token punctuation">,</span> <span class="token string">"mnist数据集"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_integer<span class="token punctuation">(</span><span class="token string">"is_train"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"指定程序是预测还是训练，默认是进行训练"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"events_file_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/MachineLearning/tmp/summary/test/"</span><span class="token punctuation">,</span> <span class="token string">"tensorboard事件文件的路径"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"model_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/MachineLearning/tmp/ckpt/fc_model"</span><span class="token punctuation">,</span> <span class="token string">"模型存储路径"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">full_connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取真实的数据</span>    mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>data_dir<span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1、建立数据的占位符 x [None, 784]    y_true [None, 10]</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y_true <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、建立一个全连接层的神经网络 w [784, 10]   b [10]</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"fc_model"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 随机初始化权重和偏置</span>        weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>        bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 预测None个样本的输出结果matrix [None, 784]* [784, 10] + [10] = [None, 10]</span>        y_predict <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weight<span class="token punctuation">)</span> <span class="token operator">+</span> bias    <span class="token comment" spellcheck="true"># 3、求出所有样本的损失，然后求平均值</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"soft_cross"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 计算交叉熵损失，并求平均值</span>        loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax_cross_entropy_with_logits<span class="token punctuation">(</span>labels<span class="token operator">=</span>y_true<span class="token punctuation">,</span> logits<span class="token operator">=</span>y_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、梯度下降求出损失</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"optimizer"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 使用梯度下降优化损失，求损失的最小值</span>        train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5、计算准确率</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"acc"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 真实值与预测值的对比，返回的是true or false</span>        equal_list <span class="token operator">=</span> tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_predict<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"equal_list:"</span><span class="token punctuation">,</span> equal_list<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># equal_list  None个样本   [1, 0, 1, 0, 1, 1,..........]</span>        accuracy <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>equal_list<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"accuracy:"</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 收集变量 单个数字值收集</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>scalar<span class="token punctuation">(</span><span class="token string">"losses"</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>scalar<span class="token punctuation">(</span><span class="token string">"acc"</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 高纬度变量收集</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token string">"weightes"</span><span class="token punctuation">,</span> weight<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token string">"biases"</span><span class="token punctuation">,</span> bias<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个初始化变量的op</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个合并变量de op</span>    merged <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>merge_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个saver，用于进行模型保存和加载</span>    saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启会话去训练</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化变量</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 建立events文件，然后写入</span>        filewriter <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>FileWriter<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>events_file_dir<span class="token punctuation">,</span> graph<span class="token operator">=</span>sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 训练</span>        <span class="token keyword">if</span> FLAGS<span class="token punctuation">.</span>is_train <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 迭代步数去训练，更新参数预测</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 取出真实存在的特征值和目标值</span>                mnist_x<span class="token punctuation">,</span> mnist_y <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 运行train_op训练</span>                sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_op<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> mnist_x<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> mnist_y<span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 写入每步训练的值</span>                summary <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>merged<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> mnist_x<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> mnist_y<span class="token punctuation">}</span><span class="token punctuation">)</span>                filewriter<span class="token punctuation">.</span>add_summary<span class="token punctuation">(</span>summary<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练第%d步,准确率为:%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>accuracy<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> mnist_x<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> mnist_y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 训练完成后，保存模型。如果训练步数比较多，可以在训练过程中保存模型，默认报错最新的5个。</span>            saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> FLAGS<span class="token punctuation">.</span>model_dir<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 预测</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 加载模型</span>            saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> FLAGS<span class="token punctuation">.</span>model_dir<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 预测100次</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 每次取一张图片进行预测</span>                x_test<span class="token punctuation">,</span> y_test <span class="token operator">=</span> mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 这里直接运行y_predict op即可进行预测，因为到这里，我们的权重和偏置是优化后的</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d张图片，手写数字图片目标是:%d, 预测结果是:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                    i<span class="token punctuation">,</span>                    tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y_predict<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_test<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> y_test<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> None<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    full_connected<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>训练执行</p><pre class=" language-bash"><code class="language-bash">python mnist.py</code></pre><p>运行效果如下：</p><pre class=" language-bash"><code class="language-bash">训练第0步,准确率为:0.120000训练第1步,准确率为:0.120000训练第2步,准确率为:0.140000训练第3步,准确率为:0.160000训练第4步,准确率为:0.100000训练第5步,准确率为:0.120000训练第6步,准确率为:0.160000训练第7步,准确率为:0.040000训练第8步,准确率为:0.140000<span class="token punctuation">..</span>.训练第1988步,准确率为:0.840000训练第1989步,准确率为:0.880000训练第1990步,准确率为:0.840000训练第1991步,准确率为:0.740000训练第1992步,准确率为:0.860000训练第1993步,准确率为:0.860000训练第1994步,准确率为:0.940000训练第1995步,准确率为:0.880000训练第1996步,准确率为:0.840000训练第1997步,准确率为:0.880000训练第1998步,准确率为:0.820000训练第1999步,准确率为:0.840000</code></pre><p>查看tensorboard，执行</p><pre class=" language-bash"><code class="language-bash">tensorboard --logdir<span class="token operator">=</span><span class="token string">"tmp/summary/test"</span></code></pre><p>预测执行</p><pre class=" language-bash"><code class="language-bash">python mnist.py --is_train<span class="token operator">=</span>0</code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">第0张图片，手写数字图片目标是:8, 预测结果是:8第1张图片，手写数字图片目标是:8, 预测结果是:8第2张图片，手写数字图片目标是:7, 预测结果是:7第3张图片，手写数字图片目标是:5, 预测结果是:5第4张图片，手写数字图片目标是:0, 预测结果是:0第5张图片，手写数字图片目标是:6, 预测结果是:6第6张图片，手写数字图片目标是:7, 预测结果是:7<span class="token punctuation">..</span>.第98张图片，手写数字图片目标是:7, 预测结果是:7第99张图片，手写数字图片目标是:1, 预测结果是:1</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow MNIST卷积神经网络</title>
      <link href="/2018/09/21/tensorflow-mnist-juan-ji-shen-jing-wang-luo/"/>
      <url>/2018/09/21/tensorflow-mnist-juan-ji-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<p>tensorflow基于MNIST数据集的一个卷积神经网络案例，这里一共有3个案例，有来自其它书籍的案例，有自己写的案例，基本上都大同小异。</p><p>tensorflow使用流程如下：</p><ul><li>加载数据</li><li>构建网络模型</li><li>训练模型</li><li>评估模型</li></ul><h2 id="案例代码1"><a href="#案例代码1" class="headerlink" title="案例代码1"></a>案例代码1</h2><p>案例代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"KMP_DUPLICATE_LIB_OK"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"TRUE"</span><span class="token comment" spellcheck="true"># 参数：W</span><span class="token keyword">def</span> <span class="token function">weight_variable</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    initial <span class="token operator">=</span> tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span>shape<span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 参数：偏置项</span><span class="token keyword">def</span> <span class="token function">bias_variable</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    initial <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> shape<span class="token operator">=</span>shape<span class="token punctuation">)</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 卷积</span><span class="token keyword">def</span> <span class="token function">conv2d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> W<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> W<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 池化</span><span class="token keyword">def</span> <span class="token function">max_pool_2x2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>x<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读入数据</span>    mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span><span class="token string">"/Users/zhusheng/WorkSpace/Dataset/7-Mnist/MNIST_data/"</span><span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># x为训练图像的占位符、y_为训练图像标签的占位符</span>    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将单张图片从784维向量重新还原为28x28的矩阵图片</span>    x_image <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第一层卷积层</span>    W_conv1 <span class="token operator">=</span> weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b_conv1 <span class="token operator">=</span> bias_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    h_conv1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>conv2d<span class="token punctuation">(</span>x_image<span class="token punctuation">,</span> W_conv1<span class="token punctuation">)</span> <span class="token operator">+</span> b_conv1<span class="token punctuation">)</span>    h_pool1 <span class="token operator">=</span> max_pool_2x2<span class="token punctuation">(</span>h_conv1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二层卷积层</span>    W_conv2 <span class="token operator">=</span> weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b_conv2 <span class="token operator">=</span> bias_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    h_conv2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>conv2d<span class="token punctuation">(</span>h_pool1<span class="token punctuation">,</span> W_conv2<span class="token punctuation">)</span> <span class="token operator">+</span> b_conv2<span class="token punctuation">)</span>    h_pool2 <span class="token operator">=</span> max_pool_2x2<span class="token punctuation">(</span>h_conv2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 全连接层，输出为1024维的向量</span>    W_fc1 <span class="token operator">=</span> weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b_fc1 <span class="token operator">=</span> bias_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    h_pool2_flat <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>h_pool2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    h_fc1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>h_pool2_flat<span class="token punctuation">,</span> W_fc1<span class="token punctuation">)</span> <span class="token operator">+</span> b_fc1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用Dropout，keep_prob是一个占位符，训练时为0.5，测试时为1</span>    keep_prob <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    h_fc1_drop <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>h_fc1<span class="token punctuation">,</span> keep_prob<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把1024维的向量转换成10维，对应10个类别</span>    W_fc2 <span class="token operator">=</span> weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b_fc2 <span class="token operator">=</span> bias_variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y_conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>h_fc1_drop<span class="token punctuation">,</span> W_fc2<span class="token punctuation">)</span> <span class="token operator">+</span> b_fc2    <span class="token comment" spellcheck="true"># 我们不采用先Softmax再计算交叉熵的方法，而是直接用tf.nn.softmax_cross_entropy_with_logits直接计算</span>    cross_entropy <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>        tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax_cross_entropy_with_logits<span class="token punctuation">(</span>labels<span class="token operator">=</span>y_<span class="token punctuation">,</span> logits<span class="token operator">=</span>y_conv<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 同样定义train_step</span>    train_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>AdamOptimizer<span class="token punctuation">(</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>cross_entropy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义测试的准确率</span>    correct_prediction <span class="token operator">=</span> tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_conv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    accuracy <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>correct_prediction<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建Session和变量初始化</span>    sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>InteractiveSession<span class="token punctuation">(</span><span class="token punctuation">)</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练20000步</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        batch <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 每100步报告一次在验证集上的准确度</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            train_accuracy <span class="token operator">=</span> accuracy<span class="token punctuation">.</span>eval<span class="token punctuation">(</span>feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>                x<span class="token punctuation">:</span> batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y_<span class="token punctuation">:</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep_prob<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"step %d, training accuracy %g"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> train_accuracy<span class="token punctuation">)</span><span class="token punctuation">)</span>        train_step<span class="token punctuation">.</span>run<span class="token punctuation">(</span>feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y_<span class="token punctuation">:</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep_prob<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练结束后报告在测试集上的准确度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test accuracy %g"</span> <span class="token operator">%</span> accuracy<span class="token punctuation">.</span>eval<span class="token punctuation">(</span>feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>        x<span class="token punctuation">:</span> mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>images<span class="token punctuation">,</span> y_<span class="token punctuation">:</span> mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>labels<span class="token punctuation">,</span> keep_prob<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>训练比较耗时。</p><p>运行结果如下：</p><pre><code>step 0, training accuracy 0.14step 100, training accuracy 0.8step 200, training accuracy 0.92step 300, training accuracy 0.92step 400, training accuracy 0.9...</code></pre><h2 id="案例代码2"><a href="#案例代码2" class="headerlink" title="案例代码2"></a>案例代码2</h2><p>代码来源：《Tensorflow技术解析与实战》9.4</p><p>案例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"KMP_DUPLICATE_LIB_OK"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"TRUE"</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGSBASE_DIR <span class="token operator">=</span> <span class="token string">"/Users/zhusheng/WorkSpace/Github/MachineLearning/book_tensorflow_lijiaxuan/"</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"data_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/7-Mnist/MniST"</span><span class="token punctuation">,</span> <span class="token string">"数据集的位置"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"event_dir"</span><span class="token punctuation">,</span> BASE_DIR <span class="token operator">+</span> <span class="token string">"chapter9/tmp/"</span><span class="token punctuation">,</span> <span class="token string">"数据集的位置"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>data_dir<span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        trX<span class="token punctuation">,</span> trY<span class="token punctuation">,</span> teX<span class="token punctuation">,</span> teY <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>images<span class="token punctuation">,</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>labels<span class="token punctuation">,</span> mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>images<span class="token punctuation">,</span> mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>labels    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"reshape"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        trX <span class="token operator">=</span> trX<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        teX <span class="token operator">=</span> teX<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        X <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        Y <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init_weights</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>shape<span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"weights"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化所有的权重，设置卷积核的大小为3x3</span>        w <span class="token operator">=</span> init_weights<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># patch大小为3x3, 输入维度为1，输出维度为32</span>        w2 <span class="token operator">=</span> init_weights<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># patch大小为3x3, 输入维度为32，输出维度为64</span>        w3 <span class="token operator">=</span> init_weights<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># patch大小为3x3, 输入维度为64，输出维度为128</span>        w4 <span class="token operator">=</span> init_weights<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">625</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 全连接层，输入维度128*4*4，输出维度625</span>        w_o <span class="token operator">=</span> init_weights<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">625</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出层，输入维度625，输出维度10，10代表10个类别</span>    <span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> w<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3<span class="token punctuation">,</span> w4<span class="token punctuation">,</span> w_o<span class="token punctuation">,</span> p_keep_conv<span class="token punctuation">,</span> p_keep_hidden<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        构建神经网络模型        :param X:        :param w:        :param w2:        :param w3:        :param w4:        :param w_o:        :param p_keep_conv:        :param p_keep_hidden:        :return:        """</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"conv1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># input shape = (?, 28, 28, 1)</span>            <span class="token comment" spellcheck="true"># 卷积</span>            l1a <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>X<span class="token punctuation">,</span> w<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># shape = (?, 28, 28, 32)</span>            <span class="token comment" spellcheck="true"># 池化</span>            l1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>l1a<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># shape = (?, 14, 14, 32)</span>            l1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> p_keep_conv<span class="token punctuation">)</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"conv2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># input shape = pool1.shape = (?, 14, 14, 32)</span>            l2a <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># shape = (?, 14, 14, 64)</span>            l2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>l2a<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># shape = (?, 7, 7, 64)</span>            l2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>l2<span class="token punctuation">,</span> p_keep_conv<span class="token punctuation">)</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"conv3"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># input shape = l2.shape = (?, 7, 7, 64)</span>            l3a <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>l2<span class="token punctuation">,</span> w3<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># shape = (?, 7, 7, 128)</span>            l3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>l3a<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># shape = (?, 4, 4, 128)</span>            l3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>l3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> w4<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># reshape to (?, 2048) 2048=128*4*4</span>            l3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>l3<span class="token punctuation">,</span> p_keep_conv<span class="token punctuation">)</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"full_connect"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            l4 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>l3<span class="token punctuation">,</span> w4<span class="token punctuation">)</span><span class="token punctuation">)</span>            l4 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>l4<span class="token punctuation">,</span> p_keep_hidden<span class="token punctuation">)</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pyx <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>l4<span class="token punctuation">,</span> w_o<span class="token punctuation">)</span>        <span class="token keyword">return</span> pyx    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"prediction"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        计算预测值        """</span>        p_keep_conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        p_keep_hidden <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        py_x <span class="token operator">=</span> model<span class="token punctuation">(</span>X<span class="token punctuation">,</span> w<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3<span class="token punctuation">,</span> w4<span class="token punctuation">,</span> w_o<span class="token punctuation">,</span> p_keep_conv<span class="token punctuation">,</span> p_keep_hidden<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"cross"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        使用RMSProp优化器，学习率为0.001，衰减值为0.9        """</span>        cost <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax_cross_entropy_with_logits<span class="token punctuation">(</span>logits<span class="token operator">=</span>py_x<span class="token punctuation">,</span> labels<span class="token operator">=</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>        train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>RMSPropOptimizer<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>        predict_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>py_x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> <span class="token number">128</span>    test_size <span class="token operator">=</span> <span class="token number">256</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 训练</span>            trainning_batch <span class="token operator">=</span> zip<span class="token punctuation">(</span>                range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>trX<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># start、stop、step</span>                range<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> len<span class="token punctuation">(</span>trX<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token keyword">for</span> start<span class="token punctuation">,</span> end <span class="token keyword">in</span> trainning_batch<span class="token punctuation">:</span>                sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_op<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>                    X<span class="token punctuation">:</span> trX<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>                    Y<span class="token punctuation">:</span> trY<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>                    p_keep_conv<span class="token punctuation">:</span><span class="token number">0.8</span><span class="token punctuation">,</span>                    p_keep_hidden<span class="token punctuation">:</span><span class="token number">0.5</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 测试</span>            test_indices <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>teX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># get a test batch</span>            np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_indices<span class="token punctuation">)</span>            test_indices <span class="token operator">=</span> test_indices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> test_size<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>teY<span class="token punctuation">[</span>test_indices<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>predict_op<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>                X<span class="token punctuation">:</span> teX<span class="token punctuation">[</span>test_indices<span class="token punctuation">]</span><span class="token punctuation">,</span>                p_keep_conv<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>                p_keep_hidden<span class="token punctuation">:</span> <span class="token number">1.0</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    train<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行大概耗时几个小时。</p><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">0 0.99218751 0.98828125<span class="token punctuation">..</span>.</code></pre><p>当训练100次后，模型的准确率已经接近99.22%。</p><p>我们通过回归模型和卷积神经网络模型，可以看出卷积神经网络模型的效果真的非常好。</p><h2 id="案例代码3"><a href="#案例代码3" class="headerlink" title="案例代码3"></a>案例代码3</h2><p>自定义卷积神经网络模型，并使用该模型来训练MNIST数据集，然后使用训练的模型进行图片预测。</p><p>案例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"KMP_DUPLICATE_LIB_OK"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"TRUE"</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"data_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/7-Mnist/Mnist/"</span><span class="token punctuation">,</span> <span class="token string">"mnist数据集"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_integer<span class="token punctuation">(</span><span class="token string">"is_train"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"指定程序是预测还是训练，默认是进行训练"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"events_file_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/MachineLearning/tmp/summary/test/"</span><span class="token punctuation">,</span> <span class="token string">"tensorboard事件文件的路径"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"model_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/MachineLearning/tmp/ckpt/fc_model"</span><span class="token punctuation">,</span> <span class="token string">"模型存储路径"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个初始化权重的函数</span><span class="token keyword">def</span> <span class="token function">weight_variables</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span>shape<span class="token operator">=</span>shape<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个初始化偏置的函数</span><span class="token keyword">def</span> <span class="token function">bias_variables</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> shape<span class="token operator">=</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    自定义的卷积模型    :return:    """</span>    <span class="token comment" spellcheck="true"># 1、准备数据的占位符 x [None, 784]  y_true [None, 10]</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y_true <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、一卷积层 卷积: 5*5*1，32个，strides=1 激活: tf.nn.relu 池化</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"conv1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 随机初始化权重, 偏置[32]</span>        w_conv1 <span class="token operator">=</span> weight_variables<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        b_conv1 <span class="token operator">=</span> bias_variables<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对x进行形状的改变[None, 784]  [None, 28, 28, 1]</span>        x_reshape <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># [None, 28, 28, 1]-----> [None, 28, 28, 32]</span>        x_relu1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x_reshape<span class="token punctuation">,</span> w_conv1<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">)</span> <span class="token operator">+</span> b_conv1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 池化 2*2 ,strides2 [None, 28, 28, 32]---->[None, 14, 14, 32]</span>        x_pool1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>x_relu1<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、二卷积层卷积: 5*5*32，64个filter，strides=1 激活: tf.nn.relu 池化：</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"conv2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 随机初始化权重,  权重：[5, 5, 32, 64]  偏置[64]</span>        w_conv2 <span class="token operator">=</span> weight_variables<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        b_conv2 <span class="token operator">=</span> bias_variables<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 卷积，激活，池化计算</span>        <span class="token comment" spellcheck="true"># [None, 14, 14, 32]-----> [None, 14, 14, 64]</span>        x_relu2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x_pool1<span class="token punctuation">,</span> w_conv2<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">)</span> <span class="token operator">+</span> b_conv2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 池化 2*2, strides 2, [None, 14, 14, 64]---->[None, 7, 7, 64]</span>        x_pool2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>x_relu2<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、全连接层 [None, 7, 7, 64]--->[None, 7*7*64]*[7*7*64, 10]+ [10] =[None, 10]</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"conv2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 随机初始化权重和偏置</span>        w_fc <span class="token operator">=</span> weight_variables<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        b_fc <span class="token operator">=</span> bias_variables<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 修改形状 [None, 7, 7, 64] --->None, 7*7*64]</span>        x_fc_reshape <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x_pool2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 进行矩阵运算得出每个样本的10个结果</span>        y_predict <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x_fc_reshape<span class="token punctuation">,</span> w_fc<span class="token punctuation">)</span> <span class="token operator">+</span> b_fc        <span class="token comment" spellcheck="true"># 收集高维度变量</span>        tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token string">"w_fc"</span><span class="token punctuation">,</span> w_fc<span class="token punctuation">)</span>        tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token string">"b_fc"</span><span class="token punctuation">,</span> b_fc<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> y_true<span class="token punctuation">,</span> y_predict<span class="token keyword">def</span> <span class="token function">conv_fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取真实的数据</span>    mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>data_dir<span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义模型，得出输出</span>    x<span class="token punctuation">,</span> y_true<span class="token punctuation">,</span> y_predict <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 进行交叉熵损失计算</span>    <span class="token comment" spellcheck="true"># 3、求出所有样本的损失，然后求平均值</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"soft_cross"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 求平均交叉熵损失</span>        loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax_cross_entropy_with_logits<span class="token punctuation">(</span>labels<span class="token operator">=</span>y_true<span class="token punctuation">,</span> logits<span class="token operator">=</span>y_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、梯度下降求出损失</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"optimizer"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5、计算准确率</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"acc"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        equal_list <span class="token operator">=</span> tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_predict<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># equal_list  None个样本   [1, 0, 1, 0, 1, 1,..........]</span>        accuracy <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>equal_list<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 收集单个数字值变量</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>scalar<span class="token punctuation">(</span><span class="token string">"loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>scalar<span class="token punctuation">(</span><span class="token string">"accuracy"</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个合并变量de op</span>    merged <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>merge_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个saver</span>    saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个初始化变量的op</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启回话运行</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 建立events文件，然后写入</span>        filewriter <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>FileWriter<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>events_file_dir<span class="token punctuation">,</span> graph<span class="token operator">=</span>sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 训练</span>        <span class="token keyword">if</span> FLAGS<span class="token punctuation">.</span>is_train <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 循环去训练</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 取出真实存在的特征值和目标值</span>                mnist_x<span class="token punctuation">,</span> mnist_y <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 运行train_op训练</span>                sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_op<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> mnist_x<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> mnist_y<span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练第%d步,准确率为:%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>accuracy<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> mnist_x<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> mnist_y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 写入每步训练的值</span>                summary <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>merged<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> mnist_x<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> mnist_y<span class="token punctuation">}</span><span class="token punctuation">)</span>                filewriter<span class="token punctuation">.</span>add_summary<span class="token punctuation">(</span>summary<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 保存模型</span>            saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> FLAGS<span class="token punctuation">.</span>model_dir<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 加载模型</span>            saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> FLAGS<span class="token punctuation">.</span>model_dir<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果是0，做出预测</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 每次测试一张图片 [0,0,0,0,0,1,0,0,0,0]</span>                x_test<span class="token punctuation">,</span> y_test <span class="token operator">=</span> mnist<span class="token punctuation">.</span>test<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d张图片，手写数字图片目标是:%d, 预测结果是:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                    i<span class="token punctuation">,</span>                    tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y_predict<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_test<span class="token punctuation">,</span> y_true<span class="token punctuation">:</span> y_test<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> None<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    conv_fc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>训练执行</p><pre class=" language-bash"><code class="language-bash">python mnist.py</code></pre><p>训练结果如下：</p><pre class=" language-bash"><code class="language-bash">训练第0步,准确率为:0.060000训练第1步,准确率为:0.080000训练第2步,准确率为:0.060000训练第3步,准确率为:0.060000训练第4步,准确率为:0.040000训练第5步,准确率为:0.100000训练第6步,准确率为:0.100000训练第7步,准确率为:0.060000<span class="token punctuation">..</span>.训练第992步,准确率为:0.660000训练第993步,准确率为:0.660000训练第994步,准确率为:0.780000训练第995步,准确率为:0.780000训练第996步,准确率为:0.740000训练第997步,准确率为:0.680000训练第998步,准确率为:0.680000训练第999步,准确率为:0.640000</code></pre><p>查看tensorboard，执行</p><pre class=" language-bash"><code class="language-bash">tensorboard --logdir<span class="token operator">=</span><span class="token string">"tmp/summary/test"</span></code></pre><p>预测执行：</p><pre class=" language-bash"><code class="language-bash">python mnist.py --is_train<span class="token operator">=</span>0</code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">第0张图片，手写数字图片目标是:8, 预测结果是:8第1张图片，手写数字图片目标是:8, 预测结果是:8第2张图片，手写数字图片目标是:7, 预测结果是:7第3张图片，手写数字图片目标是:5, 预测结果是:5第4张图片，手写数字图片目标是:0, 预测结果是:0第5张图片，手写数字图片目标是:6, 预测结果是:6第6张图片，手写数字图片目标是:7, 预测结果是:7<span class="token punctuation">..</span>.第92张图片，手写数字图片目标是:3, 预测结果是:2第93张图片，手写数字图片目标是:7, 预测结果是:7第94张图片，手写数字图片目标是:0, 预测结果是:0第95张图片，手写数字图片目标是:0, 预测结果是:0第96张图片，手写数字图片目标是:8, 预测结果是:8第97张图片，手写数字图片目标是:7, 预测结果是:7第98张图片，手写数字图片目标是:7, 预测结果是:7第99张图片，手写数字图片目标是:1, 预测结果是:1</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow tf.summary变量收集</title>
      <link href="/2018/09/20/tensorflow-tf.summary-bian-liang-shou-ji/"/>
      <url>/2018/09/20/tensorflow-tf.summary-bian-liang-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>tf.summary变量收集的目的是：保存训练过程以及参数分布图并在tensorboard显示，可以收集的变量有标量、超参数变量、文本、图片、音频等。</p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p><strong>tf.summary.scalar</strong></p><p>用来显示标量信息，一般在画loss,accuary时会用到这个函数。</p><p>例如：tf.summary.scalar(‘mean’, mean)</p><p><strong>tf.summary.histogram</strong></p><p>用来显示直方图信息，一般用来显示训练过程中变量的分布情况。</p><p>例如： tf.summary.histogram(‘histogram’, var)</p><p><strong>tf.summary.distribution</strong></p><p>分布图，一般用于显示weights分布。</p><p><strong>tf.summary.text</strong></p><p>可以将文本类型的数据转换为tensor写入summary中。</p><pre class=" language-python"><code class="language-python">text <span class="token operator">=</span> <span class="token string">"hello tensorflow"</span>tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>convert_to_tensor<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>tf.summary.image</strong></p><p>输出带图像的probuf，汇总数据的图像的的形式如下： ‘ tag /image/0’, ‘ tag /image/1’…，如：input/image/0等。</p><p><strong>tf.summary.audio</strong></p><p>展示训练过程中记录的音频 。</p><p><strong>tf.summary.merge_all</strong></p><p>merge_all 可以将所有summary全部保存到磁盘，以便tensorboard显示。如果没有特殊要求，一般用这一句就可以显示训练时的各种信息了。</p><p><strong>tf.summary.FileWriter</strong></p><p>指定一个文件用来保存图，可以调用其add_summary()方法将训练过程数据保存在filewriter指定的文件中。</p><p><strong>tf.summary.merge</strong></p><p>略</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow模型保存和加载</title>
      <link href="/2018/09/17/tensorflow-mo-xing-bao-cun-he-jia-zai/"/>
      <url>/2018/09/17/tensorflow-mo-xing-bao-cun-he-jia-zai/</url>
      
        <content type="html"><![CDATA[<p>tensorflow模型保存和加载，使用模型保存和加载，模型的训练时一个非常耗时的操作，如果在训练过程中出现故障或者服务器宕机，我们也不想从头开始训练，这时，我们可以保存训练过程模型，比如每隔1000步保存一次。</p><h2 id="模型的保存与加载"><a href="#模型的保存与加载" class="headerlink" title="模型的保存与加载"></a>模型的保存与加载</h2><p><strong>为什么需要模型的保存和加载？</strong></p><p>在训练过程中，我们的训练耗时非常长，比如说需要训练1万次，训练需要5天。如果当我们训练到了第2天的时候，服务器宕机了，那等服务器开机后又需要重新开始训练，2天的训练白干了。</p><p>有了模型的保存和加载，我们可以指定每隔1000次保存依次模型，总共保存最新的5隔模型，那么当服务器宕机了，重启后，我们可以加载之间的模型训练结果，接着开始训练。</p><p>使用逻辑：</p><ul><li>首先，创建模型保存对象；</li><li>然后在训练之前，检查指定的目录下是否存在模型文件，如果存在就加载模型文件；</li><li>最后，在训练过程中，指定策略去保存模型。</li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>创建模型保存对象</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span>var_list<span class="token operator">=</span>None<span class="token punctuation">,</span>max_to_keep<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li>var_list:指定将要保存和还原的变量。它可以作为一个dict或一个列表传递.</li><li>max_to_keep：指示要保留的最近检查点文件的最大数量。创建新文件时，会删除较旧的文件。如果无或0，则保留所有检查点文件。默认为5（即保留最新的5个检查点文件。）</li></ul><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><p><strong>模型保存</strong></p><pre class=" language-python"><code class="language-python">saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'/tmp/ckpt/model'</span><span class="token punctuation">)</span></code></pre><p>我们需要指定模型的名称，这里我们取名为model。说明：模型保存文件格式：checkpoint文件，在我们保存模型成功后，在其目录下会有一个checkpoint文件。</p><p><strong>模型加载</strong></p><pre class=" language-python"><code class="language-python">saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'/tmp/ckpt/model'</span><span class="token punctuation">)</span></code></pre><p>在训练之前，我们可以检查以下我们是有存在checkpoint文件，如果有checkpoint文件，我们可以加载模型，接着之前训练的结果进行训练。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token keyword">def</span> <span class="token function">mymigration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">1.75</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">)</span>        y_true <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.8</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"model"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>        y_predict <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weight<span class="token punctuation">)</span> <span class="token operator">+</span> bias    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"loss"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_true<span class="token operator">-</span> y_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"optimizer"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>scalar<span class="token punctuation">(</span><span class="token string">"losses"</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span><span class="token string">"weights"</span><span class="token punctuation">,</span> weight<span class="token punctuation">)</span>    merged <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>merge_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1、创建模型对象</span>    saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span>var_list<span class="token operator">=</span>None<span class="token punctuation">,</span>max_to_keep<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 2、定义模型保存文件 </span>      filewritter <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>FileWriter<span class="token punctuation">(</span><span class="token string">'logs/'</span><span class="token punctuation">,</span> graph<span class="token operator">=</span>sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"随机最先初始化的权重和偏置：权重为:%f, 偏置为:%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>weight<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 训练之前先检查一下是否有模型文件，如果有，加载模型，接着该模型进行训练。</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"tmp/ckpt/checkpoint"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'tmp/ckpt/model'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_op<span class="token punctuation">)</span>            summary <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>merged<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 3、写入事件文件</span>            filewritter<span class="token punctuation">.</span>add_summary<span class="token punctuation">(</span>summary<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d次优化的权重和偏置：权重为:%f, 偏置为:%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> weight<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 4、保存模型</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">'tmp/ckpt/model'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> None<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    mymigration<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>## </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow线程和队列</title>
      <link href="/2018/09/15/tensorflow-xian-cheng-he-dui-lie/"/>
      <url>/2018/09/15/tensorflow-xian-cheng-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>tensorflow线程和队列。</p><h2 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h2><p>tensorflow有两种队列：</p><ul><li><p>tf.FIFOQueue：先进先出队列，按顺序出队列</p></li><li><p>tf.RandomShuffleQueue：随机出队列</p></li></ul><p>两个API的使用基本差不多，我们以FIFOQueue为例说明。</p><h3 id="先进先出队列：FIFOQueue"><a href="#先进先出队列：FIFOQueue" class="headerlink" title="先进先出队列：FIFOQueue"></a>先进先出队列：FIFOQueue</h3><p>API</p><pre class=" language-python"><code class="language-python">FIFOQueue<span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> dtypes<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'fifo_queue'</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><p>capacity：整数。可能存储在此队列中的元素数量的上限。</p></li><li><p>dtypes：DType对象列表。长度dtypes必须等于每个队列元素中的张量数,dtype的类型形状，决定了后面进队列元素形状。</p></li></ul><p>相关方法</p><ul><li><p>dequeue(name=None)：出队列</p></li><li><p>enqueue(vals, name=None)：入队列</p></li><li><p>enqueue_many(vals, name=None)：入队列，vals为列表或者元组</p></li><li><p>size(name=None)：队列元素大小</p></li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 1、定义队列,队列长度为3，数据类型为tf.float32</span>Q <span class="token operator">=</span> tf<span class="token punctuation">.</span>FIFOQueue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往队列中放入数据</span>enq_many <span class="token operator">=</span> Q<span class="token punctuation">.</span>enqueue_many<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、定义读数据、取数据的过程、取数据+1，入队列</span><span class="token comment" spellcheck="true"># 出队列</span>de_q<span class="token operator">=</span> Q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 + 1</span>data <span class="token operator">=</span> de_q <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 入队列</span>en_q <span class="token operator">=</span> Q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化队列</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>enq_many<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 处理数据，执行100次操作</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># tensorflow的操作有依赖性</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>en_q<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将队列中的数据都打印出来</span>    <span class="token comment" spellcheck="true"># 获取队列长度</span>    size <span class="token operator">=</span> Q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"队列大小:"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>Q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">队列大小: 333.233.334.1</code></pre><p>说明：tensor的操作有依赖性。</p><h2 id="队列管理器QueueRunner"><a href="#队列管理器QueueRunner" class="headerlink" title="队列管理器QueueRunner"></a>队列管理器QueueRunner</h2><p>什么是队列管理器？</p><p>我们可以把我们的队列放到队列管理器中，并创建一个线程来运行我们的队列。</p><p>API</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>QueueRunner<span class="token punctuation">(</span>queue<span class="token punctuation">,</span> enqueue_ops<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><p>queue：A Queue</p></li><li><p>enqueue_ops：添加线程的队列操作列表，[]*2,指定两个线程</p></li></ul><p>相关方法</p><p>create_threads(sess, coord=None,start=False)：创建线程来运行给定会话的入队操作</p><p>参数说明：</p><ul><li><p>start：布尔值，如果True启动线程；如果为False调用者必须调用start()启动线程</p></li><li><p>coord：线程协调器，后面线程管理需要用到</p></li><li><p>return：线程的实例</p></li></ul><h2 id="线程Thread"><a href="#线程Thread" class="headerlink" title="线程Thread"></a>线程Thread</h2><p>线程涉及到2个核心概念：队列管理器和线程协调器。</p><h3 id="线程协调器Coordinator"><a href="#线程协调器Coordinator" class="headerlink" title="线程协调器Coordinator"></a>线程协调器Coordinator</h3><p>什么是线程协调器？</p><p>用来协调子线程和主线程，当我们在会话中开启子线程去做一些事情的时候，我们的会话执行完了，但是子线程还在运行，可是子线程的运行必须依赖会话，所以就会报错。有了线程协调器，我们可以在会话中等待子线程运行结束。</p><p>API</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>相关方法</p><ul><li><p>request_stop()：请求停止，等待子线程运行结束后停止。</p></li><li><p>should_stop()：检查是否要求停止，立即停止。</p></li><li><p>join(threads=None, stop_grace_period_secs=120) ：将子线程加入Coordinator，等待线程终止进行回收。</p></li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 1、定义1个队列，可以放1000个数据</span>Q <span class="token operator">=</span> tf<span class="token punctuation">.</span>FIFOQueue<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、定义要做的事情</span><span class="token comment" spellcheck="true"># 新建变量</span>var  <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变量+1</span>data <span class="token operator">=</span> tf<span class="token punctuation">.</span>assign_add<span class="token punctuation">(</span>var<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 入队</span>en_q <span class="token operator">=</span> Q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、定义队列管理器op, 指定多少个子线程，子线程该干什么事</span>qr <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>QueueRunner<span class="token punctuation">(</span>Q<span class="token punctuation">,</span> enqueue_ops<span class="token operator">=</span><span class="token punctuation">[</span>en_q<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 线程协调器、线程管理员</span>    coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 真正开启子线程,去做那些事</span>    threads <span class="token operator">=</span> qr<span class="token punctuation">.</span>create_threads<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 主线程，不断的去从队列中读取数据</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>Q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 回收子线程</span>    coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">12.030.046.060.071.084.0100.0114.0126.0<span class="token punctuation">..</span>.1283.01284.01285.01286.01287.01288.0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow文件操作</title>
      <link href="/2018/09/15/tensorflow-wen-jian-cao-zuo/"/>
      <url>/2018/09/15/tensorflow-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>tensorflow文件操作，包含读取csv文件、csv文件集、图片、二进制文件以及TFRecords文件读取。</p><h2 id="读取csv文件"><a href="#读取csv文件" class="headerlink" title="读取csv文件"></a>读取csv文件</h2><p>读取文件的步骤：</p><ul><li>构建文件队列</li><li>构建一个csv阅读器，用来读取数据</li><li>开始读取数据</li><li>文件解码</li><li>创建线程循环开始真正读取数据</li></ul><h3 id="读取单个csv文件"><a href="#读取单个csv文件" class="headerlink" title="读取单个csv文件"></a>读取单个csv文件</h3><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token keyword">def</span> <span class="token function">file_len</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""   获取文件的长度，也就是有多少行    """</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> l <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># i为行，从0开始，l为每行的内容，</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># i还在内存中，可以直接调用</span><span class="token keyword">def</span> <span class="token function">readcsv</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取csv文件    """</span>    <span class="token comment" spellcheck="true"># 1、构造一个读取文件的队列</span>    filename_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span><span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构建一个csv阅读器，去读取数据</span>    <span class="token comment" spellcheck="true"># csv文件是一行一行的读取，`skip_header_lines=0`表示是否跳过行首，也就是说行首是否也读取。</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TextLineReader<span class="token punctuation">(</span>skip_header_lines<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、开始读取数据，返回2个值，第一个值为行号，第二个值为内容</span>    _<span class="token punctuation">,</span> csv_row <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>filename_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、文件解码setup CSV decoding</span>    <span class="token comment" spellcheck="true"># `record_defaults`表示每一个字段的数据类型。如果是整数类型，写`0`；如果是浮点类型，写`0.0`；如果是字符串类型，写`"None"`、`"null"`等。</span>    record_defaults <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"None"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">,</span>label <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_csv<span class="token punctuation">(</span>csv_row<span class="token punctuation">,</span> record_defaults<span class="token operator">=</span>record_defaults<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 转化为张量</span>    features <span class="token operator">=</span> tf<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loading, "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>file_length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" line(s)\n"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> features<span class="token punctuation">,</span> label<span class="token comment" spellcheck="true"># 要读取的数据文件</span>filename <span class="token operator">=</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/11-csv1/a1.csv"</span><span class="token comment" spellcheck="true"># 获取文件长度</span>file_length <span class="token operator">=</span> file_len<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取文件</span>features<span class="token punctuation">,</span>label <span class="token operator">=</span> readcsv<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5、创建一个线程协调器，然后启动线程</span>    coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环读取</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>file_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        re_feature<span class="token punctuation">,</span> re_label <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>features<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>re_feature<span class="token punctuation">,</span> re_label<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取结束后，关闭session、关闭线程</span>    coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">loading, 10 line<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>   1   10  100 1000<span class="token punctuation">]</span> b<span class="token string">'train'</span><span class="token punctuation">[</span>   2   11  101 1001<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>   3   12  102 1002<span class="token punctuation">]</span> b<span class="token string">'train'</span><span class="token punctuation">[</span>   4   13  103 1003<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>   5   14  104 1004<span class="token punctuation">]</span> b<span class="token string">'subway'</span><span class="token punctuation">[</span>   6   15  105 1005<span class="token punctuation">]</span> b<span class="token string">'subway'</span><span class="token punctuation">[</span>   7   16  106 1006<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>   8   17  107 1007<span class="token punctuation">]</span> b<span class="token string">'train'</span><span class="token punctuation">[</span>   9   18  108 1008<span class="token punctuation">]</span> b<span class="token string">'bike'</span><span class="token punctuation">[</span>  10   19  109 1009<span class="token punctuation">]</span> b<span class="token string">'subway'</span></code></pre><h3 id="读取csv文件集"><a href="#读取csv文件集" class="headerlink" title="读取csv文件集"></a>读取csv文件集</h3><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">csvread</span><span class="token punctuation">(</span>filelist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取CSV文件    :param filelist: 文件路径+名字的列表    :return: 读取的内容    """</span>    <span class="token comment" spellcheck="true"># 1、构造文件的队列</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造csv阅读器读取队列数据（按一行）</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TextLineReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取数据，key为行号，value为每一行的内容</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、对每行内容解码</span>    <span class="token comment" spellcheck="true"># record_defaults:指定每一个样本的每一列的类型，指定默认值[["None"], [4.0]]</span>    records <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"None"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    example<span class="token punctuation">,</span> label <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_csv<span class="token punctuation">(</span>value<span class="token punctuation">,</span> record_defaults<span class="token operator">=</span>records<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 想要读取多个数据，就需要批处理</span>    <span class="token comment" spellcheck="true"># 一般capacity设置和batch_size一样，或者比它大。</span>    example_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>example<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> example_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 需要读取的csv文件列表</span>    file_name <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"/Users/zhusheng/WorkSpace/Dataset/11-csv1/csv_list/"</span><span class="token punctuation">)</span>    filelist <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"/Users/zhusheng/WorkSpace/Dataset/11-csv1/csv_list/"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> file_name<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 读取csv文件列表</span>    example_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> csvread<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5、开启子线程读取数据</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印获取的数据</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>example_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'a1'</span>, b<span class="token string">'a2'</span>, b<span class="token string">'a3'</span>, b<span class="token string">'a4'</span>, b<span class="token string">'a5'</span>, b<span class="token string">'a6'</span>, b<span class="token string">'a7'</span>, b<span class="token string">'a8'</span>, b<span class="token string">'a9'</span><span class="token punctuation">]</span>,      dtype<span class="token operator">=</span>object<span class="token punctuation">)</span>, array<span class="token punctuation">(</span><span class="token punctuation">[</span>20, 21, 22, 23, 24, 25, 26, 27, 28<span class="token punctuation">]</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h2 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h2><h3 id="图像三要素"><a href="#图像三要素" class="headerlink" title="图像三要素"></a>图像三要素</h3><p>图像三要素：长度(height)、宽度(width)、通道数(channels)，我们可以使用一个3-D张量来表示：</p><p>[height,width,channels]</p><p>说明：通道数为1，表示灰度值；通道数为3，表示RGB。</p><p>一般在拿到图片数据集后，我们都会对图片进行一些处理，指定3-D的shape大小，我们会将所有的图片进行缩放处理，变成统一大小的图片。</p><p>在处理图片数据的时候，我们最后会把数据包装成4-D张量：[nums,height,width,channels]，如下所示：</p><pre class=" language-bash"><code class="language-bash">Tensor<span class="token punctuation">(</span><span class="token string">"batch:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>300, 200, 200, 1<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span> </code></pre><p>分别表示batch_size、weight、width、channel。</p><p>读取文件的步骤：</p><ul><li>构建文件队列</li><li>构建阅读器，用来读取数据</li><li>开始读取数据</li><li>文件解码，可以使用批处理</li><li>创建线程循环开始真正读取数据</li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">pictureRead</span><span class="token punctuation">(</span>filelist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1、构造文件队列</span>    queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造阅读器去读取图片内容（默认读取一张图片）</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>WholeFileReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、读取数据</span>    key<span class="token punctuation">,</span>value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、解码</span>    images <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>decode_jpeg<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解码："</span><span class="token punctuation">,</span>images<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 统一图片大小</span>    images_resize <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>resize_images<span class="token punctuation">(</span>images<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"resize:"</span><span class="token punctuation">,</span>images_resize<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在批处理的时候要求所有数据形状必须定义</span>    <span class="token comment" spellcheck="true"># 如果是RGB图片，设置成[200, 200, 3]</span>    images_resize<span class="token punctuation">.</span>set_shape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"set_shape:"</span><span class="token punctuation">,</span>images_resize<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 批处理,获得4D tensor， 第一个为样本数量</span>    images_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>images_resize<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"批处理："</span><span class="token punctuation">,</span> images_batch<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">return</span> images_batch<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 图片列表路径</span>    dir_mstar <span class="token operator">=</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/8-MSTAR/MSTAR/EOC-data/train/2S1-b01/"</span>    filenames <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_mstar<span class="token punctuation">)</span>    filelist <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_mstar<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> filenames<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#print("文件列表：",filelist)</span>    images_batch <span class="token operator">=</span> pictureRead<span class="token punctuation">(</span>filelist<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化变量</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5、开启线程去读取图片</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        result <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>images_batch<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"读取结果："</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回收线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">解码： <span class="token punctuation">(</span>?, ?, ?<span class="token punctuation">)</span>resize: <span class="token punctuation">(</span>200, 200, ?<span class="token punctuation">)</span>set_shape: <span class="token punctuation">(</span>200, 200, 1<span class="token punctuation">)</span>批处理： <span class="token punctuation">(</span>300, 200, 200, 1<span class="token punctuation">)</span>读取结果： <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> 67.      <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 95.44    <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 61.819996<span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 31.029907<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 31.139969<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 41.      <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>105.71001 <span class="token punctuation">]</span>   <span class="token punctuation">[</span>134.7741  <span class="token punctuation">]</span>   <span class="token punctuation">[</span>104.985596<span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 55.43302 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 59.40616 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 73.39    <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> 88.74    <span class="token punctuation">]</span>   <span class="token punctuation">[</span>120.260994<span class="token punctuation">]</span>   <span class="token punctuation">[</span>100.8464  <span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 96.37775 <span class="token punctuation">]</span>   <span class="token punctuation">[</span>101.66196 <span class="token punctuation">]</span>   <span class="token punctuation">[</span>115.06    <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">..</span>.  <span class="token punctuation">[</span><span class="token punctuation">[</span> 40.26001 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.7946  <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 51.09242 <span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 51.583595<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 56.35912 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 60.680176<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> 43.939987<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.572002<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 48.927616<span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 51.57547 <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 60.403603<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 67.70003 <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> 48.      <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.05    <span class="token punctuation">]</span>   <span class="token punctuation">[</span> 44.16    <span class="token punctuation">]</span>   <span class="token punctuation">..</span>.   <span class="token punctuation">[</span> 43.670044<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 52.039978<span class="token punctuation">]</span>   <span class="token punctuation">[</span> 59.      <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h2 id="读取二进制文件"><a href="#读取二进制文件" class="headerlink" title="读取二进制文件"></a>读取二进制文件</h2><p>我们这里的示例数据集为cifar-10，该数据集是一个图片数据集。</p><p>下载后的数据集为二进制格式，如下所示：</p><p><img src="/images/image-20190813232143691.png" alt=""></p><p>读取文件的步骤：</p><ul><li>构建文件队列</li><li>构建阅读器，用来读取数据</li><li>开始读取数据</li><li>文件解码，可以使用批处理</li><li>创建线程循环开始真正读取数据</li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token triple-quoted-string string">"""读取二进制文件"""</span><span class="token comment" spellcheck="true"># 自定义命令行参数</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin"</span><span class="token punctuation">,</span> <span class="token string">"文件的目录"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图片的基本数据</span>height <span class="token operator">=</span> <span class="token number">32</span>width <span class="token operator">=</span> <span class="token number">32</span>channel <span class="token operator">=</span> <span class="token number">3</span>label_bytes <span class="token operator">=</span> <span class="token number">1</span>image_bytes <span class="token operator">=</span> height <span class="token operator">*</span> width <span class="token operator">*</span> channelbytes <span class="token operator">=</span> label_bytes <span class="token operator">+</span> image_bytes<span class="token keyword">def</span> <span class="token function">read_and_decode</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取二进制文件    :return:    """</span>    <span class="token comment" spellcheck="true"># 1、构造文件队列</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造二进制文件读取器，读取内容, 每个样本的字节数</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>FixedLengthRecordReader<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、读取数据</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"value:"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、解码内容, 二进制文件内容的解码</span>    label_image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>value<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"label_image:"</span><span class="token punctuation">,</span> label_image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分割出图片和标签数据，切出特征值和目标值</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>label<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    image <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>image_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"label:"</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image:"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可以对图片的特征数据进行形状的改变 [3072] --> [32, 32, 3]</span>    image_reshape <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">[</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> channel<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image_reshape:"</span><span class="token punctuation">,</span> image_reshape<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 批处理数据,总样本数为10000 *5 = 50000，为了节省运行时间，我改为100</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>image_reshape<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image_batch:"</span><span class="token punctuation">,</span> image_batch<span class="token punctuation">,</span> <span class="token string">"\nlabel_batch:"</span><span class="token punctuation">,</span> label_batch<span class="token punctuation">)</span>    <span class="token keyword">return</span> image_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 找到文件，放入列表   路径+名字  ->列表当中</span>    file_name <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 下载的数据集中，有一个test_batch.bin，我改了一下名称为test_batch.binn,方便删选,取出后缀为bin的文件</span>    file_list <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> file_name <span class="token keyword">if</span> file<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"bin"</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取数据</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> read_and_decode<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启会话运行结果</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5、定义一个线程协调器， 开启读文件的线程</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 读取内容</span>        result <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印读取的结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打印读取的结果："</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回收子线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_3.bin'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_2.bin'</span>,  <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_1.bin'</span>,  <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_5.bin'</span>, <span class="token string">'/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin/data_batch_4.bin'</span><span class="token punctuation">]</span>value: Tensor<span class="token punctuation">(</span><span class="token string">"ReaderReadV2:1"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, dtype<span class="token operator">=</span>string<span class="token punctuation">)</span>label_image: Tensor<span class="token punctuation">(</span><span class="token string">"DecodeRaw:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>?,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>label: Tensor<span class="token punctuation">(</span><span class="token string">"Cast:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>1,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>image: Tensor<span class="token punctuation">(</span><span class="token string">"Slice_1:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>3072,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>image_reshape: <span class="token punctuation">(</span>32, 32, 3<span class="token punctuation">)</span>image_batch: Tensor<span class="token punctuation">(</span><span class="token string">"batch:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>100, 32, 32, 3<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span> label_batch: Tensor<span class="token punctuation">(</span><span class="token string">"batch:1"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>100, 1<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>打印读取的结果： <span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>255, 252, 253<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>250, 238, 233<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>245, 241, 232<span class="token punctuation">]</span>,         <span class="token punctuation">..</span>.,         <span class="token punctuation">[</span>175, 158, 169<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>172, 179, 176<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>164, 152, 163<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>, array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>8<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>5<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>5<span class="token punctuation">]</span>,<span class="token punctuation">..</span>.       <span class="token punctuation">[</span>6<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>3<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>4<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>4<span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h2 id="TFRecords文件读写操作"><a href="#TFRecords文件读写操作" class="headerlink" title="TFRecords文件读写操作"></a>TFRecords文件读写操作</h2><h3 id="TFRecords介绍"><a href="#TFRecords介绍" class="headerlink" title="TFRecords介绍"></a>TFRecords介绍</h3><p>TFRecords是Tensorflow设计的一种<code>内置文件格式</code>，是一种<code>二进制文件</code>，它能更好的利用内存，方便进行数据的复制和移动。</p><p>TFRecords存储的文件格式为：<code>*.tfrecords</code>，文件写入的内容为：<code>Example协议块</code>。目的是为了将二进制数据和标签(训练的类别标签)数据存储在同一个文件中。</p><h3 id="TFRecords写入"><a href="#TFRecords写入" class="headerlink" title="TFRecords写入"></a>TFRecords写入</h3><ol><li><p>构造存储器</p></li><li><p>构造每一个样本的Example</p></li><li><p>写入序列化的Example</p></li></ol><p>下面的案例是读取二进制文件数据集，然后将读取的内容存储为tfrecords文件格式。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 定义cifar的数据等命令行参数</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin"</span><span class="token punctuation">,</span> <span class="token string">"文件的目录"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tmp子目录需要自己创建</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/tmp/cifar.tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"存进tfrecords的文件"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图片的基本数据</span>height <span class="token operator">=</span> <span class="token number">32</span>width <span class="token operator">=</span> <span class="token number">32</span>channel <span class="token operator">=</span> <span class="token number">3</span>label_bytes <span class="token operator">=</span> <span class="token number">1</span>image_bytes <span class="token operator">=</span> height <span class="token operator">*</span> width <span class="token operator">*</span> channelbytes <span class="token operator">=</span> label_bytes <span class="token operator">+</span> image_bytes<span class="token keyword">def</span> <span class="token function">read_and_decode</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取二进制文件    :return:    """</span>    <span class="token comment" spellcheck="true"># 1、构造文件队列</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、构造二进制文件读取器，读取内容, 每个样本的字节数</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>FixedLengthRecordReader<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、解码内容, 二进制文件内容的解码</span>    label_image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>value<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4、分割出图片和标签数据，切出特征值和目标值</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>label<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    image <span class="token operator">=</span> tf<span class="token punctuation">.</span>slice<span class="token punctuation">(</span>label_image<span class="token punctuation">,</span> <span class="token punctuation">[</span>label_bytes<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>image_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5、可以对图片的特征数据进行形状的改变 [3072] --> [32, 32, 3]</span>    image_reshape <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">[</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> channel<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image_reshape"</span><span class="token punctuation">,</span> image_reshape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6、批处理数据,总样本数为10000 *5 = 50000，为了节省运行时间，我改为100</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>image_reshape<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> image_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">def</span> <span class="token function">convert_to_tfrecords</span><span class="token punctuation">(</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将图片的特征值和目标值存进tfrecords    :param image_batch:    :param label_batch:    :return:    """</span>    <span class="token comment" spellcheck="true"># 1、建立TFRecords存储器</span>    writer <span class="token operator">=</span> tf<span class="token punctuation">.</span>python_io<span class="token punctuation">.</span>TFRecordWriter<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、循环将所有样本写入文件中，每张图片都要构造example协议</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 取出第i个图片的数据的特征值和目标值</span>        image <span class="token operator">=</span> image_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span>        label <span class="token operator">=</span> int<span class="token punctuation">(</span>label_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构造一个样本的example</span>        example <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Example<span class="token punctuation">(</span>features<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Features<span class="token punctuation">(</span>feature<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"image"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>bytes_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>BytesList<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>image<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"label"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>int64_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Int64List<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 写入单独的样本</span>        writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>example<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    file_name <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">)</span>    file_list <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> file_name <span class="token keyword">if</span> file<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"bin"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 读取二进制数据</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> read_and_decode<span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启会话运行结果</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义一个线程协调器</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开启读文件的线程</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印读取的内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将数据存储到TFRecords存储器中</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始存储"</span><span class="token punctuation">)</span>        convert_to_tfrecords<span class="token punctuation">(</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">,</span> FLAGS<span class="token punctuation">.</span>cifar_tfrecords<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束存储"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回收子线程</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">label Tensor<span class="token punctuation">(</span><span class="token string">"Cast:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>1,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>image Tensor<span class="token punctuation">(</span><span class="token string">"Slice_1:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>3072,<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>image_reshape Tensor<span class="token punctuation">(</span><span class="token string">"Reshape:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>32, 32, 3<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> 59,  43,  50<span class="token punctuation">]</span>,         <span class="token punctuation">[</span> 68,  98, 119<span class="token punctuation">]</span>,         <span class="token punctuation">[</span>139, 145, 149<span class="token punctuation">]</span>,         <span class="token punctuation">..</span>.,         <span class="token punctuation">[</span>  0,   0,   1<span class="token punctuation">]</span>,         <span class="token punctuation">[</span> 14,   8,  10<span class="token punctuation">]</span>,         <span class="token punctuation">[</span> 47, 111, 160<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span>, array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>6<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>9<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>9<span class="token punctuation">]</span>,<span class="token punctuation">..</span>.       <span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>1<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>4<span class="token punctuation">]</span>,       <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span>, dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span><span class="token punctuation">]</span>开始存储结束存储</code></pre><h3 id="TFRecords读取"><a href="#TFRecords读取" class="headerlink" title="TFRecords读取"></a>TFRecords读取</h3><ol><li>构造TFRecords阅读器</li><li>解析Example</li><li>转换格式，bytes解码</li></ol><p>根据上面存储的tfrecords文件，读取该文件的内容，示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 定义cifar的数据等命令行参数</span>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_dir"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/cifar-10-batches-bin"</span><span class="token punctuation">,</span> <span class="token string">"文件的目录"</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">"cifar_tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"/Users/zhusheng/WorkSpace/Dataset/3-cifar-10/tmp/cifar.tfrecords"</span><span class="token punctuation">,</span> <span class="token string">"存进tfrecords的文件"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_from_tfrecords</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读取tfrecords    :return: None    """</span>    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1、构造TFRecords阅读器</span>    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TFRecordReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2、解析Example</span>    features <span class="token operator">=</span> tf<span class="token punctuation">.</span>parse_single_example<span class="token punctuation">(</span>value<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">"image"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"label"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3、转换格式，bytes解码</span>    image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置静态形状</span>    image<span class="token punctuation">.</span>set_shape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("image:",image)</span>    <span class="token comment" spellcheck="true"># image: Tensor("DecodeRaw:0", shape=(3072,), dtype=uint8)</span>    <span class="token comment" spellcheck="true"># 可用于转换动态形状</span>    image_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("image_tensor:",image_tensor)</span>    <span class="token comment" spellcheck="true"># image_tensor: Tensor("Reshape:0", shape=(32, 32, 3), dtype=uint8)</span>    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("label:",label)</span>    <span class="token comment" spellcheck="true"># label: Tensor("Cast:0", shape=(), dtype=int32)</span>    <span class="token comment" spellcheck="true"># 批处理</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>image_tensor<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("image_batch:",image_batch)</span>    <span class="token comment" spellcheck="true">#print("label_batch:",label_batch)</span>    <span class="token comment" spellcheck="true"># image_batch: Tensor("batch:0", shape=(10, 32, 32, 3), dtype=uint8)</span>    <span class="token comment" spellcheck="true"># label_batch: Tensor("batch:1", shape=(10,), dtype=int32)</span>    <span class="token keyword">return</span> image_batch<span class="token punctuation">,</span> label_batch<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从TFRecord文件中读取数据，首先得有这个文件。</span>    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> read_from_tfrecords<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>cifar_tfrecords<span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        coord <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Coordinator<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>start_queue_runners<span class="token punctuation">(</span>sess<span class="token operator">=</span>sess<span class="token punctuation">,</span> coord<span class="token operator">=</span>coord<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印读取的结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow激活函数</title>
      <link href="/2018/09/10/tensorflow-ji-huo-han-shu/"/>
      <url>/2018/09/10/tensorflow-ji-huo-han-shu/</url>
      
        <content type="html"><![CDATA[<p>参考链接1：<a href="https://blog.csdn.net/u014595019/article/details/52562159" target="_blank" rel="noopener">https://blog.csdn.net/u014595019/article/details/52562159</a></p><p>参考链接2:<a href="https://blog.csdn.net/qq_23304241/article/details/80300149" target="_blank" rel="noopener">https://blog.csdn.net/qq_23304241/article/details/80300149</a></p><h2 id="什么是激活函数"><a href="#什么是激活函数" class="headerlink" title="什么是激活函数"></a>什么是激活函数</h2><p>关于激活函数，首先要搞清楚的问题是，激活函数是什么，有什么用？不用激活函数可不可以？答案是不可以。</p><p>激活函数的主要作用是提供网络的非线性建模能力。如果没有激活函数，那么该网络仅能够表达线性映射，此时即便有再多的隐藏层，其整个网络跟单层神经网络也是等价的。因此也可以认为，只有加入了激活函数之后，深度神经网络才具备了分层的非线性映射学习能力。 那么激活函数应该具有什么样的性质呢？</p><ul><li>可微性： 当优化方法是基于梯度的时候，这个性质是必须的。 </li><li>单调性： 当激活函数是单调的时候，单层网络能够保证是凸函数。 </li><li>输出值的范围： 当激活函数输出值是 有限 的时候，基于梯度的优化方法会更加 稳定，因为特征的表示受有限权值的影响更显著;当激活函数的输出是 无限 的时候，模型的训练会更加高效，不过在这种情况小，一般需要更小的learning rate。</li></ul><p>从目前来看，常见的激活函数多是<strong>分段线性</strong>和<strong>具有指数形状的非线性函数</strong>。</p><h2 id="激活函数分类"><a href="#激活函数分类" class="headerlink" title="激活函数分类"></a>激活函数分类</h2><p>激活函数可以分为<code>饱和激活函数</code>和<code>非饱和激活函数</code>。</p><ul><li>饱和激活函数。 tanh、Sigmoid、…</li><li>非饱和激活函数。 ReLU、ELU、Leaky ReLU、RReLU、RReLU、…</li></ul><h3 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h3><p>sigmoid 是使用范围最广的一类激活函数，具有指数函数形状，它在物理意义上最为接近生物神经元。此外，(0, 1) 的输出还可以被表示作概率，或用于输入的归一化，代表性的如Sigmoid交叉熵损失函数。</p><p>公式如下：<br>$$<br>f(x) = \frac{1}{1 + e^{-x}}<br>$$<br>绘制sigmoid曲线示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 绘制Sigmoid标准曲线</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#这个表示在-5到5之间生成1000个x值</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#对上述生成的1000个数循环用sigmoid公式求对应的y</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置取值范围</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.00</span><span class="token punctuation">,</span><span class="token number">1.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置刻度</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'darkblue'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#用上述生成的1000个xy值对生成1000个点</span>ax<span class="token operator">=</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#删除右边框设为无</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#删除上边框设为无</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#调整x轴位置</span>ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#调整y轴位置</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置x轴标签</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>运行结果如下：</p><p><img src="/images/image-20190814090157320.png" alt=""></p><p>然而，sigmoid也有其自身的缺陷，最明显的就是饱和性。从上图可以看到，其两侧导数逐渐趋近于0，也就是𝑥→+∞或𝑥→−∞，函数的导数为0，公式表示如下：<br>$$<br>\lim_{x\rightarrow\infty}{f^{‘}(x) = 0}<br>$$<br>具有这种性质的称为<strong>软饱和激活函数</strong>。具体的，饱和又可分为左饱和与右饱和。与软饱和对应的是硬饱和, 即：<br>$$<br>f^{‘}(x)=0, 当|x|&gt;c, c为常数<br>$$<br>sigmoid的软饱和性，使得深度神经网络在二三十年里一直难以有效的训练，是阻碍神经网络发展的重要原因。</p><p>具体来说，由于在后向传递过程中，sigmoid向下传导的梯度包含了一个 f′(x)因子（sigmoid关于输入的导数），因此一旦输入落入饱和区，f′(x) 就会变得接近于0，导致了向底层传递的梯度也变得非常小。此时，网络参数很难得到有效训练。这种现象被称为梯度消失。一般来说， sigmoid 网络在5层之内就会产生梯度消失现象。</p><p>此外，sigmoid函数的输出均大于0，使得输出不是0均值，这称为偏移现象，这会导致后一层的神经元将得到上一层输出的非0均值的信号作为输入。</p><h3 id="Tanh"><a href="#Tanh" class="headerlink" title="Tanh"></a>Tanh</h3><p>tanh也是一种非常常见的激活函数。输出值范围(-1,1),与sigmoid相比，它的输出均值是0，使得其收敛速度要比sigmoid快，减少迭代次数。</p><p>公式如下：<br>$$<br>f(x) = \frac{1- e^{-2x}}{1+e^{-2x}}<br>$$<br>绘制Tanh和Sigmoid曲线示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mplmpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>y <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span>tanh <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>sigmoid<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置取值区间</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># </span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置刻度</span>ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># </span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"Sigmoid"</span><span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 绘制sigmoid曲线，并添加图例效果</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">,</span>tanh<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"Tanh"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 绘制tanh曲线，并添加图例效果</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><p><img src="/images/image-20190814091120437.png" alt=""></p><p>从图中可以看出，tanh和Sigmoid一样，也具有软饱和性，在$x\rightarrow\infty$时从而造成梯度消失。</p><h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p>ReLU家族包含很多激活函数：ReLU、ELU、P-ReLU、Leaky-ReLU、R-ReLU，其它都是基于ReLU作出的各种变体或改造。</p><p>ReLU的全称是Rectified Linear Units，是一种后来才出现的激活函数。 公式如下：<br>$$<br>f(x)=\begin{cases}<br>x &amp; x\geq0 \<br>0 &amp; x&lt;0\<br>\end{cases}<br>$$<br>可以看到，当x&lt;0时，ReLU硬饱和，而当x&gt;0时，则不存在饱和问题。所以，ReLU 能够在x&gt;0时保持梯度不衰减，从而缓解梯度消失问题。这让我们能够直接以监督的方式训练深度神经网络，而无需依赖无监督的逐层预训练。</p><p>ReLU函数代表的的是“修正线性单元”，它是带有卷积图像的输入x的最大函数(x,0)。ReLU函数将矩阵x内所有负值都设为零，其余的值不变。ReLU函数的计算是在卷积之后进行的，因此它与tanh函数和sigmoid函数一样，同属于“非线性激活函数”。这一内容是由Geoff Hinton首次提出的。</p><p>ReLU 的缺点： 训练的时候很”脆弱”，很容易就”die”了。例如，一个非常大的梯度流过一个 ReLU 神经元，更新过参数之后，这个神经元再也不会对任何数据有激活现象了，那么这个神经元的梯度就永远都会是0。如果 learning rate 很大，那么很有可能网络中的 40% 的神经元都”dead”了。</p><p>如下是ReLU、Leaky ReLU、PReLU和RReLU的比较:</p><p><img src="/images/image-20190814091757459.png" alt=""></p><h3 id="Maxout"><a href="#Maxout" class="headerlink" title="Maxout"></a>Maxout</h3><p>maxout是通过分段线性函数来拟合所有可能的凸函数来作为激活函数的，但是由于线性函数是可学习，所以实际上是可以学出来的激活函数。具体操作是对所有线性取最大，也就是把若干直线的交点作为分段的界，然后每一段取最大。</p><p>maxout可以看成是relu家族的一个推广。</p><p>缺点在于增加了参数量。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow设置</title>
      <link href="/2018/09/10/tensorflow-she-zhi/"/>
      <url>/2018/09/10/tensorflow-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>tensorflow设置，比如一些参数设置等。</p><h2 id="log-device-placement"><a href="#log-device-placement" class="headerlink" title="log_device_placement"></a>log_device_placement</h2><p>它是Session的一个参数，设置该参数<em>log_device_placement=True</em>，让我们可以看到我们的tensor、op是在哪台设备、哪颗CPU上运行的。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 创建tensor</span>a <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建op</span>sum <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过Session执行graph</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span>config<span class="token operator">=</span>tf<span class="token punctuation">.</span>ConfigProto<span class="token punctuation">(</span>log_device_placement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">Device mapping: no known devices.Add: <span class="token punctuation">(</span>Add<span class="token punctuation">)</span>: /job:localhost/replica:0/task:0/device:CPU:0Const: <span class="token punctuation">(</span>Const<span class="token punctuation">)</span>: /job:localhost/replica:0/task:0/device:CPU:0Const_1: <span class="token punctuation">(</span>Const<span class="token punctuation">)</span>: /job:localhost/replica:0/task:0/device:CPU:011.0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow入门案例</title>
      <link href="/2018/09/09/tensorflow-ru-men-an-li/"/>
      <url>/2018/09/09/tensorflow-ru-men-an-li/</url>
      
        <content type="html"><![CDATA[<p>tensorflow的运行方式分为4步：</p><ul><li>加载数据及定义超参数</li><li>构建网络</li><li>训练模型</li><li>评估模型和进行预测</li></ul><p>示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""1、加载数据及定义超参数"""</span><span class="token triple-quoted-string string">"""使用模拟数据"""</span><span class="token comment" spellcheck="true"># np.linspace用于生成等差数列，上述代码表示在[-1,1]之间生成300个数据，形成等差数列关系。</span>x_data <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将x_data转换为二维数组，newaxis表示在当前位置增加一个维度，在这里也就是增加列</span>x_data <span class="token operator">=</span> x_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 加入一些噪声点</span>noise <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">,</span> x_data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据公式模拟y值</span>y_true <span class="token operator">=</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">+</span> noise<span class="token keyword">def</span> <span class="token function">add_layer</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> in_size<span class="token punctuation">,</span> out_size<span class="token punctuation">,</span> activation_function<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    参数1:输入数据    参数2:输入数据维度    参数3:输出数据维度    参数4:激活函数    """</span>    <span class="token comment" spellcheck="true"># 构建权重</span>    w <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span>in_size<span class="token punctuation">,</span> out_size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构建偏置</span>    b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> out_size<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 矩阵相乘</span>    y_predict <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>input<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">+</span> b    <span class="token keyword">if</span> activation_function <span class="token keyword">is</span> None<span class="token punctuation">:</span>        outputs <span class="token operator">=</span> y_predict    <span class="token keyword">else</span><span class="token punctuation">:</span>        outputs <span class="token operator">=</span> activation_function<span class="token punctuation">(</span>y_predict<span class="token punctuation">)</span>    <span class="token keyword">return</span> outputs<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义训练数据的占位符</span>    xs <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ys <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""2、构建网络"""</span>    <span class="token comment" spellcheck="true"># 构建神经网络，输入层、1个隐层、输出层</span>    <span class="token comment" spellcheck="true"># 假设输入层有1个神经元、隐层有20个神经元、输出层有1个神经元</span>    h1 <span class="token operator">=</span> add_layer<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> activation_function<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 隐层</span>    prediction <span class="token operator">=</span> add_layer<span class="token punctuation">(</span>h1<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> activation_function<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出层</span>    <span class="token comment" spellcheck="true"># 损失函数</span>    <span class="token comment" spellcheck="true"># reduction_indices[1]：按行求和, reduction_indices[0]：按列求和</span>    var <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>ys <span class="token operator">-</span> prediction<span class="token punctuation">)</span><span class="token punctuation">,</span> reduction_indices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>var<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 梯度下降</span>    train_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""3、训练模型"""</span>    init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化所有变量</span>    sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train_step<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>xs<span class="token punctuation">:</span> x_data<span class="token punctuation">,</span> ys<span class="token punctuation">:</span> y_true<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""4、评估模型和进行预测"""</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loss:"</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>xs<span class="token punctuation">:</span> x_data<span class="token punctuation">,</span> ys<span class="token punctuation">:</span> y_true<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行效果如下：</p><pre class=" language-bash"><code class="language-bash">loss: 110.16617loss: 0.036757533loss: 0.0054481984loss: 0.0035916578loss: 0.0034978597loss: 0.0034721652loss: 0.0034505327loss: 0.0034306566loss: 0.0034096679loss: 0.0033894777loss: 0.0033684329loss: 0.0033460592loss: 0.003322898loss: 0.0033007755loss: 0.003278572loss: 0.0032573033loss: 0.0032364165loss: 0.003216444loss: 0.0031958343loss: 0.0031740805</code></pre><p>我们使用tensorflow框架基本都会有这4个大的步骤，有的网络结构复杂、有的网络结构简单而已，比如R-CNN网络、RPN网络、GoogleNet网络，有些网络结构我们可以直接拿来使用。</p><p>模型训练是一个非常耗时的操作，这个和我们定义的网络结构有关，有些业务场景还会涉及到一个网络结构的输出作为另外一个网络结构的输入。</p><p>总之，我们会根据我们的业务场景需求去做相应的处理，但是还是会遵循这几个基本步骤。</p><p>【拓展：np.newaxis】用于在当前位置增加一个维度，示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    test_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data2 <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># n行，1列</span>    test_data3 <span class="token operator">=</span> test_data<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 1列，n行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_data2:"</span><span class="token punctuation">,</span> test_data2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_data3:"</span><span class="token punctuation">,</span> test_data3<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">test_data2: <span class="token punctuation">[</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span><span class="token punctuation">]</span>test_data3: <span class="token punctuation">[</span><span class="token punctuation">[</span>1 2 3 4 5<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow张量和变量</title>
      <link href="/2018/09/08/tensorflow-zhang-liang-he-bian-liang/"/>
      <url>/2018/09/08/tensorflow-zhang-liang-he-bian-liang/</url>
      
        <content type="html"><![CDATA[<p>主要介绍tensorflow的张量和变量的基本用法。</p><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><p>Tensor是一个类，包含了属性和常用函数，一个Tensor对象主要包含以下三个部分，如下所示：</p><pre class=" language-bash"><code class="language-bash">Tensor<span class="token punctuation">(</span><span class="token string">"Placeholder:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span>2, 3<span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>    </code></pre><p>参数说明：</p><ul><li><p>第一部分是<code>Tensor Name</code>，比如：’Constant’、‘Placeholder’、‘Variable’等，0没有什么实质性的含义，只是表示Tensor的顺序，当前是0，那么下一个Tensor就是1了；</p></li><li><p>第二部分是<code>Tensor Shape</code>, 也就是Tensor的形状，这里是[2,3]，2行3列。</p></li><li><p>第三部分是<code>Tensor Type</code>，也就是tensor张量的数据类型。</p></li></ul><h3 id="tensor的形状"><a href="#tensor的形状" class="headerlink" title="tensor的形状"></a>tensor的形状</h3><p>tensor的形状，我们在TensorFlow中使用阶乘表示，它的形状表示如下表所示：</p><table><thead><tr><th>阶乘</th><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>0</td><td>纯量</td><td>只有大小</td><td>s = 481</td></tr><tr><td>1</td><td>向量</td><td>有大小和方向</td><td>v = [1, 2, 3]</td></tr><tr><td>2</td><td>矩阵</td><td>数据表</td><td>比如:3x2矩阵，m = [[1,2] [3,4] [5,6]]</td></tr><tr><td>3</td><td>3阶张量</td><td>数据立体</td><td>比如:1x2x2，t = [[   [[1,2],   [3,4]],      [[5,6],   [7,8]]   ]]</td></tr><tr><td>n</td><td>n阶张量</td><td>n阶张量</td><td>…</td></tr></tbody></table><p>在Tensorflow中，矩阵[n,m]，表示n行m列，行表示特征数量，列表示样本数量。</p><h3 id="tensor的数据类型"><a href="#tensor的数据类型" class="headerlink" title="tensor的数据类型"></a>tensor的数据类型</h3><table><thead><tr><th>Python类型</th><th>描述</th></tr></thead><tbody><tr><td>tf.float64</td><td>64位浮点数</td></tr><tr><td>tf.float32</td><td>32位浮点数</td></tr><tr><td>tf.int64</td><td>64位有符号整型</td></tr><tr><td>tf.int32</td><td>32位有符号整型</td></tr><tr><td>tf.int16</td><td>16位有符号整型</td></tr><tr><td>tf.int8</td><td>8位有符号整型</td></tr><tr><td>tf.uint8</td><td>8位无符号整型</td></tr><tr><td>tf.string</td><td>可变长度的字节数组，每一个张量元素都是一个字节数组</td></tr><tr><td>tf.bool</td><td>布尔型</td></tr><tr><td>tf.complex64</td><td>由两个32位浮点数组成的复数：实数和虚数</td></tr><tr><td>tf.qint32</td><td>用于量化Ops的32位有符号整型</td></tr><tr><td>tf.qint8</td><td>用于量化Ops的8位有符号整型</td></tr><tr><td>tf.quint8</td><td>用于量化Ops的8位无符号整型</td></tr></tbody></table><p>float32和float64表示浮点精度，但是实际并不会多分配内存，两者的使用效果差不多，我们常用float32。同理int32和int64也是这样。</p><h3 id="tensor属性"><a href="#tensor属性" class="headerlink" title="tensor属性"></a>tensor属性</h3><p>tensor对象具有如下属性：</p><ul><li><p>graph：张量所在的图</p></li><li><p>op:张量的op</p></li><li><p>name:张量的名称</p></li><li><p>shape:张量的形状</p></li></ul><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfa <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"graph-->"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"op-->"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>op<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name-->"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shape-->"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><h3 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h3><p>placeholder是占位符张量。</p><p>我们可以通过<code>tf.placeholder()</code>来创建一个占位符张量，用于在运行图的时候，可以动态赋予数据，我们通过<code>run(fetches, feed_dict=None, graph=None)</code>来动态赋予数据。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfplt <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>plt<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>        plt<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="张量的静态形状和动态形状"><a href="#张量的静态形状和动态形状" class="headerlink" title="张量的静态形状和动态形状"></a>张量的静态形状和动态形状</h3><p><strong>静态形状</strong></p><p>张量的形状在整个图中都是固定不可变的，如果初始的张量中由不确定的形状（如<code>?</code>），我们可以通过<code>set_shape()</code>去设置,通过<code>get_shape()</code>去获取</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfplt <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 列已经确定了，不能修改，行是None不确定可以修改</span>plt<span class="token punctuation">.</span>set_shape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plt<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>动态形状</strong></p><p>一种描述原始张量在执行过程中的一种形状，这个张量的形状在图的执行过程中是可以动态改变的。更新动态形状：<code>tf.reshape()</code>。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfplt <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reshape重新创建一个张量</span>plt2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>plt<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plt2<span class="token punctuation">)</span></code></pre><p>注意reshape前后的张量数据个数肯定是不能变的。</p><h3 id="随机张量"><a href="#随机张量" class="headerlink" title="随机张量"></a>随机张量</h3><p>在做神经网络训练的时候，梯度下降的初始参数w、b我们可以使用随机张量，然后通过梯度下降去优化。</p><p>以下是从正态分布创建随机张量的例子：</p><p>示例代码：</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span>shape<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span>seed<span class="token operator">=</span>None<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>我们关注2个参数，mean表示数据平均值，也就是数学中的μ，stddev表示标准差，也就是数学中的σ。</p><p>当μ=0，σ=1时，也就是标准正态分布。</p><h3 id="张量类型转换"><a href="#张量类型转换" class="headerlink" title="张量类型转换"></a>张量类型转换</h3><p>例如，如果我们的张量的dtype是tf.int32类型的，我们可以将其转换为tf.float32类型的。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>a<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span></code></pre><h3 id="张量合并"><a href="#张量合并" class="headerlink" title="张量合并"></a>张量合并</h3><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 张量合并</span>d <span class="token operator">=</span> tf<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> 1  2  3<span class="token punctuation">]</span> <span class="token punctuation">[</span> 4  5  6<span class="token punctuation">]</span> <span class="token punctuation">[</span> 7  8  9<span class="token punctuation">]</span> <span class="token punctuation">[</span>10 11 12<span class="token punctuation">]</span><span class="token punctuation">]</span>    </code></pre><p>说明：axis=0表示按行合并，axis=1表示按列合并。</p><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>variable 变量也是一种OP，是一种特殊的张量，能够进行存储持久化。</p><h3 id="Variable的创建"><a href="#Variable的创建" class="headerlink" title="Variable的创建"></a>Variable的创建</h3><p>API</p><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>initial_value<span class="token operator">=</span>None<span class="token punctuation">,</span>name<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>代码中涉及到了变量，一定要在Session之前做变量初始化，然后在Session中首先运行初始化的变量。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TP_CPP_LOG_LEVEL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token comment" spellcheck="true"># 创建变量</span>val <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变量初始化</span>init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 运行变量初始化op</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出变量</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>我们<code>在会话前必须做变量的初始化成一个op</code>，然后<code>在会话中首先运行这个初始化变量</code>。</p><p>我们也可以采用下面的简化方式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>   sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络简介</title>
      <link href="/2018/09/07/shen-jing-wang-luo-jian-jie/"/>
      <url>/2018/09/07/shen-jing-wang-luo-jian-jie/</url>
      
        <content type="html"><![CDATA[<p>定义：在机器学习和认知科学领域，人工神经网络（artificial neural network， 缩写ANN），简称神经网络（：neural network，缩写NN）或类神经网络，是一 种模仿生物神经网络的结构和功能的计算模型，用于对函数进行估计或近似。</p><p>神经网络是由以下几人发明出来的。主要是Hinton。</p><p>杰弗里·埃弗里斯特·辛顿 （英语：Geoffrey Everest Hinton）（1947年12月6日－）是一位英国出生的计算机学家和心理学家，以其在神经网络方面的贡献闻名。辛顿是反向传播算法的发明人之一，也是深度学习的积极推动者。</p><p><img src="/images/image-20190814145847976.png" alt="image-20190814145847976"></p><h2 id="神经网络种类"><a href="#神经网络种类" class="headerlink" title="神经网络种类"></a>神经网络种类</h2><p>基础神经网络：单层感知器，线性神经网络，BP神经网络，Hopfield神经网络等﻿</p><p>进阶神经网络：玻尔兹曼机，受限玻尔兹曼机，递归神经网络等﻿</p><p>深度神经网络：深度置信网络，卷积神经网络，循环神经网络，LSTM网络等</p><h2 id="神经网络组成"><a href="#神经网络组成" class="headerlink" title="神经网络组成"></a>神经网络组成</h2><p>神经网络组成主要有：</p><ul><li>输入层</li><li>隐层</li><li>输出层</li></ul><p><img src="/images/image-20190814150143924.png" alt="image-20190814150143924"></p><p><code>结构（Architecture）</code>：我们需要构建一个神经网络结构，每个神经元都是一个特征，神经网络中的变量是神经元连接的权重。</p><p><code>激励函数（Activity Rule）</code>：大部分神经网络模型具有一个短时间尺度的动力学规则，来定义神经元如何根据其他神经元的活动来改变自己的激励值。</p><p><code>学习规则（Learning Rule）</code>：学习规则指定了网络中的权重如何随着时间推进而调整。（反向传播算法）</p><h2 id="神经网络的特点"><a href="#神经网络的特点" class="headerlink" title="神经网络的特点"></a>神经网络的特点</h2><ul><li>输入向量的维度和输入神经元的个数相同。</li><li>每个连接都有一个权值。</li><li>同一层神经元之间没有连接。</li><li>由输入层、隐层、输出层组成。</li><li>第N层与第N-1层的所有神经元连接，也叫全连接。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow介绍</title>
      <link href="/2018/09/07/tensorflow-jie-shao/"/>
      <url>/2018/09/07/tensorflow-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="tensorflow介绍"><a href="#tensorflow介绍" class="headerlink" title="tensorflow介绍"></a>tensorflow介绍</h2><p>TensorFlow由谷歌人工智能团队谷歌大脑（Google Brain）开发和维护的一个深度学习框架。</p><p>tensorflow = tensor + flow，也就是有向数据流，我们使用tensorflow就是构建一个数据流图，然后执行该图。</p><p>tensorflow数据流图核心要素：</p><ul><li><p>张量：tensor，数据就是张量</p></li><li><p>节点：operation(op),所有的运算操作都是一个op</p></li><li><p>图：graph，整个程序的结构就是一个graph，定义了整个程序的框架</p></li><li><p>会话：session，用来运行图</p></li></ul><p>说明：</p><ul><li>tensorflow是一个<code>计算密集型的框架</code>，<code>主要是cpu/gpu计算</code>，所以跑tensorflow代码是需要有好的硬件资源的，尤其是GPU资源；</li><li>如django/scrapy等框架是IO密集型框架，主要是磁盘操作；</li></ul><p><strong>tensorflow Playground</strong></p><p>google为我们提供了一个tensorflow在线演示环境<a href="[http://playground.tensorflow.org](http://playground.tensorflow.org)">tensorflow Playground</a></p><h2 id="tensorflow安装"><a href="#tensorflow安装" class="headerlink" title="tensorflow安装"></a>tensorflow安装</h2><h3 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h3><p>必须选择以下类型的TensorFlow之一来安装：</p><ul><li><p>TensorFlow仅支持CPU支持。如果您的系统没有NVIDIA®GPU，则必须安装此版本。请注意，此版本的TensorFlow通常会更容易安装（通常在5或10分钟内），因此即使您有NVIDIA GPU，我们建议先安装此版本。</p></li><li><p>TensorFlow支持GPU。TensorFlow程序通常在GPU上比在CPU上运行得更快。因此，如果您的系统具有满足以下所示先决条件的NVIDIA®GPU，并且您需要运行性能关键型应用程序，则应最终安装此版本。</p></li></ul><h3 id="创建隔离环境"><a href="#创建隔离环境" class="headerlink" title="创建隔离环境"></a>创建隔离环境</h3><p>基于virtualenv创建隔离环境</p><pre class=" language-bash"><code class="language-bash">mkvirtualenv -p python3.6 tensorflow</code></pre><p>基于conda创建隔离环境</p><pre class=" language-bash"><code class="language-bash">conda create -n tensorflow python<span class="token operator">=</span>3.6</code></pre><h3 id="Mac下安装"><a href="#Mac下安装" class="headerlink" title="Mac下安装"></a>Mac下安装</h3><p>mac下因为硬件原因，只好安装cpu版本。</p><ol><li>安装Tensorflow</li></ol><p>安装最新版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade tensorflow</code></pre><p>安装指定版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> tensorflow<span class="token operator">==</span>1.14.0</code></pre><p>验证安装指令</p><pre class=" language-bash"><code class="language-bash">python -c <span class="token string">"import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"</span></code></pre><ol start="2"><li>安装tensorboard</li></ol><p>tensorboard是tensorflow提供的可视化界面，建议和tensorflow安装一样的版本。</p><p>安装最新版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade tensorboard</code></pre><p>安装指定版本</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> tensorboard<span class="token operator">==</span>1.14.0</code></pre><h3 id="Ubuntu和Linux"><a href="#Ubuntu和Linux" class="headerlink" title="Ubuntu和Linux"></a>Ubuntu和Linux</h3><p>如果要安装GPU版本的，需要安装一大堆NVIDIA软件(不推荐)：</p><ul><li>CUDA®Toolkit 8.0。有关详细信息，请参阅 NVIDIA的文档。确保您将相关的Cuda路径名附加到 LD_LIBRARY_PATH环境变量中，如NVIDIA文档中所述。 与CUDA Toolkit 8.0相关的NVIDIA驱动程序。</li><li>cuDNN v5.1。有关详细信息，请参阅 NVIDIA的文档。确保CUDA_HOME按照NVIDIA文档中的描述创建环境变量。</li><li>具有CUDA Compute Capability 3.0或更高版本的GPU卡。有关支持的GPU卡的列表，请参阅 NVIDIA文档。</li><li>libcupti-dev库，即NVIDIA CUDA Profile Tools界面。此库提供高级分析支持。要安装此库，请发出以下命令：</li></ul><p>使用pip安装,分别有2.7和3.6版本的</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 仅使用 CPU 的版本</span>$  pip <span class="token function">install</span> https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.1-cp27-none-linux_x86_64.whl$  pip3 <span class="token function">install</span> https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.1-cp36-cp36m-linux_x86_64.whl</code></pre><h2 id="tensorflow核心概念"><a href="#tensorflow核心概念" class="headerlink" title="tensorflow核心概念"></a>tensorflow核心概念</h2><h3 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a>tensor</h3><p>tensorflow graph中的数据都是张量。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 张量合并</span>d <span class="token operator">=</span> tf<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">Tensor<span class="token punctuation">(</span><span class="token string">"Const:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>Tensor<span class="token punctuation">(</span><span class="token string">"Add:0"</span>, shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span></code></pre><p>我们看到结果都是Tensor对象。</p><h3 id="op"><a href="#op" class="headerlink" title="op"></a>op</h3><p>只要使用tensorflow的API定义的函数都是op，如constant()、add()，tensorflow的op非常丰富。</p><h3 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h3><p>tensorflow有一个默认图，如果我们不指定图的话，默认就是在默认图上运行的。</p><p><strong>默认图</strong></p><p>如果我们不指定图的话，我们使用的是Tensorflow的默认图，它会自动调用<code>graph = tf.get_default_graph()</code>，相当于给程序分配一段内存，我们所有的Tensor、op都是在这张图上。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 新建2个tensor</span>a <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 新建1个op</span>sum <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>graph<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>graph<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>graph<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 默认图</span>graph <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查看会话所在图</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span> </code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span><span class="token operator">&lt;</span>tensorflow.python.framework.ops.Graph object at 0x1114caf98<span class="token operator">></span></code></pre><p>通过运行结果，我们发现tensor、op和session都在一个图上，也就是系统的默认图。<code>with tf.Session() as sess:</code>相当于<code>with tf.Session(graph=g) as sess:</code>。</p><p><strong>自定义图</strong></p><p>默认使用的是tensorflow默认图，我们也是可以自定义图。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CPP_MIN_LOG_LEVEL'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token comment" spellcheck="true"># 创建图</span>g <span class="token operator">=</span> tf<span class="token punctuation">.</span>Graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用自定义的图</span><span class="token keyword">with</span> g<span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>session是一个会话，tensorflow的graph都必须在Session中执行。</p><p>会话的作用：</p><ol><li>运行图的结构</li><li>分配资源计算，决定graph在什么设备上运行</li><li>掌握资源（变量的资源、队列、线程）</li></ol><p>会话对象，我们可以执行创建、运行和关闭等操作。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>会话是graph的上下文环境，只要有Session就有上下文环境。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip基本使用</title>
      <link href="/2018/09/07/pip-ji-ben-shi-yong/"/>
      <url>/2018/09/07/pip-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>PYPI官网：<a href="https://pypi.org/，我们使用pip安装的库默认来自这个网站，我们也可以在该网站查找我们需要安装的库。" target="_blank" rel="noopener">https://pypi.org/，我们使用pip安装的库默认来自这个网站，我们也可以在该网站查找我们需要安装的库。</a></p><h2 id="设置国内镜像源"><a href="#设置国内镜像源" class="headerlink" title="设置国内镜像源"></a>设置国内镜像源</h2><p>Mac下修改pip.conf，路径如下：</p><pre class=" language-bash"><code class="language-bash">/Users/zhusheng/.config/pip</code></pre><p>设置清华镜像源：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> https://pypi.tuna.tsinghua.edu.cn/simple<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>mirrors.aliyun.com</code></pre><p>如果想恢复默认源，清空该文件即可。</p><h2 id="设置超时事件"><a href="#设置超时事件" class="headerlink" title="设置超时事件"></a>设置超时事件</h2><p>我们可以设置超时参数，如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span><span class="token function">timeout</span> <span class="token operator">=</span> 6000index-url <span class="token operator">=</span> http://e.pypi.python.org/simpletrusted-host <span class="token operator">=</span> pypi.douban.com<span class="token punctuation">[</span>install<span class="token punctuation">]</span>use-mirrors <span class="token operator">=</span> <span class="token boolean">true</span>mirrors <span class="token operator">=</span> http://e.pypi.python.org</code></pre><h2 id="临时使用国内源"><a href="#临时使用国内源" class="headerlink" title="临时使用国内源"></a>临时使用国内源</h2><p>通过-i指定下载源即可。</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> tensorflow -i  https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>example</title>
      <link href="/2018/09/07/example/"/>
      <url>/2018/09/07/example/</url>
      
        <content type="html"><![CDATA[<h1 id="example"><a href="#example" class="headerlink" title="example"></a>example</h1><p><img src="/images/example.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键</title>
      <link href="/2018/09/07/idea-kuai-jie-jian/"/>
      <url>/2018/09/07/idea-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<p>复制一行：command + D</p><p>格式化代码：command + option + L</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow梯度下降</title>
      <link href="/2018/09/05/tensorflow-ti-du-xia-jiang/"/>
      <url>/2018/09/05/tensorflow-ti-du-xia-jiang/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="http://www.elecfans.com/d/788383.html" target="_blank" rel="noopener">http://www.elecfans.com/d/788383.html</a></p><p>梯度就是函数在当前位置的导数，梯度下降是用来优化损失函数的常见策略。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><pre class=" language-python"><code class="language-python">tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span>    </code></pre><p>参数说明：</p><ul><li>learning_rate，学习率。一般为0.1、0.01、0.001等量级的，当然也可以是1、10、100但是基本不会这么写。</li></ul><p>Learning_rate在梯度下降中是一个非常重要的参数，它决定的是从山顶到达山底的step和速度。Learning_rate过大或者过小都不好，过大会导致梯度爆炸，过小会达不到想要的训练效果，需要增加训练次数。</p><h3 id="梯度爆炸"><a href="#梯度爆炸" class="headerlink" title="梯度爆炸"></a>梯度爆炸</h3><p>在极端的情况下，权重的值变得非常大，以致于溢出导致NAN值就是梯度爆炸。梯度爆炸问题在深度学习神经网络RNN中更容易出现。如何解决梯度爆炸问题：</p><ul><li>重新设计网络；</li><li>调整学习率；</li><li>使用梯度截断，在训练过程中检查和限制梯度的大小；</li><li>使用激活函数。</li></ul><h3 id="梯度消失"><a href="#梯度消失" class="headerlink" title="梯度消失"></a>梯度消失</h3><p>在神经网络中，当前面隐藏层的学习速率低于后面隐藏层的学习速率，即随着隐藏层数目的增加，分类准确率反而下降了。这种现象叫做梯度消失问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件操作</title>
      <link href="/2017/09/12/python-wen-jian-cao-zuo/"/>
      <url>/2017/09/12/python-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="文件分割：split-和splitext"><a href="#文件分割：split-和splitext" class="headerlink" title="文件分割：split() 和splitext()"></a>文件分割：split() 和splitext()</h2><p>split：分割url为路径和文件。</p><p>splitext：分割文件为文件名和后缀。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osfile_path <span class="token operator">=</span> <span class="token string">"D:/test/test.py"</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span>tempfilename<span class="token punctuation">)</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>extension<span class="token punctuation">)</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>tempfilename<span class="token punctuation">)</span></code></pre><p>说明：</p><ul><li>filepath为文件的目录,即<code>D:/test</code></li><li>filename为文件的名字,即<code>test</code></li><li>extension为文件的扩展名,即<code>.py</code></li></ul><h2 id="获取当前文件路径：getcwd"><a href="#获取当前文件路径：getcwd" class="headerlink" title="获取当前文件路径：getcwd()"></a>获取当前文件路径：getcwd()</h2><p>该方法用于获取当前文件所在路径的全称。</p><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><pre class=" language-bash"><code class="language-bash">/Users/zhusheng/WorkSpace/Github/MachineLearning/TF-CNN    </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络请求</title>
      <link href="/2017/09/10/python-wang-luo-qing-qiu/"/>
      <url>/2017/09/10/python-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<p>python网络请求，介绍了urllib库、request库以及网络请求状态码。</p><h2 id="urllib库网络请求"><a href="#urllib库网络请求" class="headerlink" title="urllib库网络请求"></a>urllib库网络请求</h2><p>urllib是python内置的网络请求库。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> parse<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印二进制形式的响应内容</span>    <span class="token comment" spellcheck="true">#print(response.read())</span>    <span class="token comment" spellcheck="true">#  读取网页内容 将二进制内容按照utf-8格式解码 生成字符串格式</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'word'</span><span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://httpbin.org/post"</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 伪装一个火狐浏览器</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span><span class="token punctuation">,</span>        <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">'httpbin.org'</span>    <span class="token punctuation">}</span>    dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Germey"</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 利用更强大的 Request 类来构建一个请求</span>    req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 也可以通过更加灵活的方式添加headers   如:</span>    <span class="token comment" spellcheck="true"># req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')</span>    <span class="token comment" spellcheck="true"># req.add_header('Referer', 'https://passport.weibo.cn/signin/login?entry=mweibo&amp;res=wel&amp;wm=3349&amp;r=http%3A%2F%2Fm.weibo.cn%2F')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    header<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="requests库网络请求"><a href="#requests库网络请求" class="headerlink" title="requests库网络请求"></a>requests库网络请求</h2><p>requests是一个python 的第三方网络请求库，更加常用，通过该库可以很方便的实现get、post、put、delete、patch等请求方法。</p><p>参考链接：<a href="https://www.cnblogs.com/caesura-k/p/9638021.html" target="_blank" rel="noopener">https://www.cnblogs.com/caesura-k/p/9638021.html</a></p><p>参考链接2：<a href="https://blog.csdn.net/byweiker/article/details/79234853" target="_blank" rel="noopener">https://blog.csdn.net/byweiker/article/details/79234853</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ReadTimeout<span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    get请求    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_with_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    带参数的get请求    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get?name=germey&amp;age=22"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_with_params2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    带参数的get请求    :return:    """</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'germey'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">22</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将response以json的形式展示    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将response以二进制的形式展示    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://github.com/favicon.ico"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    添加请求头    :return:    """</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/explore"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    post请求    :return:    """</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'germey'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'22'</span><span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_response_attibutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取响应对象的属性    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.jianshu.com'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>history<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>history<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">file_upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文件上传    :return:    """</span>    files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span><span class="token string">'/Users/zhusheng/WorkSpace/Tmp/cookie.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取cookies    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">maintain_cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    会话维持、模拟登陆    如果某个响应中包含一些Cookie，你可以快速访问它们    :return:    """</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.google.com.hk/'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">'NID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    要想发送你的cookies到服务器，可以使用 cookies 参数：    :return:    """</span>    url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/cookies'</span>    cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'testCookies_1'</span><span class="token punctuation">:</span> <span class="token string">'Hello_Python3'</span><span class="token punctuation">,</span> <span class="token string">'testCookies_2'</span><span class="token punctuation">:</span> <span class="token string">'Hello_Requests'</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 在Cookie Version 0中规定空格、方括号、圆括号、等于号、逗号、双引号、斜杠、问号、@，冒号，分号等特殊符号都不能作为Cookie的内容。</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设置代理    :return:    """</span>    proxies <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1:9743"</span><span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"https://127.0.0.1:9743"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设置超时    :return:    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">except</span> ReadTimeout<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Timeout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设置认证    :return:    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://120.27.34.24:9001/"</span><span class="token punctuation">,</span> auth<span class="token operator">=</span>HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_auth2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://120.27.34.24:9001/"</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    set_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="网络状态码"><a href="#网络状态码" class="headerlink" title="网络状态码"></a>网络状态码</h2><pre class=" language-bash"><code class="language-bash">100: <span class="token punctuation">(</span><span class="token string">'continue'</span>,<span class="token punctuation">)</span>,101: <span class="token punctuation">(</span><span class="token string">'switching_protocols'</span>,<span class="token punctuation">)</span>,102: <span class="token punctuation">(</span><span class="token string">'processing'</span>,<span class="token punctuation">)</span>,103: <span class="token punctuation">(</span><span class="token string">'checkpoint'</span>,<span class="token punctuation">)</span>,122: <span class="token punctuation">(</span><span class="token string">'uri_too_long'</span>, <span class="token string">'request_uri_too_long'</span><span class="token punctuation">)</span>,200: <span class="token punctuation">(</span><span class="token string">'ok'</span>, <span class="token string">'okay'</span>, <span class="token string">'all_ok'</span>, <span class="token string">'all_okay'</span>, <span class="token string">'all_good'</span>, <span class="token string">'\\o/'</span>, <span class="token string">'✓'</span><span class="token punctuation">)</span>,201: <span class="token punctuation">(</span><span class="token string">'created'</span>,<span class="token punctuation">)</span>,202: <span class="token punctuation">(</span><span class="token string">'accepted'</span>,<span class="token punctuation">)</span>,203: <span class="token punctuation">(</span><span class="token string">'non_authoritative_info'</span>, <span class="token string">'non_authoritative_information'</span><span class="token punctuation">)</span>,204: <span class="token punctuation">(</span><span class="token string">'no_content'</span>,<span class="token punctuation">)</span>,205: <span class="token punctuation">(</span><span class="token string">'reset_content'</span>, <span class="token string">'reset'</span><span class="token punctuation">)</span>,206: <span class="token punctuation">(</span><span class="token string">'partial_content'</span>, <span class="token string">'partial'</span><span class="token punctuation">)</span>,207: <span class="token punctuation">(</span><span class="token string">'multi_status'</span>, <span class="token string">'multiple_status'</span>, <span class="token string">'multi_stati'</span>, <span class="token string">'multiple_stati'</span><span class="token punctuation">)</span>,208: <span class="token punctuation">(</span><span class="token string">'already_reported'</span>,<span class="token punctuation">)</span>,226: <span class="token punctuation">(</span><span class="token string">'im_used'</span>,<span class="token punctuation">)</span>,<span class="token comment" spellcheck="true"># Redirection.</span>300: <span class="token punctuation">(</span><span class="token string">'multiple_choices'</span>,<span class="token punctuation">)</span>,301: <span class="token punctuation">(</span><span class="token string">'moved_permanently'</span>, <span class="token string">'moved'</span>, <span class="token string">'\\o-'</span><span class="token punctuation">)</span>,302: <span class="token punctuation">(</span><span class="token string">'found'</span>,<span class="token punctuation">)</span>,303: <span class="token punctuation">(</span><span class="token string">'see_other'</span>, <span class="token string">'other'</span><span class="token punctuation">)</span>,304: <span class="token punctuation">(</span><span class="token string">'not_modified'</span>,<span class="token punctuation">)</span>,305: <span class="token punctuation">(</span><span class="token string">'use_proxy'</span>,<span class="token punctuation">)</span>,306: <span class="token punctuation">(</span><span class="token string">'switch_proxy'</span>,<span class="token punctuation">)</span>,307: <span class="token punctuation">(</span><span class="token string">'temporary_redirect'</span>, <span class="token string">'temporary_moved'</span>, <span class="token string">'temporary'</span><span class="token punctuation">)</span>,308: <span class="token punctuation">(</span><span class="token string">'permanent_redirect'</span>, <span class="token string">'resume_incomplete'</span>, <span class="token string">'resume'</span>,<span class="token punctuation">)</span>, <span class="token comment" spellcheck="true"># These 2 to be removed in 3.0</span><span class="token comment" spellcheck="true"># Client Error.</span>400: <span class="token punctuation">(</span><span class="token string">'bad_request'</span>, <span class="token string">'bad'</span><span class="token punctuation">)</span>,401: <span class="token punctuation">(</span><span class="token string">'unauthorized'</span>,<span class="token punctuation">)</span>,402: <span class="token punctuation">(</span><span class="token string">'payment_required'</span>, <span class="token string">'payment'</span><span class="token punctuation">)</span>,403: <span class="token punctuation">(</span><span class="token string">'forbidden'</span>,<span class="token punctuation">)</span>,404: <span class="token punctuation">(</span><span class="token string">'not_found'</span>, <span class="token string">'-o-'</span><span class="token punctuation">)</span>,405: <span class="token punctuation">(</span><span class="token string">'method_not_allowed'</span>, <span class="token string">'not_allowed'</span><span class="token punctuation">)</span>,406: <span class="token punctuation">(</span><span class="token string">'not_acceptable'</span>,<span class="token punctuation">)</span>,407: <span class="token punctuation">(</span><span class="token string">'proxy_authentication_required'</span>, <span class="token string">'proxy_auth'</span>, <span class="token string">'proxy_authentication'</span><span class="token punctuation">)</span>,408: <span class="token punctuation">(</span><span class="token string">'request_timeout'</span>, <span class="token string">'timeout'</span><span class="token punctuation">)</span>,409: <span class="token punctuation">(</span><span class="token string">'conflict'</span>,<span class="token punctuation">)</span>,410: <span class="token punctuation">(</span><span class="token string">'gone'</span>,<span class="token punctuation">)</span>,411: <span class="token punctuation">(</span><span class="token string">'length_required'</span>,<span class="token punctuation">)</span>,412: <span class="token punctuation">(</span><span class="token string">'precondition_failed'</span>, <span class="token string">'precondition'</span><span class="token punctuation">)</span>,413: <span class="token punctuation">(</span><span class="token string">'request_entity_too_large'</span>,<span class="token punctuation">)</span>,414: <span class="token punctuation">(</span><span class="token string">'request_uri_too_large'</span>,<span class="token punctuation">)</span>,415: <span class="token punctuation">(</span><span class="token string">'unsupported_media_type'</span>, <span class="token string">'unsupported_media'</span>, <span class="token string">'media_type'</span><span class="token punctuation">)</span>,416: <span class="token punctuation">(</span><span class="token string">'requested_range_not_satisfiable'</span>, <span class="token string">'requested_range'</span>, <span class="token string">'range_not_satisfiable'</span><span class="token punctuation">)</span>,417: <span class="token punctuation">(</span><span class="token string">'expectation_failed'</span>,<span class="token punctuation">)</span>,418: <span class="token punctuation">(</span><span class="token string">'im_a_teapot'</span>, <span class="token string">'teapot'</span>, <span class="token string">'i_am_a_teapot'</span><span class="token punctuation">)</span>,421: <span class="token punctuation">(</span><span class="token string">'misdirected_request'</span>,<span class="token punctuation">)</span>,422: <span class="token punctuation">(</span><span class="token string">'unprocessable_entity'</span>, <span class="token string">'unprocessable'</span><span class="token punctuation">)</span>,423: <span class="token punctuation">(</span><span class="token string">'locked'</span>,<span class="token punctuation">)</span>,424: <span class="token punctuation">(</span><span class="token string">'failed_dependency'</span>, <span class="token string">'dependency'</span><span class="token punctuation">)</span>,425: <span class="token punctuation">(</span><span class="token string">'unordered_collection'</span>, <span class="token string">'unordered'</span><span class="token punctuation">)</span>,426: <span class="token punctuation">(</span><span class="token string">'upgrade_required'</span>, <span class="token string">'upgrade'</span><span class="token punctuation">)</span>,428: <span class="token punctuation">(</span><span class="token string">'precondition_required'</span>, <span class="token string">'precondition'</span><span class="token punctuation">)</span>,429: <span class="token punctuation">(</span><span class="token string">'too_many_requests'</span>, <span class="token string">'too_many'</span><span class="token punctuation">)</span>,431: <span class="token punctuation">(</span><span class="token string">'header_fields_too_large'</span>, <span class="token string">'fields_too_large'</span><span class="token punctuation">)</span>,444: <span class="token punctuation">(</span><span class="token string">'no_response'</span>, <span class="token string">'none'</span><span class="token punctuation">)</span>,449: <span class="token punctuation">(</span><span class="token string">'retry_with'</span>, <span class="token string">'retry'</span><span class="token punctuation">)</span>,450: <span class="token punctuation">(</span><span class="token string">'blocked_by_windows_parental_controls'</span>, <span class="token string">'parental_controls'</span><span class="token punctuation">)</span>,451: <span class="token punctuation">(</span><span class="token string">'unavailable_for_legal_reasons'</span>, <span class="token string">'legal_reasons'</span><span class="token punctuation">)</span>,499: <span class="token punctuation">(</span><span class="token string">'client_closed_request'</span>,<span class="token punctuation">)</span>,<span class="token comment" spellcheck="true"># Server Error.</span>500: <span class="token punctuation">(</span><span class="token string">'internal_server_error'</span>, <span class="token string">'server_error'</span>, <span class="token string">'/o\\'</span>, <span class="token string">'✗'</span><span class="token punctuation">)</span>,501: <span class="token punctuation">(</span><span class="token string">'not_implemented'</span>,<span class="token punctuation">)</span>,502: <span class="token punctuation">(</span><span class="token string">'bad_gateway'</span>,<span class="token punctuation">)</span>,503: <span class="token punctuation">(</span><span class="token string">'service_unavailable'</span>, <span class="token string">'unavailable'</span><span class="token punctuation">)</span>,504: <span class="token punctuation">(</span><span class="token string">'gateway_timeout'</span>,<span class="token punctuation">)</span>,505: <span class="token punctuation">(</span><span class="token string">'http_version_not_supported'</span>, <span class="token string">'http_version'</span><span class="token punctuation">)</span>,506: <span class="token punctuation">(</span><span class="token string">'variant_also_negotiates'</span>,<span class="token punctuation">)</span>,507: <span class="token punctuation">(</span><span class="token string">'insufficient_storage'</span>,<span class="token punctuation">)</span>,509: <span class="token punctuation">(</span><span class="token string">'bandwidth_limit_exceeded'</span>, <span class="token string">'bandwidth'</span><span class="token punctuation">)</span>,510: <span class="token punctuation">(</span><span class="token string">'not_extended'</span>,<span class="token punctuation">)</span>,511: <span class="token punctuation">(</span><span class="token string">'network_authentication_required'</span>, <span class="token string">'network_auth'</span>, <span class="token string">'network_authentication'</span><span class="token punctuation">)</span>,</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
